{"version":3,"sources":["pages/dashboard/inventory/manage-stock-history/ManageStockHistory.js","pages/dashboard/inventory/manage-inventory/inventory-item-form/ViewAllSoldTransactionsDialog.js","pages/dashboard/inventory/manage-inventory/inventory-item-form/SetUpAmountReceivedDialog.js","pages/dashboard/inventory/manage-inventory/inventory-item-form/ItemForm.js","pages/dashboard/inventory/manage-inventory/CreateOrUpdateInventoryDialog.js","pages/dashboard/inventory/manage-inventory/ManageInventory.js","pages/dashboard/inventory/manage-cateogry/CreateOrUpdateCategoryDialog.js","pages/dashboard/inventory/manage-cateogry/ManageCategory.js","pages/dashboard/inventory/InventoryIndex.js"],"names":["ManageStockHistory","state","setState","dialogType","temp_initStockHistoryRef","useRef","useState","stockHistoryList","setStockHistoryList","totalQty","totalUnitPrice","totalPrice","totalRow","setTotalRow","meanUnitPrice","meanPercentageConversion","meanShippingPercentage","meanRow","setMeanRow","onHandleChange","value","name","index","newHistoryList","rowData","Number","unitPrice","qty","percentageConversion","calculateTotal","totalQtyCal","totalUnitPriceCal","totalPriceCal","length","totalQtyWithShippingConverted","forEach","row","totalPriceWithShipping","meanUnitPriceCal","meanPercentageConversionCal","prev","stockHistory","historyList","useEffect","current","historyWithDateFormat","history","push","dateCreated","toDate","Grid","item","xs","md","Typography","variant","Stack","spacing","Button","color","onClick","shippingPercentage","addRow","sx","width","disabled","TableContainer","Table","border","TableHead","TableRow","TableCell","size","align","minWidth","TableBody","map","stockHistoryData","IconButton","splice","deleteRow","DatePicker","onChange","newValue","renderInput","params","TextField","inputFormat","fullWidth","label","type","id","event","target","style","whiteSpace","direction","alignItems","toFixed","displayType","thousandSeparator","TableFooter","colSpan","ViewAllSoldTransactionsDialog","open","setOpen","allTransactions","temp_calculateTotalRef","totalWithoutVAT","totalWithVAT","total","setTotal","totalWithoutVATCal","totalWithVATCal","transaction","rowDiscountedAmount","rowAmountWithVAT","Dialog","maxWidth","DialogTitle","DialogContent","Divider","profomaConverted","previousProformaNumber","docTitle","docString","docDate","moment","format","rowUnitPrice","itemQtySold","rowAmount","rowDiscountAmount","DialogActions","SetUpAmountReceivedDialog","data","setData","fetchData","dispatch","useDispatch","enqueueSnackbar","useSnackbar","temp_retrievedListRef","list","setList","amount","setAmount","retrievedList","a","setLoading","db","collection","doc","companyId","inventoryId","orderBy","get","then","result","docs","arr","catch","error","message","add","timestamp","firebase","firestore","Timestamp","fromDate","Date","updatedData","set","merge","container","typeLabel","submitChanges","ItemForm","categoryList","sku","model","category","materials","allInventoryItemTransactions","qtySold","unitPriceWithoutShipping","qtyRemaining","unitPriceWithShipping","unitSellingPrice","percentageShipping","totalSellingPrice","companyName","percentageProfit","openSetUpAmountReceivedDialog","setOpenSetUpAmountReceivedDialog","fields","required","readOnly","openAllTransactionDialog","set_openAllTransactionDialog","temp_calculateQtyRemainingRef","temp_calculatePriceWithShippingRef","temp_calculateTotalPriceWithShippingRef","temp_calculateTotalSellingPriceRef","documentDocRef","runTransaction","sfDoc","exists","update","documentIndex","newDocumentNumber","documentNumber","colorString","words","split","getFirstAlphabet","word","match","i","firstChar","lastCharacter","slice","formattedDocNumber","toString","padStart","skuCode","toUpperCase","err","where","remaining","priceWithShipping","field","Tooltip","title","startIcon","generateSkuCode","checkSkuCode","percentageProfitValue","sellingPrice","Autocomplete","e","reason","options","getOptionLabel","option","CreateOrUpdateInventoryDialog","openDialog","handleCloseDialog","setCategoryList","temp_fetchCategoryRef","itemList","preventDefault","performAdd","performUpdate","TableCRUDTemplate","lazy","ManageInventory","companyDetails","useSelector","selectDocument","setOpenDialog","setDialogType","itemDetail","setItemDetail","setLastDoc","setHasMore","temp_fetchInventoryRef","fetchInventory","limit","lastVisible","JSON","stringify","totalAmountReceivedWithoutVAT","totalAmountReceivedWithVAT","deleteBtnFunc","delete","fallback","headers","aCollection","addBtnDisplay","addBtnLabel","addBtnFunc","emptyColMsg","viewOption","viewBtnFunc","updateBtnDisplay","deleteBtnDisplay","updateBtnFunc","CreateOrUpdateCategoryDialog","onClose","ManageCategory","categoryDetail","setCategoryDetail","fetchCategory","CompanyClientSelection","InventoryIndex","themeStretch","useSettings","navigate","useNavigate","selectedTable","setSelectedTable","Page","Container","PATH_DASHBOARD","general","app1","collectionName","renderOption","props","key"],"mappings":"ilBAqBe,SAASA,EAAT,GAA8D,IAAhCC,EAA+B,EAA/BA,MAAOC,EAAwB,EAAxBA,SAAUC,EAAc,EAAdA,WACtDC,EAA2BC,mBAEjC,EAAgDC,mBAAS,IAAzD,mBAAOC,EAAP,KAAyBC,EAAzB,KAEA,EAAgCF,mBAAS,CACvCG,SAAU,EACVC,eAAgB,EAChBC,WAAY,IAHd,mBAAOC,EAAP,KAAiBC,EAAjB,KAMA,EAA8BP,mBAAS,CACrCQ,cAAe,EACfC,yBAA0B,EAC1BC,uBAAwB,IAH1B,mBAAOC,EAAP,KAAgBC,EAAhB,KA6DA,SAASC,EAAeC,EAAOC,EAAMC,GAAQ,IAAD,EACtCC,EAAc,YAAQhB,GAAoB,IAE1CiB,EAAO,eAAQD,EAAeD,IAuB9BX,EAnBEc,OADK,cAATJ,EACWD,GAAS,GACF,OAAPI,QAAO,IAAPA,OAAA,EAAAA,EAASE,YAAa,GAERD,OAAR,QAATJ,EAAwBD,GAAS,GAAmB,OAAPI,QAAO,IAAPA,OAAA,EAAAA,EAASG,MAAO,GAajEF,OADK,yBAATJ,EACWD,GAAS,GACF,OAAPI,QAAO,IAAPA,OAAA,EAAAA,EAASI,uBAAwB,GAI9CL,EAAeD,GAAf,2BACKC,EAAeD,IADpB,uBAEGD,EAAOD,GAFV,uCAG0BT,GAAc,GAHxC,IAMAH,EAAoBe,GAEpBM,EAAeN,GAYjB,SAASM,EAAeN,GACtB,IAAIO,EAAc,EACdC,EAAoB,EACpBC,EAAgB,EAEpB,GAAIT,IAAgC,OAAdA,QAAc,IAAdA,OAAA,EAAAA,EAAgBU,QAAS,EAAG,CAEhD,IAAIC,EAAgC,EAEpCX,EAAeY,SAAQ,SAACC,GACtBN,GAA4BL,QAAU,OAAHW,QAAG,IAAHA,OAAA,EAAAA,EAAKT,MAAO,GAC/CI,GAAwCN,QAAU,OAAHW,QAAG,IAAHA,OAAA,EAAAA,EAAKV,YAAa,GACjEM,GACkBP,QAAU,OAAHW,QAAG,IAAHA,OAAA,EAAAA,EAAKC,yBAA0B,GAExDH,GAEET,QAAU,OAAHW,QAAG,IAAHA,OAAA,EAAAA,EAAKT,MAAO,GAAKF,QAAU,OAAHW,QAAG,IAAHA,OAAA,EAAAA,EAAKR,uBAAwB,MAGhE,IAAIU,EAAmBN,EAAgBE,EAEnCK,EACFL,EAAgCJ,EAIlCjB,EAAY,CACVJ,SAAUqB,EACVpB,eAAgBqB,EAChBpB,WAAYqB,IAGdd,EAAW,CACTJ,cAAewB,GAAoB,EACnCvB,yBAA0BwB,GAA+B,IAI3DrC,GAAS,SAACsC,GACR,OAAO,2BACFA,GADL,IAEEb,IAAKG,EACLW,aAAc,CACZC,YAAanB,EACbd,SAAUqB,EACVpB,eAAgBqB,EAChBpB,WAAYqB,EACZlB,cAAewB,GAAoB,EACnCvB,yBAA0BwB,GAA+B,aAM/D1B,EAAY,CACVJ,SAAU,EACVC,eAAgB,EAChBC,WAAY,IAGdO,EAAW,CACTJ,cAAe,EACfC,yBAA0B,EAC1BC,uBAAwB,IAG1Bd,GAAS,SAACsC,GACR,OAAO,2BACFA,GADL,IAEEb,IAAKG,EACLW,aAAc,CACZC,YAAa,GACbjC,SAAU,EACVC,eAAgB,EAChBC,WAAY,EACZG,cAAe,EACfC,yBAA0B,EAC1BC,uBAAwB,QAOlC,OA5LA2B,qBAAU,WACRvC,EAAyBwC,YACxB,IAqCHxC,EAAyBwC,QAnCzB,WAA6B,IAAD,MAC1B,GACO,OAAL3C,QAAK,IAALA,KAAOwC,cAAP,OACAxC,QADA,IACAA,GADA,UACAA,EAAOwC,oBADP,OACA,EAAqBC,cAChB,OAALzC,QAAK,IAALA,GAAA,UAAAA,EAAOwC,oBAAP,mBAAqBC,mBAArB,eAAkCT,QAAS,EAC3C,CAAC,IAAD,cACIY,EAAwB,GAEvB,OAAL5C,QAAK,IAALA,GAAA,UAAAA,EAAOwC,oBAAP,SAAqBC,YAAYP,SAAQ,SAACW,GACxCD,EAAsBE,KAAtB,2BACKD,GADL,IAEEE,YAAoB,OAAPF,QAAO,IAAPA,KAASE,YAAT,OACTF,QADS,IACTA,OADS,EACTA,EAASE,YAAYC,SACrB,SAIRzC,EAAoB,YAAKqC,GAAyB,KAElDhC,EAAY,CACVJ,UAAe,OAALR,QAAK,IAALA,GAAA,UAAAA,EAAOwC,oBAAP,eAAqBhC,WAAY,EAC3CC,gBAAqB,OAALT,QAAK,IAALA,GAAA,UAAAA,EAAOwC,oBAAP,eAAqB/B,iBAAkB,EACvDC,YAAiB,OAALV,QAAK,IAALA,GAAA,UAAAA,EAAOwC,oBAAP,eAAqB9B,aAAc,IAGjDO,EAAW,CACTJ,eAAoB,OAALb,QAAK,IAALA,GAAA,UAAAA,EAAOwC,oBAAP,eAAqB3B,gBAAiB,EACrDC,0BACO,OAALd,QAAK,IAALA,GAAA,UAAAA,EAAOwC,oBAAP,eAAqB1B,2BAA4B,EACnDC,wBACO,OAALf,QAAK,IAALA,GAAA,UAAAA,EAAOwC,oBAAP,eAAqBzB,yBAA0B,MA2JrD,qCACE,cAACkC,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GAAIC,GAAI,GAAvB,SACE,cAACC,EAAA,EAAD,CAAYC,QAAQ,YAApB,+EAIF,cAACL,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GAAIC,GAAI,GAAvB,SACE,eAACG,EAAA,EAAD,CAAOC,QAAS,EAAhB,UACE,cAACC,EAAA,EAAD,CACEH,QAAQ,YACRI,MAAM,UACNC,QAAS,kBA/JnB,WACE,IAAIrC,EAAc,YAAQhB,GAAoB,IAC9CgB,EAAewB,KAAK,CAClBC,YAAa,GACbtB,UAAW,GACXC,IAAK,GACLkC,mBAAoB,GACpBjC,qBAAsB,GACtBS,uBAAwB,KAG1B7B,EAAoBe,GAoJGuC,IACfC,GAAI,CAAEC,MAAO,SACbC,SAAyB,SAAf9D,EALZ,2BAUA,cAAC+D,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,CAAOC,OAAQ,EAAf,UACE,cAACC,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAWC,KAAK,QAAQC,MAAM,SAA9B,oBAGA,cAACF,EAAA,EAAD,CAAWC,KAAK,QAAQC,MAAM,SAA9B,0BAGA,cAACF,EAAA,EAAD,CAAWC,KAAK,QAAQC,MAAM,SAA9B,wBAGA,cAACF,EAAA,EAAD,CAAWC,KAAK,QAAQC,MAAM,SAA9B,sBAGA,cAACF,EAAA,EAAD,CAAWC,KAAK,QAAQC,MAAM,SAA9B,wBAGA,cAACF,EAAA,EAAD,CACEC,KAAK,QACLC,MAAM,SACNV,GAAI,CAAEW,SAAU,SAHlB,wBASJ,cAACC,EAAA,EAAD,UACGpE,IACiB,OAAhBA,QAAgB,IAAhBA,OAAA,EAAAA,EAAkB0B,QAAS,IAD5B,OAEC1B,QAFD,IAECA,OAFD,EAECA,EAAkBqE,KAAI,SAACC,EAAkBvD,GAAnB,OACpB,eAACgD,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAWC,KAAK,QAAQC,MAAM,SAA9B,SACE,cAACK,EAAA,EAAD,CACEnB,MAAM,QACNC,QAAS,kBArJjC,SAAmBtC,GACjB,IAAIC,EAAc,YAAQhB,GAAoB,IAC9CgB,EAAewD,OAAOzD,EAAO,GAE7Bd,EAAoBe,GAEpBM,EAAeN,GA+IsByD,CAAU1D,IACzB2C,SAAyB,SAAf9D,EAHZ,SAKE,cAAC,IAAD,QAGJ,cAACoE,EAAA,EAAD,CAAWC,KAAK,QAAQC,MAAM,SAA9B,SACE,cAACQ,EAAA,EAAD,CACE7D,MAAK,OAAEyD,QAAF,IAAEA,OAAF,EAAEA,EAAkB7B,YACzBkC,SAAU,SAACC,GACThE,EAAegE,EAAU,cAAe7D,IAE1C8D,YAAa,SAACC,GAAD,OACX,cAACC,EAAA,EAAD,2BACMD,GADN,IAEEb,KAAK,QACLP,SAAyB,SAAf9D,MAGdoF,YAAY,aACZtB,SAAyB,SAAf9D,MAGd,cAACoE,EAAA,EAAD,CAAWC,KAAK,QAAQC,MAAM,SAA9B,SACE,cAACa,EAAA,EAAD,CACE/B,QAAQ,WACRiB,KAAK,QACLgB,WAAS,EACTnE,KAAK,YACLoE,MAAM,aACNC,KAAK,OACLC,GAAG,YACHvE,OAAuB,OAAhByD,QAAgB,IAAhBA,OAAA,EAAAA,EAAkBnD,YAAa,GACtCwD,SAAU,SAACU,GACTzE,EACEyE,EAAMC,OAAOzE,MACb,YACAE,IAGJ2C,SAAyB,SAAf9D,MAGd,cAACoE,EAAA,EAAD,CAAWC,KAAK,QAAQC,MAAM,SAA9B,SACE,cAACa,EAAA,EAAD,CACE/B,QAAQ,WACRiB,KAAK,QACLgB,WAAS,EACTnE,KAAK,MACLoE,MAAM,WACNC,KAAK,OACLC,GAAG,MACHvE,OAAuB,OAAhByD,QAAgB,IAAhBA,OAAA,EAAAA,EAAkBlD,MAAO,GAChCuD,SAAU,SAACU,GACTzE,EAAeyE,EAAMC,OAAOzE,MAAO,MAAOE,IAE5C2C,SAAyB,SAAf9D,MAGd,cAACoE,EAAA,EAAD,CACEC,KAAK,QACLC,MAAM,SACNqB,MAAO,CAAEC,WAAY,UAHvB,SAKE,cAACvC,EAAA,EAAD,CACEC,QAAS,EACTuC,UAAW,MACXC,WAAY,SAHd,SAKE,cAACX,EAAA,EAAD,CACE/B,QAAQ,WACRiB,KAAK,QACLgB,WAAS,EACTnE,KAAK,uBACLoE,MAAM,aACNC,KAAK,OACLC,GAAG,uBACHvE,OAAuB,OAAhByD,QAAgB,IAAhBA,OAAA,EAAAA,EAAkBjD,uBAAwB,GACjDsD,SAAU,SAACU,GACTzE,EACEyE,EAAMC,OAAOzE,MACb,uBACAE,IAGJ2C,SAAyB,SAAf9D,QAIhB,cAACoE,EAAA,EAAD,CAAWC,KAAK,QAAQC,MAAM,QAA9B,SACE,cAAC,IAAD,CACErD,MAAOK,QACW,OAAhBoD,QAAgB,IAAhBA,OAAA,EAAAA,EAAkBxC,yBAA0B,GAC5C6D,QAAQ,GACVC,YAAa,OACbC,mBAAmB,QAnGV9E,SAyGrB,eAAC+E,EAAA,EAAD,WACE,eAAC/B,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAWC,KAAK,QAAQC,MAAM,SAAS6B,QAAS,EAAhD,SACE,cAAChD,EAAA,EAAD,CAAYC,QAAQ,YAApB,qBAEF,cAACgB,EAAA,EAAD,CAAWC,KAAK,QAAhB,SACE,cAAClB,EAAA,EAAD,CAAYC,QAAQ,YAApB,SACE,cAAC,IAAD,CACEnC,MAAOK,QAAe,OAARb,QAAQ,IAARA,OAAA,EAAAA,EAAUF,iBAAkB,GAAGwF,QAAQ,GACrDC,YAAa,OACbC,mBAAmB,QAIzB,cAAC7B,EAAA,EAAD,CAAWC,KAAK,QAAhB,SACE,cAAClB,EAAA,EAAD,CAAYC,QAAQ,YAApB,UACW,OAAR3C,QAAQ,IAARA,OAAA,EAAAA,EAAUH,WAAY,MAI3B,cAAC8D,EAAA,EAAD,IAEA,cAACA,EAAA,EAAD,CAAWC,KAAK,QAAQC,MAAM,QAA9B,SACE,cAACnB,EAAA,EAAD,CAAYC,QAAQ,YAApB,SACE,cAAC,IAAD,CACEnC,MAAOK,QAAe,OAARb,QAAQ,IAARA,OAAA,EAAAA,EAAUD,aAAc,GAAGuF,QAAQ,GACjDC,YAAa,OACbC,mBAAmB,WAK3B,eAAC9B,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAWC,KAAK,QAAQ8B,QAAS,EAAG7B,MAAM,SAA1C,SACE,cAACnB,EAAA,EAAD,CAAYC,QAAQ,YAApB,gCAIF,cAACgB,EAAA,EAAD,CAAWC,KAAK,QAAhB,SACE,cAAClB,EAAA,EAAD,CAAYC,QAAQ,YAApB,SACE,cAAC,IAAD,CACEnC,MAAOK,QAAc,OAAPR,QAAO,IAAPA,OAAA,EAAAA,EAASH,gBAAiB,GAAGoF,QAAQ,GACnDC,YAAa,OACbC,mBAAmB,QAIzB,cAAC7B,EAAA,EAAD,CAAWC,KAAK,UAChB,cAACD,EAAA,EAAD,CAAWC,KAAK,QAAhB,SACE,cAAClB,EAAA,EAAD,CAAYC,QAAQ,YAApB,mBACM9B,QACK,OAAPR,QAAO,IAAPA,OAAA,EAAAA,EAASF,2BAA4B,GACrCmF,QAAQ,GAHZ,gBASF,cAAC3B,EAAA,EAAD,CAAWC,KAAK,6BCpanB,SAAS+B,EAAT,GAIX,IAHFC,EAGC,EAHDA,KACAC,EAEC,EAFDA,QACAC,EACC,EADDA,gBAEMC,EAAyBtG,mBAE/B,EAA0BC,mBAAS,CACjCsG,gBAAiB,EACjBC,aAAc,IAFhB,mBAAOC,EAAP,KAAcC,EAAd,KA6BA,OAxBApE,qBAAU,WACRgE,EAAuB/D,YACtB,CAAC4D,EAAME,IAoBVC,EAAuB/D,QAlBvB,WACE,GAAI4D,IAAuB,OAAfE,QAAe,IAAfA,OAAA,EAAAA,EAAiBzE,QAAS,EAAG,CACvC,IAAI+E,EAAqB,EACrBC,EAAkB,EAEtBP,EAAgBvE,SAAQ,SAAC+E,GACvBF,EACEA,GAAkB,OAAGE,QAAH,IAAGA,OAAH,EAAGA,EAAaC,sBAAuB,EAC3DF,EAAkBA,GAAe,OAAGC,QAAH,IAAGA,OAAH,EAAGA,EAAaE,mBAAoB,KAGvEL,EAAS,CACPH,gBAAiBI,EACjBH,aAAcI,MAQlB,eAACI,EAAA,EAAD,CAAQb,KAAMA,EAAMc,SAAU,KAAM9B,WAAS,EAA7C,UACE,cAAC+B,EAAA,EAAD,2DACA,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,IACA,uBAEA,cAACvD,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,CAAOC,OAAQ,EAAf,UACE,cAACC,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAWC,KAAK,QAAQC,MAAM,SAA9B,2BAGA,cAACF,EAAA,EAAD,CAAWC,KAAK,QAAQC,MAAM,SAA9B,6BAGA,cAACF,EAAA,EAAD,CAAWC,KAAK,QAAQC,MAAM,SAA9B,0BAGA,cAACF,EAAA,EAAD,CAAWC,KAAK,QAAQC,MAAM,SAA9B,wBAGA,cAACF,EAAA,EAAD,CAAWC,KAAK,QAAQC,MAAM,SAA9B,sBAGA,cAACF,EAAA,EAAD,CAAWC,KAAK,QAAQC,MAAM,SAA9B,oBAGA,cAACF,EAAA,EAAD,CAAWC,KAAK,QAAQC,MAAM,SAA9B,sBAGA,cAACF,EAAA,EAAD,CACEC,KAAK,QACLC,MAAM,SACNqB,MAAO,CAAEC,WAAY,UAHvB,mCAOA,cAACxB,EAAA,EAAD,CACEC,KAAK,QACLC,MAAM,SACNqB,MAAO,CAAEC,WAAY,UAHvB,wCASJ,cAACpB,EAAA,EAAD,UACG+B,IACgB,OAAfA,QAAe,IAAfA,OAAA,EAAAA,EAAiBzE,QAAS,IAD3B,OAECyE,QAFD,IAECA,OAFD,EAECA,EAAiB9B,KAAI,SAACsC,GAAD,aACnB,eAAC5C,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAWC,KAAK,QAAQC,MAAM,SAA9B,SACc,OAAXyC,QAAW,IAAXA,KAAaQ,iBAAb,0BACeR,QADf,IACeA,OADf,EACeA,EAAaS,uBAD5B,sBACyDT,QADzD,IACyDA,OADzD,EACyDA,EAAaU,WACxD,OAAXV,QAAW,IAAXA,OAAA,EAAAA,EAAaU,WAAY,KAE/B,cAACrD,EAAA,EAAD,CAAWC,KAAK,QAAQC,MAAM,SAA9B,UACc,OAAXyC,QAAW,IAAXA,OAAA,EAAAA,EAAaW,YAAa,KAE7B,cAACtD,EAAA,EAAD,CAAWC,KAAK,QAAQC,MAAM,SAA9B,SACc,OAAXyC,QAAW,IAAXA,KAAaY,QACVC,IAAM,OAACb,QAAD,IAACA,GAAD,UAACA,EAAaY,eAAd,aAAC,EAAsB7E,UAAU+E,OACrC,uBAEF,KAEN,cAACzD,EAAA,EAAD,CAAWC,KAAK,QAAQC,MAAM,SAA9B,SACE,cAAC,IAAD,CACErD,MAAOK,QAAkB,OAAXyF,QAAW,IAAXA,OAAA,EAAAA,EAAae,eAAgB,GAAG/B,QAC5C,GAEFC,YAAa,OACbC,mBAAmB,MAGvB,cAAC7B,EAAA,EAAD,CAAWC,KAAK,QAAQC,MAAM,SAA9B,UACc,OAAXyC,QAAW,IAAXA,OAAA,EAAAA,EAAagB,cAAe,KAE/B,cAAC3D,EAAA,EAAD,CAAWC,KAAK,QAAQC,MAAM,SAA9B,SACE,cAAC,IAAD,CACErD,MAAOK,QAAkB,OAAXyF,QAAW,IAAXA,OAAA,EAAAA,EAAaiB,YAAa,GAAGjC,QAAQ,GACnDC,YAAa,OACbC,mBAAmB,MAGvB,cAAC7B,EAAA,EAAD,CAAWC,KAAK,QAAQC,MAAM,SAA9B,SACE,cAAC,IAAD,CACErD,MAAOK,QACM,OAAXyF,QAAW,IAAXA,OAAA,EAAAA,EAAakB,oBAAqB,GAClClC,QAAQ,GACVC,YAAa,OACbC,mBAAmB,MAGvB,cAAC7B,EAAA,EAAD,CAAWC,KAAK,QAAQC,MAAM,SAA9B,SACE,cAAC,IAAD,CACErD,MAAOK,QACM,OAAXyF,QAAW,IAAXA,OAAA,EAAAA,EAAaC,sBAAuB,GACpCjB,QAAQ,GACVC,YAAa,OACbC,mBAAmB,MAGvB,cAAC7B,EAAA,EAAD,CAAWC,KAAK,QAAQC,MAAM,SAA9B,SACE,cAAC,IAAD,CACErD,MAAOK,QACM,OAAXyF,QAAW,IAAXA,OAAA,EAAAA,EAAaE,mBAAoB,GACjClB,QAAQ,GACVC,YAAa,OACbC,mBAAmB,eAM/B,cAACC,EAAA,EAAD,UACE,eAAC/B,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAW+B,QAAS,EAAG7B,MAAM,QAA7B,SACE,cAACnB,EAAA,EAAD,CAAYC,QAAQ,KAApB,qBAEF,cAACgB,EAAA,EAAD,CAAWC,KAAK,QAAQC,MAAM,SAA9B,SACE,cAACnB,EAAA,EAAD,CAAYC,QAAQ,KAApB,SACE,cAAC,IAAD,CACEnC,MAAOK,QAAY,OAALqF,QAAK,IAALA,OAAA,EAAAA,EAAOF,kBAAmB,GAAGV,QAAQ,GACnDC,YAAa,OACbC,mBAAmB,QAIzB,cAAC7B,EAAA,EAAD,CAAWC,KAAK,QAAQC,MAAM,SAA9B,SACE,cAACnB,EAAA,EAAD,CAAYC,QAAQ,KAApB,SACE,cAAC,IAAD,CACEnC,MAAOK,QAAY,OAALqF,QAAK,IAALA,OAAA,EAAAA,EAAOD,eAAgB,GAAGX,QAAQ,GAChDC,YAAa,OACbC,mBAAmB,qBASnC,cAACiC,EAAA,EAAD,UACE,cAAC3E,EAAA,EAAD,CACEH,QAAQ,WACRI,MAAM,QACNC,QAAS,WACP6C,GAAQ,IAJZ,wB,aCjLO,SAAS6B,EAAT,GAMX,IALFC,EAKC,EALDA,KACAC,EAIC,EAJDA,QACArI,EAGC,EAHDA,WACAsI,EAEC,EAFDA,UACAvI,EACC,EADDA,SAEMwI,EAAWC,cAETC,EAAoBC,cAApBD,gBAEFE,EAAwBzI,mBAE9B,EAAwBC,mBAAS,IAAjC,mBAAOyI,EAAP,KAAaC,EAAb,KAEA,EAA4B1I,mBAAS,IAArC,mBAAO2I,EAAP,KAAeC,EAAf,KATC,SAecC,IAfd,2EAeD,sBAAAC,EAAA,gEACMb,QADN,IACMA,MAAM/B,KADZ,uBAEIkC,EAASW,aAAW,IAFxB,SAGUC,IACHC,WAAW,WACXC,IAFG,OAECjB,QAFD,IAECA,OAFD,EAECA,EAAMkB,WACVF,WAAW,aACXC,IAJG,OAICjB,QAJD,IAICA,OAJD,EAICA,EAAMmB,aACVH,WALG,OAKQhB,QALR,IAKQA,OALR,EAKQA,EAAM7C,MACjBiE,QAAQ,YAAa,QACrBC,MACAC,MAAK,SAACC,GAAY,IAAD,EAChB,IAAU,OAANA,QAAM,IAANA,GAAA,UAAAA,EAAQC,YAAR,eAAc9H,QAAS,EAAG,CAC5B,IAAI+H,EAAM,GACJ,OAANF,QAAM,IAANA,KAAQC,KAAK5H,SAAQ,SAACqH,GACpBQ,EAAIjH,KAAK,CAAE4C,GAAE,OAAE6D,QAAF,IAAEA,OAAF,EAAEA,EAAK7D,GAAI4C,KAAK,eAAD,OAAOiB,QAAP,IAAOA,OAAP,EAAOA,EAAKjB,aAE1CS,EAAQgB,GACRtB,EAASW,aAAW,SAEpBL,EAAQ,IACRN,EAASW,aAAW,OAGvBY,OAAM,SAACC,GACNtB,EAAgB,+CAAD,cACkCsB,QADlC,IACkCA,OADlC,EACkCA,EAAOC,SACtD,CAAE5G,QAAS,UAEbmF,EAASW,aAAW,OA7B5B,4CAfC,kEAmDD,sBAAAD,EAAA,6DACEV,EAASW,aAAW,IADtB,SAEQC,IACHC,WAAW,WACXC,IAFG,OAECjB,QAFD,IAECA,OAFD,EAECA,EAAMkB,WACVF,WAAW,aACXC,IAJG,OAICjB,QAJD,IAICA,OAJD,EAICA,EAAMmB,aACVH,WALG,OAKQhB,QALR,IAKQA,OALR,EAKQA,EAAM7C,MACjB0E,IAAI,CACHC,UAAWC,IAASC,UAAUC,UAAUC,SAAS,IAAIC,MACrDzB,OAAQA,IAETY,KAVG,sBAUE,4BAAAT,EAAA,6DACAuB,EADA,sBAEDpC,QAFC,IAEDA,OAFC,EAEDA,EAAM7C,KAAOuD,GAFZ,SAKEK,IACHC,WAAW,WACXC,IAFG,OAECjB,QAFD,IAECA,OAFD,EAECA,EAAMkB,WACVF,WAAW,aACXC,IAJG,OAICjB,QAJD,IAICA,OAJD,EAICA,EAAMmB,aACVkB,IALG,eAOGD,GAEL,CAAEE,OAAO,IAEVhB,MAAK,WACJ3J,GAAS,SAACsC,GACR,OAAO,2BAAKA,GAAZ,yBAAmB+F,QAAnB,IAAmBA,OAAnB,EAAmBA,EAAM7C,KAAOuD,OAElCC,EAAU,IACVN,EAAgB,iCAChBH,IACAU,IACAT,EAASW,aAAW,IACpBb,EAAQ,CACNhC,MAAM,OAGTyD,OAAM,SAACC,GACNtB,EAAgB,mCAAD,cACsBsB,QADtB,IACsBA,OADtB,EACsBA,EAAOC,SAC1C,CAAE5G,QAAS,UAEbmF,EAASW,aAAW,OAlCpB,4CAqCLY,OAAM,SAACC,GACNtB,EAAgB,+CAAD,cACkCsB,QADlC,IACkCA,OADlC,EACkCA,EAAOC,SACtD,CAAE5G,QAAS,UAEbmF,EAASW,aAAW,OAtD1B,4CAnDC,sBA6GD,OAlGA1G,qBAAU,WACRmG,EAAsBlG,YACrB,QAAC2F,QAAD,IAACA,OAAD,EAACA,EAAM/B,OAoCVsC,EAAsBlG,QAAUuG,EA6D9B,eAAC9B,EAAA,EAAD,CAAQb,KAAI,OAAE+B,QAAF,IAAEA,OAAF,EAAEA,EAAM/B,KAAMc,SAAS,KAAK9B,WAAS,EAAjD,UACE,cAAC+B,EAAA,EAAD,oCACA,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,IACA,uBACA,eAACvE,EAAA,EAAD,CAAM4H,WAAS,EAACrH,QAAS,EAAzB,UACkB,SAAftD,EACC,cAAC+C,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAvB,SACE,eAACG,EAAA,EAAD,CACEC,QAAS,EACTuC,UAAW,MACXC,WAAY,SACZlC,GAAI,CAAEgC,WAAY,UAJpB,UAME,cAACT,EAAA,EAAD,CACE/B,QAAQ,WACRiB,KAAK,QACLgB,WAAS,EACTnE,KAAM,SACNoE,MAAK,OAAE8C,QAAF,IAAEA,OAAF,EAAEA,EAAMwC,UACbrF,KAAK,OACLC,GAAI,SACJvE,MAAO6H,EACP/D,SAAU,SAACU,GACTsD,EAAUtD,EAAMC,OAAOzE,QAEzB6C,SAAyB,SAAf9D,IAGX8I,EACC,cAACvF,EAAA,EAAD,CACEH,QAAQ,YACRI,MAAM,UACNC,QAAS,kBA/I1B,0CA+IgCoH,IAHjB,oBAQA,kCAKN,6BAGF,cAAC9H,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GAAIC,GAAI,GAAvB,SACE,cAACa,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,WACE,cAACE,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAWC,KAAK,QAAQC,MAAM,SAA9B,2CAGA,cAACF,EAAA,EAAD,CAAWC,KAAK,QAAQC,MAAM,SAA9B,yBAKJ,cAACE,EAAA,EAAD,UACGoE,IACK,OAAJA,QAAI,IAAJA,OAAA,EAAAA,EAAM9G,QAAS,IADhB,OAEC8G,QAFD,IAECA,OAFD,EAECA,EAAMnE,KAAI,SAAC2D,EAAMjH,GAAP,iBACR,eAACgD,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAWC,KAAK,QAAQC,MAAM,SAA9B,SACO,OAAJ8D,QAAI,IAAJA,GAAA,UAAAA,EAAMA,YAAN,SAAY8B,UACTtC,IAAM,OAACQ,QAAD,IAACA,GAAD,UAACA,EAAMA,YAAP,aAAC,EAAY8B,UAAUpH,UAAU+E,OACrC,uBAEF,KAEN,cAACzD,EAAA,EAAD,CAAWC,KAAK,QAAQC,MAAM,SAA9B,gBACG8D,QADH,IACGA,GADH,UACGA,EAAMA,YADT,aACG,EAAYU,WATF3H,sBAmB/B,cAAC+G,EAAA,EAAD,UACE,cAAC3E,EAAA,EAAD,CACEH,QAAQ,WACRI,MAAM,QACNC,QAAS,kBACP4E,EAAQ,CACNhC,MAAM,KALZ,wB,uBC7MO,SAASyE,EAAT,GAOX,IANFhL,EAMC,EANDA,MACAC,EAKC,EALDA,SACAgL,EAIC,EAJDA,aACAzB,EAGC,EAHDA,UACAtJ,EAEC,EAFDA,WACAsI,EACC,EADDA,UAEQG,EAAoBC,cAApBD,gBAEFF,EAAWC,cAGfhD,EAoBE1F,EApBF0F,GACAwF,EAmBElL,EAnBFkL,IACAC,EAkBEnL,EAlBFmL,MAIAzH,GAcE1D,EAjBFoL,SAiBEpL,EAhBFuE,KAgBEvE,EAfFqL,UAeErL,EAdF0D,OACAlB,EAaExC,EAbFwC,aACA8I,EAYEtL,EAZFsL,6BACA5J,EAWE1B,EAXF0B,IACA6J,EAUEvL,EAVFuL,QAEAC,GAQExL,EATFyL,aASEzL,EARFwL,0BACAE,EAOE1L,EAPF0L,sBAEAC,GAKE3L,EANFoC,uBAMEpC,EALF2L,kBAIAC,GACE5L,EAJF6L,kBAIE7L,EAHF8L,YAGE9L,EAFF+L,iBAEE/L,EADF4L,oBAGF,EACEvL,oBAAS,GADX,mBAAO2L,EAAP,KAAsCC,EAAtC,KAGMC,EAAS,CACb,CACE1G,MAAO,MACPpE,KAAM,MACNqE,KAAM,OACN0G,UAAU,GAEZ,CACE1G,KAAM,WAER,CACED,MAAO,QACPpE,KAAM,QACNqE,KAAM,OACN0G,UAAU,GAEZ,CACE3G,MAAO,WACPpE,KAAM,WACNqE,KAAM,eACN0G,UAAU,GAEZ,CAAE3G,MAAO,OAAQpE,KAAM,OAAQqE,KAAM,OAAQ0G,UAAU,GACvD,CAAE3G,MAAO,YAAapE,KAAM,YAAaqE,KAAM,OAAQ0G,UAAU,GACjE,CAAE3G,MAAO,QAASpE,KAAM,QAASqE,KAAM,OAAQ0G,UAAU,GACzD,CACE3G,MAAO,eACPpE,KAAM,cACNqE,KAAM,OACN0G,UAAU,GAGZ,CACE1G,KAAM,WAGR,CAAED,MAAO,iBAAkBpE,KAAM,MAAOqE,KAAM,SAAU0G,UAAU,GAClE,CACE3G,MAAO,gBACPpE,KAAM,UACNqE,KAAM,SACN0G,UAAU,GAEZ,CACE3G,MAAO,qBACPpE,KAAM,eACNqE,KAAM,SACN2G,UAAU,GAGZ,CACE3G,KAAM,WAGR,CACED,MAAO,qCACPpE,KAAM,gCACNqE,KAAM,OACN2G,UAAU,GAGZ,CACE5G,MAAO,qCACPpE,KAAM,6BACNqE,KAAM,OACN2G,UAAU,GAEZ,CACE5G,MAAO,2BACPpE,KAAM,qBACNqE,KAAM,OACN2G,UAAU,GAGZ,CACE3G,KAAM,WAGR,CACED,MAAO,8BACPpE,KAAM,2BACNqE,KAAM,OACN2G,UAAU,GAEZ,CACE5G,MAAO,2BACPpE,KAAM,wBACNqE,KAAM,OACN2G,UAAU,GAEZ,CACE5G,MAAO,4BACPpE,KAAM,yBACNqE,KAAM,OACN2G,UAAU,GAEZ,CACE3G,KAAM,WAER,CACED,MAAO,qBACPpE,KAAM,mBACNqE,KAAM,OACN0G,UAAU,GAEZ,CACE3G,MAAO,sBACPpE,KAAM,oBACNqE,KAAM,OACN2G,UAAU,GAGZ,CACE3G,KAAM,WAGR,CACED,MAAO,oBACPpE,KAAM,mBACNqE,KAAM,OACN0G,UAAU,GAEZ,CACE3G,MAAO,sBACPpE,KAAM,qBACNqE,KAAM,OACN0G,UAAU,IAId,EACE9L,oBAAS,GADX,mBAAOgM,EAAP,KAAiCC,EAAjC,KAGMC,EAAgCnM,mBAChCoM,EAAqCpM,mBACrCqM,GAA0CrM,mBAE1CsM,GAAqCtM,mBAxK1C,8CA2PD,4BAAA+I,EAAA,sDACOgC,GAAUzH,GAQb+E,EAASW,aAAW,IAEhBuD,EAAiBtD,IAClBC,WAAW,WACXC,IAAIC,GACJF,WAAW,aACXC,IAAI,iBAEPF,IAAGuD,gBAAe,SAAC3F,GACjB,OAAOA,EAAY0C,IAAIgD,GAAgB/C,MAAK,SAACiD,GAC3C,IAAKA,EAAMC,OAKT,OAHA7F,EAAY8F,OAAOJ,EAAgB,CACjCK,cAAe,IAEV,EAGT,IAAIC,EAAoBzL,OAAOqL,EAAMvE,OAAO0E,eAAiB,EAI7D,OAHA/F,EAAY8F,OAAOJ,EAAgB,CACjCK,cAAeC,IAEVA,QAGRrD,KAjBH,uCAiBQ,WAAOsD,GAAP,+BAAA/D,EAAA,sDAcJ,IAZIgE,EAAczJ,EAGZ0J,EAJYjC,EAIQkC,MAAM,KAG1BC,EAAmB,SAACC,GAAD,aAAU,UAAAA,EAAKC,MAAM,mBAAX,eAAyB,KAAM,IAG9D3D,EAAS,GAGJ4D,EAAI,EAAGA,EAAIL,EAAMpL,QAAU6H,EAAO7H,OAAS,EAAGyL,KAC/CC,EAAYJ,EAAiBF,EAAMK,OAEvC5D,GAAkB6D,GAIhBC,EAAgBR,EAAYS,OAAO,GACnCC,EAAqBrM,OAAO0L,GAC/BY,WACAC,SAAS,EAAG,KACXC,EAzBA,UAyBanE,EAAOoE,eAzBpB,OAyBoCJ,GAzBpC,OAyByDF,EAAcM,eAC3EhO,GAAS,SAACsC,GACR,OAAO,2BAAKA,GAAZ,IAAkB2I,IAAK8C,OAGzBvF,EAASW,aAAW,IA9BhB,4CAjBR,uDAiDGY,OAAM,SAACkE,GACNvF,EAAgB,6CAAD,cACgCuF,QADhC,IACgCA,OADhC,EACgCA,EAAKhE,SAClD,CAAE5G,QAAS,UAEbmF,EAASW,aAAW,QArExBT,EACE,+EACA,CACErF,QAAS,YALjB,2CA3PC,uEAuUD,sBAAA6F,EAAA,6DACEV,EAASW,aAAW,IADtB,SAGQC,IACHC,WAAW,WACXC,IAAIC,GACJF,WAAW,aACX6E,MAAM,MAAO,KAAMjD,GACnBvB,MACAC,MAAK,SAACC,GAAY,IAAD,GACN,OAANA,QAAM,IAANA,GAAA,UAAAA,EAAQC,YAAR,eAAc9H,QAAS,GACzB2G,EACE,+DACA,CAAErF,QAAS,UAEbmF,EAASW,aAAW,MAEpBT,EAAgB,qDAChBF,EAASW,aAAW,QAlB5B,4CAvUC,sBA8VD,OAnLA1G,qBAAU,WACR6J,EAA8B5J,YAC7B,CAACjB,EAAK6J,IAGT7I,qBAAU,WACR8J,EAAmC7J,YAClC,CAAC6I,EAA0BI,IAG9BlJ,qBAAU,WACR+J,GAAwC9J,YACvC,CAAC+I,EAA0ChK,IAQ9CgB,qBAAU,WACRgK,GAAmC/J,YAClC,CAACgJ,EAAkBjK,IAStB6K,EAA8B5J,QAP9B,WACE,IAAIyL,EAAY5M,OAAOE,GAAO,GAAKF,OAAO+J,GAAW,GACrDtL,GAAS,SAACsC,GACR,OAAO,2BAAKA,GAAZ,IAAkBkJ,aAAc2C,QAiBpC5B,EAAmC7J,QAXnC,WAGE,IAAI0L,EACF7M,OAAOoK,GAAsB,GAAKpK,OAAOgK,GAA4B,GAEvEvL,GAAS,SAACsC,GACR,OAAO,2BAAKA,GAAZ,IAAkBmJ,sBAAuB2C,EAAkBpI,QAAQ,SAcvEwG,GAAwC9J,QARxC,WACE,IAAIjC,EAAac,OAAOE,GAAO,GAAKF,OAAOkK,GAAyB,GAEpEzL,GAAS,SAACsC,GACR,OAAO,2BAAKA,GAAZ,IAAkBH,uBAAwB1B,EAAWuF,QAAQ,SA4BjEyG,GAAmC/J,QARnC,WACE,IAAIjC,EAAac,OAAOE,GAAO,GAAKF,OAAOmK,GAAoB,GAE/D1L,GAAS,SAACsC,GACR,OAAO,2BAAKA,GAAZ,IAAkBsJ,kBAAmBnL,EAAWuF,QAAQ,SA0G1D,eAAChD,EAAA,EAAD,CAAM4H,WAAS,EAACrH,QAAS,EAAzB,UACG0I,IAAM,OACLA,QADK,IACLA,OADK,EACLA,EAAQvH,KAAI,SAAC2J,GACX,MAAoB,aAAX,OAALA,QAAK,IAALA,OAAA,EAAAA,EAAO7I,MAEP,cAACxC,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GAAIC,GAAI,GAAvB,SACE,cAACoE,EAAA,EAAD,MAKF,cAACvE,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GAAIC,GAAoB,SAAX,OAALkL,QAAK,IAALA,OAAA,EAAAA,EAAOlN,MAAiB,EAAI,EAAnD,SACmB,wBAAX,OAALkN,QAAK,IAALA,OAAA,EAAAA,EAAOlN,MACN,mCACGkK,IAC2B,OAA5BA,QAA4B,IAA5BA,OAAA,EAAAA,EAA8BtJ,QAAS,EACrC,cAACuM,EAAA,EAAD,CAASC,MAAM,4CAAf,SACE,cAAC/K,EAAA,EAAD,CACEH,QAAQ,YACRI,MAAM,OACNC,QAAS,kBAAM2I,GAA6B,IAC5C/G,WAAS,EAJX,4CAUF,+BAGc,mCAAX,OAAL+I,QAAK,IAALA,OAAA,EAAAA,EAAOlN,OACO,gCAAX,OAALkN,QAAK,IAALA,OAAA,EAAAA,EAAOlN,MACP,eAACmC,EAAA,EAAD,CACEC,QAAS,EACTuC,UAAW,MACXC,WAAY,SACZlC,GAAI,CAAEgC,WAAY,UAJpB,UAME,cAACT,EAAA,EAAD,CACE/B,QAAQ,WACRiB,KAAK,QACL4H,UAAe,OAALmC,QAAK,IAALA,OAAA,EAAAA,EAAOnC,YAAY,EAC7B5G,WAAS,EACTnE,KAAI,OAAEkN,QAAF,IAAEA,OAAF,EAAEA,EAAOlN,KACboE,MAAK,OAAE8I,QAAF,IAAEA,OAAF,EAAEA,EAAO9I,MACdC,KAAK,OACLC,GAAE,OAAE4I,QAAF,IAAEA,OAAF,EAAEA,EAAOlN,KACXD,MAAOnB,EAAK,OAACsO,QAAD,IAACA,OAAD,EAACA,EAAOlN,OAAS,IAC7B6D,SAAU,SAACU,GACT1F,GAAS,SAACsC,GACR,OAAO,2BAAKA,GAAZ,yBAAmB+L,QAAnB,IAAmBA,OAAnB,EAAmBA,EAAOlN,KAAOuE,EAAMC,OAAOzE,YAGlDiL,SAAQ,OAAEkC,QAAF,IAAEA,OAAF,EAAEA,EAAOlC,SACjBpI,SAAyB,SAAf9D,IAGZ,cAACuD,EAAA,EAAD,CACEH,QAAQ,YACRI,MAAM,UACN+K,UAAW,cAAC,IAAD,IACX9K,QAAS,WACPsI,EAAiC,CAC/B1F,MAAM,EACNd,KAAI,OAAE6I,QAAF,IAAEA,OAAF,EAAEA,EAAOlN,KACb0J,UAAS,OAAEwD,QAAF,IAAEA,OAAF,EAAEA,EAAO9I,MAClBgE,UAAWA,EACXC,YAAa/D,KAVnB,SAckB,SAAfxF,EAAwB,OAAS,cAGpB,aAAX,OAALoO,QAAK,IAALA,OAAA,EAAAA,EAAOlN,OACO,SAAX,OAALkN,QAAK,IAALA,OAAA,EAAAA,EAAOlN,OACS,kBAAX,OAALkN,QAAK,IAALA,OAAA,EAAAA,EAAOlN,MACP,cAACmC,EAAA,EAAD,CACEC,QAAS,EACTuC,UAAW,MACXC,WAAY,SACZlC,GAAI,CAAEgC,WAAY,UAJpB,SAME,cAACT,EAAA,EAAD,CACE/B,QAAQ,WACRiB,KAAK,QACL4H,UAAe,OAALmC,QAAK,IAALA,OAAA,EAAAA,EAAOnC,YAAY,EAC7B5G,WAAS,EACTnE,KAAI,OAAEkN,QAAF,IAAEA,OAAF,EAAEA,EAAOlN,KACboE,MAAK,OAAE8I,QAAF,IAAEA,OAAF,EAAEA,EAAO9I,MACdC,KAAK,OACLC,GAAE,OAAE4I,QAAF,IAAEA,OAAF,EAAEA,EAAOlN,KACXD,MAAOnB,EAAK,OAACsO,QAAD,IAACA,OAAD,EAACA,EAAOlN,OAAS,IAC7B6D,SAAU,SAACU,GACT1F,GAAS,SAACsC,GACR,OAAO,2BAAKA,GAAZ,yBAAmB+L,QAAnB,IAAmBA,OAAnB,EAAmBA,EAAOlN,KAAOuE,EAAMC,OAAOzE,YAGlDiL,SAAQ,OAAEkC,QAAF,IAAEA,OAAF,EAAEA,EAAOlC,SACjBpI,SAAyB,SAAf9D,MAGI,SAAX,OAALoO,QAAK,IAALA,OAAA,EAAAA,EAAOlN,MACT,eAACmC,EAAA,EAAD,CACEC,QAAS,EACTuC,UAAW,MACXC,WAAY,SACZlC,GAAI,CAAEgC,WAAY,UAJpB,UAME,cAACT,EAAA,EAAD,CACE/B,QAAQ,WACRiB,KAAK,QACL4H,UAAe,OAALmC,QAAK,IAALA,OAAA,EAAAA,EAAOnC,YAAY,EAC7B5G,WAAS,EACTnE,KAAI,OAAEkN,QAAF,IAAEA,OAAF,EAAEA,EAAOlN,KACboE,MAAK,OAAE8I,QAAF,IAAEA,OAAF,EAAEA,EAAO9I,MACdC,KAAK,OACLC,GAAE,OAAE4I,QAAF,IAAEA,OAAF,EAAEA,EAAOlN,KACXD,MAAOnB,EAAK,OAACsO,QAAD,IAACA,OAAD,EAACA,EAAOlN,OAAS,GAC7B6D,SAAU,SAACU,GACT1F,GAAS,SAACsC,GACR,OAAO,2BAAKA,GAAZ,yBAAmB+L,QAAnB,IAAmBA,OAAnB,EAAmBA,EAAOlN,KAAOuE,EAAMC,OAAOzE,YAGlDiL,SAAQ,OAAEkC,QAAF,IAAEA,OAAF,EAAEA,EAAOlC,SACjBpI,SAAyB,SAAf9D,IAGZ,cAACqO,EAAA,EAAD,CAASC,MAAM,+DAAf,SACE,cAAC/K,EAAA,EAAD,CACEH,QAAQ,YACRI,MAAM,UACNC,QAAS,kBAne9B,2CAmeoC+K,IACf5K,GAAI,CAAEC,MAAO,SACbC,SAAUkH,GAAsB,SAAfhL,EALnB,wBAWF,cAACqO,EAAA,EAAD,CAASC,MAAM,wEAAf,SACE,cAAC/K,EAAA,EAAD,CACEH,QAAQ,YACRI,MAAM,UACNC,QAAS,kBA/e9B,2CA+eoCgL,IACf7K,GAAI,CAAEC,MAAO,SACbC,UAAWkH,GAAsB,SAAfhL,EALpB,4BAWc,UAAX,OAALoO,QAAK,IAALA,OAAA,EAAAA,EAAO7I,OAAmC,YAAX,OAAL6I,QAAK,IAALA,OAAA,EAAAA,EAAO7I,MACnC,cAACJ,EAAA,EAAD,CACE/B,QAAQ,WACRiB,KAAK,QACL4H,UAAe,OAALmC,QAAK,IAALA,OAAA,EAAAA,EAAOnC,YAAY,EAC7B5G,WAAS,EACTnE,KAAI,OAAEkN,QAAF,IAAEA,OAAF,EAAEA,EAAOlN,KACboE,MAAK,OAAE8I,QAAF,IAAEA,OAAF,EAAEA,EAAO9I,MACdC,KAAK,OACLC,GAAE,OAAE4I,QAAF,IAAEA,OAAF,EAAEA,EAAOlN,KACXD,MAAOnB,EAAK,OAACsO,QAAD,IAACA,OAAD,EAACA,EAAOlN,OAAS,GAC7B6D,SAAU,SAACU,GACT,GAAoB,sBAAX,OAAL2I,QAAK,IAALA,OAAA,EAAAA,EAAOlN,MAA6B,CACtC,IAAIwN,EACFpN,OAAOmE,EAAMC,OAAOzE,OAAS,GAC7BK,OAAOkK,GAAyB,GAElCzL,GAAS,SAACsC,GACR,OAAO,2BACFA,GADL,IAEEoJ,iBAAkBhG,EAAMC,OAAOzE,MAC/B4K,iBAAkB6C,EAAsB3I,QAAQ,aAG/C,GAAoB,sBAAX,OAALqI,QAAK,IAALA,OAAA,EAAAA,EAAOlN,MAA6B,CAC7C,IAAIyN,EACFrN,OAAOmE,EAAMC,OAAOzE,OAAS,GAC7BK,OAAOkK,GAAyB,GAElCzL,GAAS,SAACsC,GACR,OAAO,2BACFA,GADL,IAEEwJ,iBAAkBpG,EAAMC,OAAOzE,MAC/BwK,iBAAkBkD,EAAa5I,QAAQ,aAI3ChG,GAAS,SAACsC,GACR,OAAO,2BAAKA,GAAZ,yBAAmB+L,QAAnB,IAAmBA,OAAnB,EAAmBA,EAAOlN,KAAOuE,EAAMC,OAAOzE,YAIpDiL,SAAQ,OAAEkC,QAAF,IAAEA,OAAF,EAAEA,EAAOlC,SACjBpI,SAAyB,SAAf9D,IAEM,kBAAX,OAALoO,QAAK,IAALA,OAAA,EAAAA,EAAO7I,MACT,cAACqJ,EAAA,EAAD,CACEvK,KAAK,QACLgB,WAAS,EACTpE,MAAOnB,EAAK,OAACsO,QAAD,IAACA,OAAD,EAACA,EAAOlN,OAAS,KAC7B6D,SAAU,SAAC8J,EAAG5N,EAAO6N,GAMjB/O,EAJW,iBAAX+O,GACW,UAAXA,GACA7N,EAES,SAACoB,GACR,OAAO,2BAAKA,GAAZ,yBAAmB+L,QAAnB,IAAmBA,OAAnB,EAAmBA,EAAOlN,KAAOD,KAG1B,SAACoB,GACR,OAAO,2BAAKA,GAAZ,yBAAmB+L,QAAnB,IAAmBA,OAAnB,EAAmBA,EAAOlN,KAAO,UAIvC6N,QAAShE,GAAgB,GACzB9F,YAAa,SAACC,GAAD,OACX,cAACC,EAAA,EAAD,2BACMD,GADN,IAEE9B,QAAQ,WACRkC,MAAK,OAAE8I,QAAF,IAAEA,OAAF,EAAEA,EAAO9I,MACdD,WAAS,EACTvB,SAAyB,SAAf9D,MAGdgP,eAAgB,SAACC,GAAD,cAAYA,QAAZ,IAAYA,OAAZ,EAAYA,EAAQX,OACpCxK,SAAyB,SAAf9D,IAGZ,mCAOZ,cAAC+C,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GAAIC,GAAI,GAAvB,SACE,cAACoE,EAAA,EAAD,MAGF,cAACzH,EAAD,CACEyC,aAAcA,EACdxC,MAAOA,EACPC,SAAUA,EACVC,WAAYA,IAGbmM,EACC,cAAC/F,EAAD,CACEC,KAAM8F,EACN7F,QAAS8F,EACT7F,gBAAiB6E,IAGnB,6BAGDU,EACC,cAAC3D,EAAD,CACEC,KAAM0D,EACNzD,QAAS0D,EACT/L,WAAYA,EACZsI,UAAWA,EACXvI,SAAUA,IAGZ,gCCrYOmP,OA/Of,YAQI,IAPFlP,EAOC,EAPDA,WACAmP,EAMC,EANDA,WACAC,EAKC,EALDA,kBACAtP,EAIC,EAJDA,MACAC,EAGC,EAHDA,SACAuI,EAEC,EAFDA,UACAgB,EACC,EADDA,UAGE9D,EAmBE1F,EAnBF0F,GACAwF,EAkBElL,EAlBFkL,IACAC,EAiBEnL,EAjBFmL,MACAC,EAgBEpL,EAhBFoL,SACA7G,EAeEvE,EAfFuE,KACA8G,EAcErL,EAdFqL,UACA3H,EAaE1D,EAbF0D,MACAlB,EAYExC,EAZFwC,aACAd,EAWE1B,EAXF0B,IACA6J,EAUEvL,EAVFuL,QACAE,EASEzL,EATFyL,aACAD,EAQExL,EARFwL,yBACAE,EAOE1L,EAPF0L,sBACAtJ,EAMEpC,EANFoC,uBACAuJ,EAKE3L,EALF2L,iBACAE,EAIE7L,EAJF6L,kBACAC,EAGE9L,EAHF8L,YACAC,EAEE/L,EAFF+L,iBACAH,EACE5L,EADF4L,mBAEMjD,EAAoBC,cAApBD,gBACFF,EAAWC,cAEjB,EAAwCrI,mBAAS,IAAjD,mBAAO4K,EAAP,KAAqBsE,EAArB,KAEMC,EAAwBpP,mBA3B7B,4CAiCD,sBAAA+I,EAAA,0DACMkG,EADN,uBAEI5G,EAASW,aAAW,IAFxB,SAIUC,IACHC,WAAW,WACXC,IAAIC,GACJF,WAAW,YACXI,QAAQ,SACRC,MACAC,MAAK,SAACC,GAAY,IAAD,EAChB,IAAU,OAANA,QAAM,IAANA,GAAA,UAAAA,EAAQC,YAAR,eAAc9H,QAAS,EAAG,CAC5B,IAAMyN,EAAW5F,EAAOC,KAAKnF,KAAI,SAAC4E,GAAD,YAAU,CACzC7D,GAAI6D,EAAI7D,GACR4C,KAAK,eAAMiB,EAAIjB,QACfkG,OAAU,OAAHjF,QAAG,IAAHA,GAAA,UAAAA,EAAKjB,cAAL,eAAakG,QAAS,OAG/Be,EAAgBE,GAEhBhH,EAASW,aAAW,SAEpBmG,EAAgB,IAEhB9G,EAASW,aAAW,OAGvBY,OAAM,SAACC,GACNtB,EAAgB,4CAAD,cAC+BsB,QAD/B,IAC+BA,OAD/B,EAC+BA,EAAOC,SACnD,CAAE5G,QAAS,UAEbmF,EAASW,aAAW,OAhC5B,4CAjCC,sBA6BD1G,qBAAU,WACR8M,EAAsB7M,YACrB,IAuCH6M,EAAsB7M,QAtErB,2CAwED,IAAMoI,EAAgB,SAACgE,GACrBA,EAAEW,iBACFjH,EAASW,aAAW,IACf8B,EAIgB,QAAfhL,EA/EP,oCAgFKyP,GACwB,WAAfzP,GAjFd,oCAkFK0P,IANFjH,EAAgB,4BAA6B,CAAErF,QAAS,UACxDmF,EAASW,aAAW,MA7EvB,8CAuFD,sBAAAD,EAAA,6DACEV,EAASW,aAAW,IADtB,SAGQC,IACHC,WAAW,WACXC,IAAIC,GACJF,WAAW,aACXa,IAAI,CACHe,IAAKA,GAAO,GACZE,SAAUA,GAAY,KACtBD,MAAOA,GAAS,GAChB5G,KAAMA,GAAQ,GACd8G,UAAWA,GAAa,GACxB3H,MAAOA,GAAS,GAChBlB,aAAcA,GAAgB,GAC9Bd,IAAKA,GAAO,GACZ6J,QAASA,GAAW,GACpBE,aAAcA,GAAgB,GAC9BD,yBAA0BA,GAA4B,GACtDE,sBAAuBA,GAAyB,GAChDtJ,uBAAwBA,GAA0B,GAClDuJ,iBAAkBA,GAAoB,GACtCE,kBAAmBA,GAAqB,GACxCC,YAAaA,GAAe,GAC5BC,iBAAkBA,GAAoB,GACtCH,mBAAoBA,GAAsB,KAE3ChC,KAxBG,sBAwBE,sBAAAT,EAAA,6DACJR,EAAgB,+BADZ,SAEEH,IAFF,OAGJ8G,IACA7G,EAASW,aAAW,IAJhB,4CAMLY,OAAM,SAACC,GACNtB,EAAgB,wCAAD,cAC2BsB,QAD3B,IAC2BA,OAD3B,EAC2BA,EAAOC,SAC/C,CAAE5G,QAAS,UAEbmF,EAASW,aAAW,OAtC1B,4CAvFC,oEAiID,sBAAAD,EAAA,6DACEV,EAASW,aAAW,IADtB,SAGQC,IACHC,WAAW,WACXC,IAAIC,GACJF,WAAW,aACXC,IAAI7D,GACJiF,IACC,CACEjF,GAAIA,EACJwF,IAAKA,GAAO,GACZE,SAAUA,GAAY,KACtBD,MAAOA,GAAS,GAChB5G,KAAMA,GAAQ,GACd8G,UAAWA,GAAa,GACxB3H,MAAOA,GAAS,GAChBlB,aAAcA,GAAgB,GAC9Bd,IAAKA,GAAO,GACZ6J,QAASA,GAAW,GACpBE,aAAcA,GAAgB,GAC9BD,yBAA0BA,GAA4B,GACtDE,sBAAuBA,GAAyB,GAChDtJ,uBAAwBA,GAA0B,GAClDuJ,iBAAkBA,GAAoB,GACtCE,kBAAmBA,GAAqB,GACxCC,YAAaA,GAAe,GAC5BC,iBAAkBA,GAAoB,GACtCH,mBAAoBA,GAAsB,IAE5C,CAAEhB,OAAO,IAEVhB,KA7BG,sBA6BE,sBAAAT,EAAA,6DACJR,EAAgB,iCADZ,SAEEH,IAFF,OAGJ8G,IACA7G,EAASW,aAAW,IAJhB,4CAMLY,OAAM,SAACC,GACNtB,EAAgB,0CAAD,cAC6BsB,QAD7B,IAC6BA,OAD7B,EAC6BA,EAAOC,SACjD,CAAE5G,QAAS,UAEbmF,EAASW,aAAW,OA3C1B,4CAjIC,sBAgLD,OACE,mCACE,eAAChC,EAAA,EAAD,CACEb,KAAM8I,EAENhI,SAAU,KACV9B,WAAS,EAJX,UAME,cAAC+B,EAAA,EAAD,CAAa5B,GAAG,qBAAhB,SACkB,SAAfxF,EACG,YACe,QAAfA,EACA,cACA,gBAEN,eAACqH,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,IACA,uBACA,cAACwD,EAAD,CACEhL,MAAOA,EACPC,SAAUA,EACVgL,aAAcA,EACdzB,UAAWA,EACXtJ,WAAYA,EACZsI,UAAWA,OAGf,cAACJ,EAAA,EAAD,UACE,eAAC7E,EAAA,EAAD,CAAOC,QAAS,EAAGuC,UAAU,MAA7B,UACkB,SAAf7F,EACC,cAACuD,EAAA,EAAD,CACEE,QAAS,SAACoL,GAAD,OAAOhE,EAAcgE,IAC9BrL,MAAM,UACNJ,QAAQ,YAHV,SAKGpD,GAA6B,QAAfA,EAAuB,MAAQ,WAGhD,6BAGF,cAACuD,EAAA,EAAD,CACEE,QAAS,kBAAM2L,KACf5L,MAAM,QACNJ,QAAQ,WAHV,+BCvONuM,GAAoBC,gBAAK,kBAC7B,yDAGa,SAASC,KACtB,IAAMtH,EAAWC,cAETC,EAAoBC,cAApBD,gBAEAqH,EAAmBC,YAAYC,KAA/BF,eA2BR,EAAoC3P,oBAAS,GAA7C,mBAAOgP,EAAP,KAAmBc,EAAnB,KAEA,EAAoC9P,mBAAS,IAA7C,mBAAOH,EAAP,KAAmBkQ,EAAnB,KAEA,EAAoC/P,mBAAS,CAC3C6K,IAAK,GACLC,MAAO,GACPC,SAAU,KACV7G,KAAM,GACN8G,UAAW,GACX3H,MAAO,GACPlB,aAAc,GACdd,IAAK,GACL6J,QAAS,GACTE,aAAc,GACdD,yBAA0B,GAC1BE,sBAAuB,GACvBtJ,uBAAwB,GACxBuJ,iBAAkB,GAClBE,kBAAmB,GACnBC,YAAa,GACbC,iBAAkB,GAClBH,mBAAoB,GACpBN,6BAA8B,KAnBhC,mBAAO+E,EAAP,KAAmBC,EAAnB,KAsBA,EAAwBjQ,mBAAS,IAAjC,mBAAOyI,EAAP,KAAaC,EAAb,KAEA,EAA8B1I,mBAAS,MAAvC,mBAAgBkQ,GAAhB,WAEA,EAA8BlQ,oBAAS,GAAvC,mBAAgBmQ,GAAhB,WAEMC,EAAyBrQ,mBAE/BsC,qBAAU,WACR+N,EAAuB9N,YACtB,IAEH,IAAM+N,EAAc,uCAAG,sBAAAvH,EAAA,6DACrBV,EAASW,aAAW,IADC,SAGfC,IACHC,WAAW,WACXC,IAFG,OAECyG,QAFD,IAECA,OAFD,EAECA,EAAgBtK,IACpB4D,WAAW,aACXI,QAAQ,SACRiH,MApFa,IAqFbhH,MACAC,MAAK,SAACC,GAAY,IAAD,EAChB,IAAU,OAANA,QAAM,IAANA,GAAA,UAAAA,EAAQC,YAAR,eAAc9H,QAAS,EAAG,CAAC,IAAD,EACtB4O,EAAW,OAAG/G,QAAH,IAAGA,OAAH,EAAGA,EAAQC,MAAW,OAAND,QAAM,IAANA,OAAA,EAAAA,EAAQC,KAAK9H,QAAS,GACvDuO,EAAWK,GAEX,IAAInB,EAAW,GACf5F,EAAOC,KAAK5H,SAAQ,SAACqH,GACe,IAAD,0CAAjB,mBAAT,OAAHA,QAAG,IAAHA,OAAA,EAAAA,EAAK7D,KACP+J,EAAS3M,KAAK,CACZ4C,GAAI6D,EAAI7D,GACR4C,KAAK,eAAMiB,EAAIjB,QACf4C,KAAK,UAAA3B,EAAIjB,cAAJ,eAAY4C,MAAO,GACxBE,SAAUyF,KAAKC,WAAU,UAAAvH,EAAIjB,cAAJ,eAAY8C,WAAY,MACjDD,OAAO,UAAA5B,EAAIjB,cAAJ,eAAY6C,QAAS,GAC5B5G,MAAM,UAAAgF,EAAIjB,cAAJ,eAAY/D,OAAQ,GAC1B8G,WAAW,UAAA9B,EAAIjB,cAAJ,eAAY+C,YAAa,GACpC3H,OAAO,UAAA6F,EAAIjB,cAAJ,eAAY5E,QAAS,GAC5BlB,cAAc,UAAA+G,EAAIjB,cAAJ,eAAY9F,eAAgB,GAC1Cd,KAAK,UAAA6H,EAAIjB,cAAJ,eAAY5G,MAAO,GACxB6J,SAAS,UAAAhC,EAAIjB,cAAJ,eAAYiD,UAAW,GAChCE,cAAc,UAAAlC,EAAIjB,cAAJ,eAAYmD,eAAgB,GAC1CD,0BACE,UAAAjC,EAAIjB,cAAJ,eAAYkD,2BAA4B,GAC1CE,uBAAuB,UAAAnC,EAAIjB,cAAJ,eAAYoD,wBAAyB,GAC5DtJ,wBACE,UAAAmH,EAAIjB,cAAJ,eAAYlG,yBAA0B,GACxCuJ,kBAAkB,UAAApC,EAAIjB,cAAJ,eAAYqD,mBAAoB,GAClDE,mBAAmB,UAAAtC,EAAIjB,cAAJ,eAAYuD,oBAAqB,GACpDC,aAAa,UAAAvC,EAAIjB,cAAJ,eAAYwD,cAAe,GACxCC,kBAAkB,UAAAxC,EAAIjB,cAAJ,eAAYyD,mBAAoB,GAClDH,oBAAoB,UAAArC,EAAIjB,cAAJ,eAAYsD,qBAAsB,GACtDN,8BACK,OAAH/B,QAAG,IAAHA,GAAA,UAAAA,EAAKjB,cAAL,eAAagD,+BAAgC,GAC/CyF,+BACE,UAAAxH,EAAIjB,cAAJ,eAAYyI,gCAAiC,GAC/CC,4BACE,UAAAzH,EAAIjB,cAAJ,eAAY0I,6BAA8B,QAKlDjI,EAAQ0G,GA/HE,MAiIA,OAAN5F,QAAM,IAANA,GAAA,UAAAA,EAAQC,YAAR,eAAc9H,SAChBwO,GAAW,GAGb/H,EAASW,aAAW,SAEpBoH,GAAW,GACXzH,EAAQ,IACRwH,EAAW,MAEX9H,EAASW,aAAW,OAGvBY,OAAM,SAACC,GACNtB,EAAgB,iDAAD,cACoCsB,QADpC,IACoCA,OADpC,EACoCA,EAAOC,SACxD,CAAE5G,QAAS,UAEbmF,EAASW,aAAW,OAvEH,2CAAH,qDA2EpBqH,EAAuB9N,QAAU+N,EAEjC,IAuIMO,EAAa,uCAAG,WAAOvL,GAAP,SAAAyD,EAAA,6DACpBV,EAASW,aAAW,IADA,SAEdC,IACHC,WAAW,WACXC,IAFG,OAECyG,QAFD,IAECA,OAFD,EAECA,EAAgBtK,IACpB4D,WAAW,aACXC,IAAI7D,GACJwL,SACAtH,KANG,sBAME,sBAAAT,EAAA,sDACJuH,IACAjI,EAASW,aAAW,IAFhB,4CAILY,OAAM,SAACkE,GACNvF,EAAgB,wCAAD,cAC2BuF,QAD3B,IAC2BA,OAD3B,EAC2BA,EAAKhE,SAC7C,CAAE5G,QAAS,UAEbmF,EAASW,aAAW,OAjBJ,2CAAH,sDAqBnB,SAASkG,IACPgB,EAAc,CACZ5K,GAAI,GACJwF,IAAK,GACLE,SAAU,KACVD,MAAO,GACP5G,KAAM,GACN8G,UAAW,GACX3H,MAAO,GACPlB,aAAc,GACdd,IAAK,GACL6J,QAAS,GACTE,aAAc,GACdD,yBAA0B,GAC1BE,sBAAuB,GACvBtJ,uBAAwB,GACxBuJ,iBAAkB,GAClBE,kBAAmB,GACnBC,YAAa,GACbC,iBAAkB,GAClBH,mBAAoB,GACpBN,6BAA8B,GAC9ByF,8BAA+B,GAC/BC,2BAA4B,KAG9Bb,GAAc,GAEdC,EAAc,IAYhB,OACE,qCACE,cAACnN,EAAA,EAAD,CAAM4H,WAAS,EAACrH,QAAS,EAAzB,SACE,cAACP,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GAAIC,GAAI,GAAvB,SACE,cAACH,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GAAIC,GAAI,GAAvB,SACE,cAAC,WAAD,CAAU+N,SAAU,2CAApB,SACE,cAACtB,GAAD,CACErG,UAAS,OAAEwG,QAAF,IAAEA,OAAF,EAAEA,EAAgBtK,GAC3BD,KAAK,YACL2L,QAzVE,CACd,CAAE1L,GAAI,OAAQF,MAAO,QACrB,CAAEE,GAAI,OAAQF,MAAO,QACrB,CAAEE,GAAI,SAAUF,MAAO,UACvB,CAAEE,GAAI,SAAUF,MAAO,UACvB,CAAEE,GAAI,MAAOF,MAAO,OACpB,CAAEE,GAAI,WAAYF,MAAO,YACzB,CAAEE,GAAI,QAASF,MAAO,SACtB,CAAEE,GAAI,OAAQF,MAAO,QACrB,CAAEE,GAAI,YAAaF,MAAO,YAC1B,CAAEE,GAAI,QAASF,MAAO,SAEtB,CAAEE,GAAI,MAAOF,MAAO,YACpB,CAAEE,GAAI,UAAWF,MAAO,iBACxB,CAAEE,GAAI,eAAgBF,MAAO,sBAC7B,CAAEE,GAAI,2BAA4BF,MAAO,+BACzC,CAAEE,GAAI,wBAAyBF,MAAO,4BACtC,CAAEE,GAAI,yBAA0BF,MAAO,6BACvC,CAAEE,GAAI,mBAAoBF,MAAO,sBACjC,CAAEE,GAAI,oBAAqBF,MAAO,uBAClC,CAAEE,GAAI,cAAeF,MAAO,WAC5B,CAAEE,GAAI,mBAAoBF,MAAO,YACjC,CAAEE,GAAI,qBAAsBF,MAAO,eAoUvB6L,YAAavI,EACbwI,eAAe,EACfC,YAAa,iBACbC,WArIK,WACjBpB,EAAc,OACdD,GAAc,GACdG,EAAc,2BACTD,GADQ,IAEX3K,GAAI,GACJwF,IAAK,GACLE,SAAU,KACVD,MAAO,GACP5G,KAAM,GACN8G,UAAW,GACX3H,MAAO,GACPlB,aAAc,GACdd,IAAK,GACL6J,QAAS,GACTE,aAAc,GACdD,yBAA0B,GAC1BE,sBAAuB,GACvBtJ,uBAAwB,GACxBuJ,iBAAkB,GAClBE,kBAAmB,GACnBC,YAAa,GACbC,iBAAkB,GAClBH,mBAAoB,GACpBN,6BAA8B,GAC9ByF,8BAA+B,GAC/BC,2BAA4B,OA4GlB3B,WAAYA,EACZC,kBAAmBA,EACnBmC,YACE,2FAEFC,YAAY,EACZC,YA7BM,SAACjM,EAAI4C,GACvB8H,EAAc,QACdD,GAAc,GACdG,EAAc,2BACThI,GADQ,IAEX5C,GAAIA,MAyBMkM,kBAAkB,EAClBC,kBAAkB,EAClBC,cAjHQ,SAACpM,EAAI4C,GACzB8H,EAAc,UACdD,GAAc,GACdG,EAAc,CACZ5K,GAAIA,EACJwF,KAAS,OAAJ5C,QAAI,IAAJA,OAAA,EAAAA,EAAM4C,MAAO,GAClBE,UAAc,OAAJ9C,QAAI,IAAJA,OAAA,EAAAA,EAAM8C,WAAY,KAC5BD,OAAW,OAAJ7C,QAAI,IAAJA,OAAA,EAAAA,EAAM6C,QAAS,GACtB5G,MAAU,OAAJ+D,QAAI,IAAJA,OAAA,EAAAA,EAAM/D,OAAQ,GACpB8G,WAAe,OAAJ/C,QAAI,IAAJA,OAAA,EAAAA,EAAM+C,YAAa,GAC9B3H,OAAW,OAAJ4E,QAAI,IAAJA,OAAA,EAAAA,EAAM5E,QAAS,GACtBlB,cAAkB,OAAJ8F,QAAI,IAAJA,OAAA,EAAAA,EAAM9F,eAAgB,GACpCd,KAAS,OAAJ4G,QAAI,IAAJA,OAAA,EAAAA,EAAM5G,MAAO,GAClB6J,SAAa,OAAJjD,QAAI,IAAJA,OAAA,EAAAA,EAAMiD,UAAW,GAC1BE,cAAkB,OAAJnD,QAAI,IAAJA,OAAA,EAAAA,EAAMmD,eAAgB,GACpCD,0BAA8B,OAAJlD,QAAI,IAAJA,OAAA,EAAAA,EAAMkD,2BAA4B,GAC5DE,uBAA2B,OAAJpD,QAAI,IAAJA,OAAA,EAAAA,EAAMoD,wBAAyB,GACtDtJ,wBAA4B,OAAJkG,QAAI,IAAJA,OAAA,EAAAA,EAAMlG,yBAA0B,GACxDuJ,kBAAsB,OAAJrD,QAAI,IAAJA,OAAA,EAAAA,EAAMqD,mBAAoB,GAC5CE,mBAAuB,OAAJvD,QAAI,IAAJA,OAAA,EAAAA,EAAMuD,oBAAqB,GAC9CC,aAAiB,OAAJxD,QAAI,IAAJA,OAAA,EAAAA,EAAMwD,cAAe,GAClCC,kBAAsB,OAAJzD,QAAI,IAAJA,OAAA,EAAAA,EAAMyD,mBAAoB,GAC5CH,oBAAwB,OAAJtD,QAAI,IAAJA,OAAA,EAAAA,EAAMsD,qBAAsB,GAChDN,8BAAkC,OAAJhD,QAAI,IAAJA,OAAA,EAAAA,EAAMgD,+BAAgC,GACpEyF,+BAAmC,OAAJzI,QAAI,IAAJA,OAAA,EAAAA,EAAMyI,gCAAiC,GACtEC,4BAAgC,OAAJ1I,QAAI,IAAJA,OAAA,EAAAA,EAAM0I,6BAA8B,MAyFtDC,cAAeA,YAOxB5B,EACC,cAAC,GAAD,CACEnP,WAAYA,EACZmP,WAAYA,EACZC,kBAAmBA,EACnBtP,MAAOqQ,EACPpQ,SAAUqQ,EACV9H,UAAWkI,EACXlH,UAAS,OAAEwG,QAAF,IAAEA,OAAF,EAAEA,EAAgBtK,KAG7B,gC,4CCzPOqM,OAtIf,YAQI,IAPF7R,EAOC,EAPDA,WACAmP,EAMC,EANDA,WACAC,EAKC,EALDA,kBACAtP,EAIC,EAJDA,MACAC,EAGC,EAHDA,SACAuI,EAEC,EAFDA,UACAgB,EACC,EADDA,UAEQ9D,EAAc1F,EAAd0F,GAAI8I,EAAUxO,EAAVwO,MACJ7F,EAAoBC,cAApBD,gBACFF,EAAWC,cAEXqC,EAAgB,SAACgE,GACrBA,EAAEW,iBACFjH,EAASW,aAAW,IACfoF,EAIgB,QAAftO,EAZP,mCAaKyP,GACwB,WAAfzP,GAdd,mCAeK0P,IANFjH,EAAgB,yBAA0B,CAAErF,QAAS,UACrDmF,EAASW,aAAW,MAVvB,4CAoBD,sBAAAD,EAAA,6DACEV,EAASW,aAAW,IADtB,SAGQC,IACHC,WAAW,WACXC,IAAIC,GACJF,WAAW,YACXa,IAAI,CAAEqE,MAAOA,IACb5E,KALG,sBAKE,sBAAAT,EAAA,6DACJR,EAAgB,+BADZ,SAEEH,IAFF,OAGJ8G,IACA7G,EAASW,aAAW,IAJhB,4CAMLY,OAAM,SAACC,GACNtB,EAAgB,wCAAD,cAC2BsB,QAD3B,IAC2BA,OAD3B,EAC2BA,EAAOC,SAC/C,CAAE5G,QAAS,UAEbmF,EAASW,aAAW,OAnB1B,4CApBC,kEA2CD,sBAAAD,EAAA,6DACEV,EAASW,aAAW,IADtB,SAGQC,IACHC,WAAW,WACXC,IAAIC,GACJF,WAAW,YACXC,IAAI7D,GACJiF,IAAI,CAAE6D,MAAOA,GAAS,CAAE5D,OAAO,IAC/BhB,KANG,sBAME,sBAAAT,EAAA,6DACJR,EAAgB,iCADZ,SAEEH,IAFF,OAGJ8G,IACA7G,EAASW,aAAW,IAJhB,4CAMLY,OAAM,SAACC,GACNtB,EAAgB,0CAAD,cAC6BsB,QAD7B,IAC6BA,OAD7B,EAC6BA,EAAOC,SACjD,CAAE5G,QAAS,UAEbmF,EAASW,aAAW,OApB1B,4CA3CC,sBAmED,OACE,mCACE,eAAChC,EAAA,EAAD,CACEb,KAAM8I,EACN2C,QAAS1C,EACTjI,SAAU,KACV9B,WAAS,EAJX,UAME,cAAC+B,EAAA,EAAD,CAAa5B,GAAG,qBAAhB,SACGxF,GAA6B,QAAfA,EAAuB,cAAgB,gBAExD,eAACqH,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,IACA,uBACA,cAACvE,EAAA,EAAD,CAAM4H,WAAS,EAACrH,QAAS,EAAzB,SACE,cAACP,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GAAIC,GAAI,GAAvB,SACE,cAACiC,EAAA,EAAD,CACE/B,QAAQ,WACRiB,KAAK,QACL4H,UAAQ,EACR5G,WAAS,EACTnE,KAAK,QACLoE,MAAM,QACNC,KAAK,OACLC,GAAI,QACJvE,MAAOqN,GAAS,GAChBvJ,SAAU,SAACU,GACT1F,GAAS,SAACsC,GACR,OAAO,2BAAKA,GAAZ,IAAkBiM,MAAO7I,EAAMC,OAAOzE,qBAOlD,cAACiH,EAAA,EAAD,UACE,eAAC7E,EAAA,EAAD,CAAOC,QAAS,EAAGuC,UAAU,MAA7B,UACE,cAACtC,EAAA,EAAD,CACEE,QAAS,SAACoL,GAAD,OAAOhE,EAAcgE,IAC9BrL,MAAM,UACNJ,QAAQ,YAHV,SAKGpD,GAA6B,QAAfA,EAAuB,MAAQ,WAGhD,cAACuD,EAAA,EAAD,CACEE,QAAS,kBAAM2L,KACf5L,MAAM,QACNJ,QAAQ,WAHV,+BChINuM,GAAoBC,gBAAK,kBAC7B,yDAGa,SAASmC,KACtB,IAAMxJ,EAAWC,cAETC,EAAoBC,cAApBD,gBAEAqH,EAAmBC,YAAYC,KAA/BF,eASR,EAAoC3P,oBAAS,GAA7C,mBAAOgP,EAAP,KAAmBc,EAAnB,KAEA,EAAoC9P,mBAAS,IAA7C,mBAAOH,EAAP,KAAmBkQ,EAAnB,KAEA,EAA4C/P,mBAAS,CACnDmO,MAAO,KADT,mBAAO0D,EAAP,KAAuBC,EAAvB,KAIA,EAAwB9R,mBAAS,IAAjC,mBAAOyI,EAAP,KAAaC,EAAb,KAEMyG,EAAwBpP,mBAE9BsC,qBAAU,WACR8M,EAAsB7M,YACrB,IAEH,IAAMyP,EAAa,uCAAG,sBAAAjJ,EAAA,6DACpBV,EAASW,aAAW,IADA,SAGdC,IACHC,WAAW,WACXC,IAFG,OAECyG,QAFD,IAECA,OAFD,EAECA,EAAgBtK,IACpB4D,WAAW,YACXI,QAAQ,SACRC,MACAC,MAAK,SAACC,GAAY,IAAD,EAChB,IAAU,OAANA,QAAM,IAANA,GAAA,UAAAA,EAAQC,YAAR,eAAc9H,QAAS,EAAG,CAC5B,IAAMyN,EAAW5F,EAAOC,KAAKnF,KAAI,SAAC4E,GAAD,YAAU,CACzC7D,GAAI6D,EAAI7D,GACR4C,KAAK,eAAMiB,EAAIjB,QACfkG,OAAU,OAAHjF,QAAG,IAAHA,GAAA,UAAAA,EAAKjB,cAAL,eAAakG,QAAS,OAG/BzF,EAAQ0G,GAERhH,EAASW,aAAW,SAEpBL,EAAQ,IAERN,EAASW,aAAW,OAGvBY,OAAM,SAACC,GACNtB,EAAgB,4CAAD,cAC+BsB,QAD/B,IAC+BA,OAD/B,EAC+BA,EAAOC,SACnD,CAAE5G,QAAS,UAEbmF,EAASW,aAAW,OA/BJ,2CAAH,qDAmCnBoG,EAAsB7M,QAAUyP,EAEhC,IAmBMnB,EAAa,uCAAG,WAAOvL,GAAP,SAAAyD,EAAA,6DACpBV,EAASW,aAAW,IADA,SAEdC,IACHC,WAAW,WACXC,IAFG,OAECyG,QAFD,IAECA,OAFD,EAECA,EAAgBtK,IACpB4D,WAAW,YACXC,IAAI7D,GACJwL,SACAtH,KANG,sBAME,sBAAAT,EAAA,sDACJiJ,IACA3J,EAASW,aAAW,IAFhB,4CAILY,OAAM,SAACkE,GACNvF,EAAgB,4CAAD,cAC+BuF,QAD/B,IAC+BA,OAD/B,EAC+BA,EAAKhE,SACjD,CAAE5G,QAAS,UAEbmF,EAASW,aAAW,OAjBJ,2CAAH,sDAqBnB,SAASkG,IACP6C,EAAkB,CAChBzM,GAAI,GACJ0F,SAAU,KAGZ+E,GAAc,GAEdC,EAAc,IAGhB,OACE,qCACE,cAACnN,EAAA,EAAD,CAAM4H,WAAS,EAACrH,QAAS,EAAzB,SACE,cAACP,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GAAIC,GAAI,GAAvB,SACE,cAACH,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GAAIC,GAAI,GAAvB,SACE,cAAC,WAAD,CAAU+N,SAAU,2CAApB,SACE,cAAC,GAAD,CACE3H,UAAS,OAAEwG,QAAF,IAAEA,OAAF,EAAEA,EAAgBtK,GAC3BD,KAAK,WACL2L,QAxHE,CACd,CAAE1L,GAAI,OAAQF,MAAO,QACrB,CAAEE,GAAI,SAAUF,MAAO,UACvB,CAAEE,GAAI,SAAUF,MAAO,UACvB,CAAEE,GAAI,QAASF,MAAO,UAqHV6L,YAAavI,EACbwI,eAAe,EACfC,YAAa,qBACbC,WAhEK,WACjBpB,EAAc,OACdD,GAAc,GACdgC,EAAkB,2BACbD,GADY,IAEfxM,GAAI,GACJ8I,MAAO,OA2DGa,WAAYA,EACZC,kBAAmBA,EACnBmC,YACE,+EAEFG,kBAAkB,EAClBC,kBAAkB,EAClBC,cA9DQ,SAACpM,EAAI4C,GACzB8H,EAAc,UACdD,GAAc,GACdgC,EAAkB,CAChBzM,GAAIA,EACJ8I,OAAW,OAAJlG,QAAI,IAAJA,OAAA,EAAAA,EAAMkG,QAAS,MA0DZyC,cAAeA,YAOxB5B,EACC,cAAC,GAAD,CACEnP,WAAYA,EACZmP,WAAYA,EACZC,kBAAmBA,EACnBtP,MAAOkS,EACPjS,SAAUkS,EACV3J,UAAW4J,EACX5I,UAAS,OAAEwG,QAAF,IAAEA,OAAF,EAAEA,EAAgBtK,KAG7B,gCCvJR,IAAM2M,GAAyBvC,gBAAK,kBAClC,kCAGa,SAASwC,KACtB,IAAQC,EAAiBC,cAAjBD,aAEFE,EAAWC,eAET1C,EAAmBC,YAAYC,KAA/BF,eAER,EAA0C3P,mBAAS,MAAnD,mBAAOsS,EAAP,KAAsBC,EAAtB,KAOA,OACE,mCACE,cAACC,EAAA,EAAD,CAAMrE,MAAM,YAAZ,SACE,cAACsE,EAAA,EAAD,CAAWzL,UAAUkL,GAAuB,KAA5C,SACE,eAACtP,EAAA,EAAD,CAAM4H,WAAS,EAACrH,QAAS,EAAzB,UACE,cAACP,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GAAIC,GAAI,GAAvB,SACE,eAACG,EAAA,EAAD,CAAOC,QAAS,EAAGuC,UAAU,MAAMC,WAAY,SAA/C,UACE,cAACvC,EAAA,EAAD,CACEgL,UAAW,cAAC,KAAD,IACXnL,QAAQ,WACRI,MAAM,UACNC,QAAS,kBAAM8O,EAASM,KAAeC,QAAQC,OAJjD,kBAQA,cAAC5P,EAAA,EAAD,CAAYC,QAAQ,KAApB,oCAIJ,cAAC,WAAD,CAAU6N,SAAU,6BAApB,SACE,cAACkB,GAAD,CAAwB5M,KAAM,gBAGhC,cAACxC,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAvB,SACE,cAAC0L,EAAA,EAAD,CACEvK,KAAK,QACLiB,MAAM,sBACNE,GAAG,kBACHuJ,QAjCO,CACnB,CAAEiE,eAAgB,YAAa1E,MAAO,aACtC,CAAE0E,eAAgB,WAAY1E,MAAO,aAgCzBrN,MAAOwR,GAAiB,KACxBxN,YAAa,SAACC,GAAD,OACX,cAACC,EAAA,EAAD,2BAAeD,GAAf,IAAuBI,MAAM,0BAE/BP,SAAU,SAAC8J,EAAG5N,EAAO6N,GAEN,iBAAXA,GACW,UAAXA,GACA7N,EAEAyR,EAAiBzR,GACG,iBAAX6N,GAAwC,UAAXA,GACtC4D,EAAiB,OAGrB1D,eAAgB,SAACC,GAAD,OAAkB,OAANA,QAAM,IAANA,OAAA,EAAAA,EAAQX,QAAS,IAC7C2E,aAAc,SAACC,EAAOjE,GAAR,OACZ,wDAAQiE,GAAR,IAAeC,IAAG,OAAElE,QAAF,IAAEA,OAAF,EAAEA,EAAQ+D,iBAC1B,gCAAa,OAAN/D,QAAM,IAANA,OAAA,EAAAA,EAAQX,QAAS,OAG5BxK,UAAWgM,MAId2C,GAAmD,eAArB,OAAbA,QAAa,IAAbA,OAAA,EAAAA,EAAeO,gBAC/B,cAACjQ,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GAAIC,GAAI,GAAvB,SACE,cAAC2M,GAAD,MAEA4C,GACgC,cAArB,OAAbA,QAAa,IAAbA,OAAA,EAAAA,EAAeO,gBACf,cAACjQ,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GAAIC,GAAI,GAAvB,SACE,cAAC6O,GAAD,MAGF","file":"static/js/87.48be50e7.chunk.js","sourcesContent":["import { DatePicker } from \"@mui/lab\";\nimport {\n  Grid,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableFooter,\n  TableHead,\n  TableRow,\n  Stack,\n  Button,\n  TextField,\n  Typography,\n  IconButton,\n} from \"@mui/material\";\nimport { useEffect, useRef, useState } from \"react\";\nimport CurrencyFormat from \"react-currency-format\";\nimport DeleteIcon from \"@mui/icons-material/Delete\";\nimport moment from \"moment\";\n\nexport default function ManageStockHistory({ state, setState, dialogType }) {\n  const temp_initStockHistoryRef = useRef();\n\n  const [stockHistoryList, setStockHistoryList] = useState([]);\n\n  const [totalRow, setTotalRow] = useState({\n    totalQty: 0,\n    totalUnitPrice: 0,\n    totalPrice: 0,\n  });\n\n  const [meanRow, setMeanRow] = useState({\n    meanUnitPrice: 0,\n    meanPercentageConversion: 0,\n    meanShippingPercentage: 0,\n  });\n\n  useEffect(() => {\n    temp_initStockHistoryRef.current();\n  }, []);\n\n  function initStockHistory() {\n    if (\n      state?.stockHistory &&\n      state?.stockHistory?.historyList &&\n      state?.stockHistory?.historyList?.length > 0\n    ) {\n      let historyWithDateFormat = [];\n\n      state?.stockHistory?.historyList.forEach((history) => {\n        historyWithDateFormat.push({\n          ...history,\n          dateCreated: history?.dateCreated\n            ? history?.dateCreated.toDate()\n            : \"\",\n        });\n      });\n\n      setStockHistoryList([...(historyWithDateFormat || [])]);\n\n      setTotalRow({\n        totalQty: state?.stockHistory?.totalQty || 0,\n        totalUnitPrice: state?.stockHistory?.totalUnitPrice || 0,\n        totalPrice: state?.stockHistory?.totalPrice || 0,\n      });\n\n      setMeanRow({\n        meanUnitPrice: state?.stockHistory?.meanUnitPrice || 0,\n        meanPercentageConversion:\n          state?.stockHistory?.meanPercentageConversion || 0,\n        meanShippingPercentage:\n          state?.stockHistory?.meanShippingPercentage || 0,\n      });\n    }\n  }\n\n  temp_initStockHistoryRef.current = initStockHistory;\n\n  function addRow() {\n    let newHistoryList = [...(stockHistoryList || [])];\n    newHistoryList.push({\n      dateCreated: \"\",\n      unitPrice: \"\",\n      qty: \"\",\n      shippingPercentage: \"\",\n      percentageConversion: \"\",\n      totalPriceWithShipping: \"\",\n    });\n\n    setStockHistoryList(newHistoryList);\n  }\n\n  function onHandleChange(value, name, index) {\n    let newHistoryList = [...(stockHistoryList || [])];\n\n    let rowData = { ...newHistoryList[index] };\n\n    let unitPrice =\n      name === \"unitPrice\"\n        ? Number(value || 0)\n        : Number(rowData?.unitPrice || 0);\n\n    let qty = name === \"qty\" ? Number(value || 0) : Number(rowData?.qty || 0);\n\n    /* let shippingPercentage =\n      name === \"shippingPercentage\"\n        ? Number(value || 0)\n        : Number(rowData?.shippingPercentage || 0); */\n\n    // let percentageToTake = Number(shippingPercentage) + 100;\n\n    // let percentageConversion = percentageToTake / 100;\n\n    let percentageConversion =\n      name === \"percentageConversion\"\n        ? Number(value || 0)\n        : Number(rowData?.percentageConversion || 0);\n\n    let totalPrice = unitPrice * qty * percentageConversion;\n\n    newHistoryList[index] = {\n      ...newHistoryList[index],\n      [name]: value,\n      totalPriceWithShipping: totalPrice || 0,\n    };\n\n    setStockHistoryList(newHistoryList);\n\n    calculateTotal(newHistoryList);\n  }\n\n  function deleteRow(index) {\n    let newHistoryList = [...(stockHistoryList || [])];\n    newHistoryList.splice(index, 1);\n\n    setStockHistoryList(newHistoryList);\n\n    calculateTotal(newHistoryList);\n  }\n\n  function calculateTotal(newHistoryList) {\n    let totalQtyCal = 0;\n    let totalUnitPriceCal = 0;\n    let totalPriceCal = 0;\n\n    if (newHistoryList && newHistoryList?.length > 0) {\n      // qty * shipping (% converted)\n      let totalQtyWithShippingConverted = 0;\n\n      newHistoryList.forEach((row) => {\n        totalQtyCal = totalQtyCal + Number(row?.qty || 0);\n        totalUnitPriceCal = totalUnitPriceCal + Number(row?.unitPrice || 0);\n        totalPriceCal =\n          totalPriceCal + Number(row?.totalPriceWithShipping || 0);\n\n        totalQtyWithShippingConverted =\n          totalQtyWithShippingConverted +\n          Number(row?.qty || 0) * Number(row?.percentageConversion || 0);\n      });\n\n      let meanUnitPriceCal = totalPriceCal / totalQtyWithShippingConverted;\n\n      let meanPercentageConversionCal =\n        totalQtyWithShippingConverted / totalQtyCal;\n\n      //  let meanShippingPercentageCal = (meanPercentageConversionCal - 1) * 100;\n\n      setTotalRow({\n        totalQty: totalQtyCal,\n        totalUnitPrice: totalUnitPriceCal,\n        totalPrice: totalPriceCal,\n      });\n\n      setMeanRow({\n        meanUnitPrice: meanUnitPriceCal || 0,\n        meanPercentageConversion: meanPercentageConversionCal || 0,\n        // meanShippingPercentage: meanShippingPercentageCal || 0,\n      });\n\n      setState((prev) => {\n        return {\n          ...prev,\n          qty: totalQtyCal,\n          stockHistory: {\n            historyList: newHistoryList,\n            totalQty: totalQtyCal,\n            totalUnitPrice: totalUnitPriceCal,\n            totalPrice: totalPriceCal,\n            meanUnitPrice: meanUnitPriceCal || 0,\n            meanPercentageConversion: meanPercentageConversionCal || 0,\n            // meanShippingPercentage: meanShippingPercentageCal || 0,\n          },\n        };\n      });\n    } else {\n      setTotalRow({\n        totalQty: 0,\n        totalUnitPrice: 0,\n        totalPrice: 0,\n      });\n\n      setMeanRow({\n        meanUnitPrice: 0,\n        meanPercentageConversion: 0,\n        meanShippingPercentage: 0,\n      });\n\n      setState((prev) => {\n        return {\n          ...prev,\n          qty: totalQtyCal,\n          stockHistory: {\n            historyList: [],\n            totalQty: 0,\n            totalUnitPrice: 0,\n            totalPrice: 0,\n            meanUnitPrice: 0,\n            meanPercentageConversion: 0,\n            meanShippingPercentage: 0,\n          },\n        };\n      });\n    }\n  }\n\n  return (\n    <>\n      <Grid item xs={12} md={12}>\n        <Typography variant=\"subtitle1\">\n          Stock History - keep track of stock arrivals and calculate mean\n        </Typography>\n      </Grid>\n      <Grid item xs={12} md={12}>\n        <Stack spacing={3}>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={() => addRow()}\n            sx={{ width: \"200px\" }}\n            disabled={dialogType === \"view\"}\n          >\n            Add stock row\n          </Button>\n\n          <TableContainer>\n            <Table border={1}>\n              <TableHead>\n                <TableRow>\n                  <TableCell size=\"small\" align=\"center\">\n                    Delete\n                  </TableCell>\n                  <TableCell size=\"small\" align=\"center\">\n                    Date Created\n                  </TableCell>\n                  <TableCell size=\"small\" align=\"center\">\n                    Unit Price\n                  </TableCell>\n                  <TableCell size=\"small\" align=\"center\">\n                    Quantity\n                  </TableCell>\n                  <TableCell size=\"small\" align=\"center\">\n                    % Shipping\n                  </TableCell>\n                  <TableCell\n                    size=\"small\"\n                    align=\"center\"\n                    sx={{ minWidth: \"200px\" }}\n                  >\n                    Total\n                  </TableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {stockHistoryList &&\n                  stockHistoryList?.length > 0 &&\n                  stockHistoryList?.map((stockHistoryData, index) => (\n                    <TableRow key={index}>\n                      <TableCell size=\"small\" align=\"center\">\n                        <IconButton\n                          color=\"error\"\n                          onClick={() => deleteRow(index)}\n                          disabled={dialogType === \"view\"}\n                        >\n                          <DeleteIcon />\n                        </IconButton>\n                      </TableCell>\n                      <TableCell size=\"small\" align=\"center\">\n                        <DatePicker\n                          value={stockHistoryData?.dateCreated}\n                          onChange={(newValue) => {\n                            onHandleChange(newValue, \"dateCreated\", index);\n                          }}\n                          renderInput={(params) => (\n                            <TextField\n                              {...params}\n                              size=\"small\"\n                              disabled={dialogType === \"view\"}\n                            />\n                          )}\n                          inputFormat=\"dd/MM/yyyy\"\n                          disabled={dialogType === \"view\"}\n                        />\n                      </TableCell>\n                      <TableCell size=\"small\" align=\"center\">\n                        <TextField\n                          variant=\"outlined\"\n                          size=\"small\"\n                          fullWidth\n                          name=\"unitPrice\"\n                          label=\"Unit Price\"\n                          type=\"text\"\n                          id=\"unitPrice\"\n                          value={stockHistoryData?.unitPrice || \"\"}\n                          onChange={(event) => {\n                            onHandleChange(\n                              event.target.value,\n                              \"unitPrice\",\n                              index\n                            );\n                          }}\n                          disabled={dialogType === \"view\"}\n                        />\n                      </TableCell>\n                      <TableCell size=\"small\" align=\"center\">\n                        <TextField\n                          variant=\"outlined\"\n                          size=\"small\"\n                          fullWidth\n                          name=\"qty\"\n                          label=\"Quantity\"\n                          type=\"text\"\n                          id=\"qty\"\n                          value={stockHistoryData?.qty || \"\"}\n                          onChange={(event) => {\n                            onHandleChange(event.target.value, \"qty\", index);\n                          }}\n                          disabled={dialogType === \"view\"}\n                        />\n                      </TableCell>\n                      <TableCell\n                        size=\"small\"\n                        align=\"center\"\n                        style={{ whiteSpace: \"nowrap\" }}\n                      >\n                        <Stack\n                          spacing={3}\n                          direction={\"row\"}\n                          alignItems={\"center\"}\n                        >\n                          <TextField\n                            variant=\"outlined\"\n                            size=\"small\"\n                            fullWidth\n                            name=\"percentageConversion\"\n                            label=\"% Shipping\"\n                            type=\"text\"\n                            id=\"percentageConversion\"\n                            value={stockHistoryData?.percentageConversion || \"\"}\n                            onChange={(event) => {\n                              onHandleChange(\n                                event.target.value,\n                                \"percentageConversion\",\n                                index\n                              );\n                            }}\n                            disabled={dialogType === \"view\"}\n                          />\n                        </Stack>\n                      </TableCell>\n                      <TableCell size=\"small\" align=\"right\">\n                        <CurrencyFormat\n                          value={Number(\n                            stockHistoryData?.totalPriceWithShipping || 0\n                          ).toFixed(2)}\n                          displayType={\"text\"}\n                          thousandSeparator={true}\n                        />\n                      </TableCell>\n                    </TableRow>\n                  ))}\n              </TableBody>\n              <TableFooter>\n                <TableRow>\n                  <TableCell size=\"small\" align=\"center\" colSpan={2}>\n                    <Typography variant=\"subtitle1\">TOTAL</Typography>\n                  </TableCell>\n                  <TableCell size=\"small\">\n                    <Typography variant=\"subtitle1\">\n                      <CurrencyFormat\n                        value={Number(totalRow?.totalUnitPrice || 0).toFixed(2)}\n                        displayType={\"text\"}\n                        thousandSeparator={true}\n                      />\n                    </Typography>\n                  </TableCell>\n                  <TableCell size=\"small\">\n                    <Typography variant=\"subtitle1\">\n                      {totalRow?.totalQty || 0}\n                    </Typography>\n                  </TableCell>\n\n                  <TableCell />\n\n                  <TableCell size=\"small\" align=\"right\">\n                    <Typography variant=\"subtitle1\">\n                      <CurrencyFormat\n                        value={Number(totalRow?.totalPrice || 0).toFixed(2)}\n                        displayType={\"text\"}\n                        thousandSeparator={true}\n                      />\n                    </Typography>\n                  </TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell size=\"small\" colSpan={2} align=\"center\">\n                    <Typography variant=\"subtitle1\">\n                      MEAN Calculation\n                    </Typography>\n                  </TableCell>\n                  <TableCell size=\"small\">\n                    <Typography variant=\"subtitle1\">\n                      <CurrencyFormat\n                        value={Number(meanRow?.meanUnitPrice || 0).toFixed(2)}\n                        displayType={\"text\"}\n                        thousandSeparator={true}\n                      />\n                    </Typography>\n                  </TableCell>\n                  <TableCell size=\"small\"></TableCell>\n                  <TableCell size=\"small\">\n                    <Typography variant=\"subtitle1\">\n                      {`${Number(\n                        meanRow?.meanPercentageConversion || 0\n                      ).toFixed(4)} (4 d.p)`}\n                      {/* ${Number(\n                        meanRow?.meanShippingPercentage || 0\n                      ).toFixed(4)} ---> */}\n                    </Typography>\n                  </TableCell>\n                  <TableCell size=\"small\"></TableCell>\n                </TableRow>\n              </TableFooter>\n            </Table>\n          </TableContainer>\n        </Stack>\n      </Grid>\n    </>\n  );\n}\n","import {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  Divider,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableFooter,\n  TableHead,\n  TableRow,\n  Typography,\n} from \"@mui/material\";\nimport moment from \"moment\";\nimport { useEffect, useRef, useState } from \"react\";\nimport CurrencyFormat from \"react-currency-format\";\n\nexport default function ViewAllSoldTransactionsDialog({\n  open,\n  setOpen,\n  allTransactions,\n}) {\n  const temp_calculateTotalRef = useRef();\n\n  const [total, setTotal] = useState({\n    totalWithoutVAT: 0,\n    totalWithVAT: 0,\n  });\n\n  useEffect(() => {\n    temp_calculateTotalRef.current();\n  }, [open, allTransactions]);\n\n  function calculateTotal() {\n    if (open && allTransactions?.length > 0) {\n      let totalWithoutVATCal = 0;\n      let totalWithVATCal = 0;\n\n      allTransactions.forEach((transaction) => {\n        totalWithoutVATCal =\n          totalWithoutVATCal + transaction?.rowDiscountedAmount || 0;\n        totalWithVATCal = totalWithVATCal + transaction?.rowAmountWithVAT || 0;\n      });\n\n      setTotal({\n        totalWithoutVAT: totalWithoutVATCal,\n        totalWithVAT: totalWithVATCal,\n      });\n    }\n  }\n\n  temp_calculateTotalRef.current = calculateTotal;\n\n  return (\n    <Dialog open={open} maxWidth={\"lg\"} fullWidth>\n      <DialogTitle>All the sold transactions made for this item</DialogTitle>\n      <DialogContent>\n        <Divider />\n        <br />\n\n        <TableContainer>\n          <Table border={1}>\n            <TableHead>\n              <TableRow>\n                <TableCell size=\"small\" align=\"center\">\n                  Document Type\n                </TableCell>\n                <TableCell size=\"small\" align=\"center\">\n                  Document Number\n                </TableCell>\n                <TableCell size=\"small\" align=\"center\">\n                  Date created\n                </TableCell>\n                <TableCell size=\"small\" align=\"center\">\n                  Unit Price\n                </TableCell>\n                <TableCell size=\"small\" align=\"center\">\n                  Qty Sold\n                </TableCell>\n                <TableCell size=\"small\" align=\"center\">\n                  Amount\n                </TableCell>\n                <TableCell size=\"small\" align=\"center\">\n                  Discount\n                </TableCell>\n                <TableCell\n                  size=\"small\"\n                  align=\"center\"\n                  style={{ whiteSpace: \"nowrap\" }}\n                >\n                  Amount (VAT excluded)\n                </TableCell>\n                <TableCell\n                  size=\"small\"\n                  align=\"center\"\n                  style={{ whiteSpace: \"nowrap\" }}\n                >\n                  Amount (VAT included)\n                </TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {allTransactions &&\n                allTransactions?.length > 0 &&\n                allTransactions?.map((transaction) => (\n                  <TableRow>\n                    <TableCell size=\"small\" align=\"center\">\n                      {transaction?.profomaConverted\n                        ? `Proforma ${transaction?.previousProformaNumber} -> ${transaction?.docTitle}`\n                        : transaction?.docTitle || \"\"}\n                    </TableCell>\n                    <TableCell size=\"small\" align=\"center\">\n                      {transaction?.docString || \"\"}\n                    </TableCell>\n                    <TableCell size=\"small\" align=\"center\">\n                      {transaction?.docDate\n                        ? moment(transaction?.docDate?.toDate()).format(\n                            \"DD-MM-YYYY HH:mm:ss\"\n                          )\n                        : \"\"}\n                    </TableCell>\n                    <TableCell size=\"small\" align=\"center\">\n                      <CurrencyFormat\n                        value={Number(transaction?.rowUnitPrice || 0).toFixed(\n                          2\n                        )}\n                        displayType={\"text\"}\n                        thousandSeparator={true}\n                      />\n                    </TableCell>\n                    <TableCell size=\"small\" align=\"center\">\n                      {transaction?.itemQtySold || \"\"}\n                    </TableCell>\n                    <TableCell size=\"small\" align=\"center\">\n                      <CurrencyFormat\n                        value={Number(transaction?.rowAmount || 0).toFixed(2)}\n                        displayType={\"text\"}\n                        thousandSeparator={true}\n                      />\n                    </TableCell>\n                    <TableCell size=\"small\" align=\"center\">\n                      <CurrencyFormat\n                        value={Number(\n                          transaction?.rowDiscountAmount || 0\n                        ).toFixed(2)}\n                        displayType={\"text\"}\n                        thousandSeparator={true}\n                      />\n                    </TableCell>\n                    <TableCell size=\"small\" align=\"center\">\n                      <CurrencyFormat\n                        value={Number(\n                          transaction?.rowDiscountedAmount || 0\n                        ).toFixed(2)}\n                        displayType={\"text\"}\n                        thousandSeparator={true}\n                      />\n                    </TableCell>\n                    <TableCell size=\"small\" align=\"center\">\n                      <CurrencyFormat\n                        value={Number(\n                          transaction?.rowAmountWithVAT || 0\n                        ).toFixed(2)}\n                        displayType={\"text\"}\n                        thousandSeparator={true}\n                      />\n                    </TableCell>\n                  </TableRow>\n                ))}\n            </TableBody>\n            <TableFooter>\n              <TableRow>\n                <TableCell colSpan={7} align=\"right\">\n                  <Typography variant=\"h6\">TOTAL</Typography>\n                </TableCell>\n                <TableCell size=\"small\" align=\"center\">\n                  <Typography variant=\"h6\">\n                    <CurrencyFormat\n                      value={Number(total?.totalWithoutVAT || 0).toFixed(2)}\n                      displayType={\"text\"}\n                      thousandSeparator={true}\n                    />\n                  </Typography>\n                </TableCell>\n                <TableCell size=\"small\" align=\"center\">\n                  <Typography variant=\"h6\">\n                    <CurrencyFormat\n                      value={Number(total?.totalWithVAT || 0).toFixed(2)}\n                      displayType={\"text\"}\n                      thousandSeparator={true}\n                    />\n                  </Typography>\n                </TableCell>\n              </TableRow>\n            </TableFooter>\n          </Table>\n        </TableContainer>\n      </DialogContent>\n      <DialogActions>\n        <Button\n          variant=\"outlined\"\n          color=\"error\"\n          onClick={() => {\n            setOpen(false);\n          }}\n        >\n          Close\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n","import {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  Divider,\n  Grid,\n  Stack,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  TextField,\n} from \"@mui/material\";\nimport { useEffect, useRef, useState } from \"react\";\nimport db from \"src/firebase\";\nimport moment from \"moment\";\nimport { useDispatch } from \"react-redux\";\nimport { useSnackbar } from \"notistack\";\nimport { setLoading } from \"src/features/globalSlice\";\nimport firebase from \"firebase/compat\";\n\nexport default function SetUpAmountReceivedDialog({\n  data,\n  setData,\n  dialogType,\n  fetchData,\n  setState,\n}) {\n  const dispatch = useDispatch();\n\n  const { enqueueSnackbar } = useSnackbar();\n\n  const temp_retrievedListRef = useRef();\n\n  const [list, setList] = useState([]);\n\n  const [amount, setAmount] = useState(\"\");\n\n  useEffect(() => {\n    temp_retrievedListRef.current();\n  }, [data?.open]);\n\n  async function retrievedList() {\n    if (data?.open) {\n      dispatch(setLoading(true));\n      await db\n        .collection(\"company\")\n        .doc(data?.companyId)\n        .collection(\"inventory\")\n        .doc(data?.inventoryId)\n        .collection(data?.type)\n        .orderBy(\"timestamp\", \"desc\")\n        .get()\n        .then((result) => {\n          if (result?.docs?.length > 0) {\n            let arr = [];\n            result?.docs.forEach((doc) => {\n              arr.push({ id: doc?.id, data: { ...doc?.data() } });\n            });\n            setList(arr);\n            dispatch(setLoading(false));\n          } else {\n            setList([]);\n            dispatch(setLoading(false));\n          }\n        })\n        .catch((error) => {\n          enqueueSnackbar(\n            `Error occured while retieving history list: ${error?.message}`,\n            { variant: \"error\" }\n          );\n          dispatch(setLoading(false));\n        });\n    }\n  }\n\n  temp_retrievedListRef.current = retrievedList;\n\n  async function submitChanges() {\n    dispatch(setLoading(true));\n    await db\n      .collection(\"company\")\n      .doc(data?.companyId)\n      .collection(\"inventory\")\n      .doc(data?.inventoryId)\n      .collection(data?.type)\n      .add({\n        timestamp: firebase.firestore.Timestamp.fromDate(new Date()),\n        amount: amount,\n      })\n      .then(async () => {\n        let updatedData = {\n          [data?.type]: amount,\n        };\n\n        await db\n          .collection(\"company\")\n          .doc(data?.companyId)\n          .collection(\"inventory\")\n          .doc(data?.inventoryId)\n          .set(\n            {\n              ...updatedData,\n            },\n            { merge: true }\n          )\n          .then(() => {\n            setState((prev) => {\n              return { ...prev, [data?.type]: amount };\n            });\n            setAmount(\"\");\n            enqueueSnackbar(\"Changes recorded successfully\");\n            fetchData();\n            retrievedList();\n            dispatch(setLoading(false));\n            setData({\n              open: false,\n            });\n          })\n          .catch((error) => {\n            enqueueSnackbar(\n              `Error occured while retieving : ${error?.message}`,\n              { variant: \"error\" }\n            );\n            dispatch(setLoading(false));\n          });\n      })\n      .catch((error) => {\n        enqueueSnackbar(\n          `Error occured while retieving history list: ${error?.message}`,\n          { variant: \"error\" }\n        );\n        dispatch(setLoading(false));\n      });\n  }\n\n  return (\n    <Dialog open={data?.open} maxWidth=\"md\" fullWidth>\n      <DialogTitle>Amount Update History</DialogTitle>\n      <DialogContent>\n        <Divider />\n        <br />\n        <Grid container spacing={3}>\n          {dialogType !== \"view\" ? (\n            <Grid item xs={12} md={5}>\n              <Stack\n                spacing={2}\n                direction={\"row\"}\n                alignItems={\"center\"}\n                sx={{ whiteSpace: \"nowrap\" }}\n              >\n                <TextField\n                  variant=\"outlined\"\n                  size=\"small\"\n                  fullWidth\n                  name={\"amount\"}\n                  label={data?.typeLabel}\n                  type=\"text\"\n                  id={\"amount\"}\n                  value={amount}\n                  onChange={(event) => {\n                    setAmount(event.target.value);\n                  }}\n                  disabled={dialogType === \"view\"}\n                />\n\n                {amount ? (\n                  <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={() => submitChanges()}\n                  >\n                    Submit\n                  </Button>\n                ) : (\n                  <></>\n                )}\n              </Stack>\n            </Grid>\n          ) : (\n            <></>\n          )}\n\n          <Grid item xs={12} md={12}>\n            <TableContainer>\n              <Table>\n                <TableHead>\n                  <TableRow>\n                    <TableCell size=\"small\" align=\"center\">\n                      Date - last manually modified\n                    </TableCell>\n                    <TableCell size=\"small\" align=\"center\">\n                      Amount\n                    </TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {list &&\n                    list?.length > 0 &&\n                    list?.map((data, index) => (\n                      <TableRow key={index}>\n                        <TableCell size=\"small\" align=\"center\">\n                          {data?.data?.timestamp\n                            ? moment(data?.data?.timestamp.toDate()).format(\n                                \"DD-MM-YYYY HH:mm:ss\"\n                              )\n                            : \"\"}\n                        </TableCell>\n                        <TableCell size=\"small\" align=\"center\">\n                          {data?.data?.amount}\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                </TableBody>\n              </Table>\n            </TableContainer>\n          </Grid>\n        </Grid>\n      </DialogContent>\n      <DialogActions>\n        <Button\n          variant=\"outlined\"\n          color=\"error\"\n          onClick={() =>\n            setData({\n              open: false,\n            })\n          }\n        >\n          Close\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n","import {\n  Autocomplete,\n  Button,\n  Divider,\n  Grid,\n  Stack,\n  TextField,\n  Tooltip,\n} from \"@mui/material\";\nimport { useSnackbar } from \"notistack\";\nimport { useEffect, useRef, useState } from \"react\";\nimport ManageStockHistory from \"../../manage-stock-history/ManageStockHistory\";\nimport { useDispatch } from \"react-redux\";\nimport { setLoading } from \"src/features/globalSlice\";\nimport db from \"src/firebase\";\nimport ViewAllSoldTransactionsDialog from \"./ViewAllSoldTransactionsDialog\";\nimport SetUpAmountReceivedDialog from \"./SetUpAmountReceivedDialog\";\nimport ArrowBackIcon from \"@mui/icons-material/ArrowBack\";\n\nexport default function ItemForm({\n  state,\n  setState,\n  categoryList,\n  companyId,\n  dialogType,\n  fetchData,\n}) {\n  const { enqueueSnackbar } = useSnackbar();\n\n  const dispatch = useDispatch();\n\n  const {\n    id,\n    sku,\n    model,\n    category,\n    size,\n    materials,\n    color,\n    stockHistory,\n    allInventoryItemTransactions,\n    qty,\n    qtySold,\n    qtyRemaining,\n    unitPriceWithoutShipping,\n    unitPriceWithShipping,\n    totalPriceWithShipping,\n    unitSellingPrice,\n    totalSellingPrice,\n    companyName,\n    percentageProfit,\n    percentageShipping,\n  } = state;\n\n  const [openSetUpAmountReceivedDialog, setOpenSetUpAmountReceivedDialog] =\n    useState(false);\n\n  const fields = [\n    {\n      label: \"SKU\",\n      name: \"sku\",\n      type: \"text\",\n      required: true,\n    },\n    {\n      type: \"divider\",\n    },\n    {\n      label: \"Model\",\n      name: \"model\",\n      type: \"text\",\n      required: false,\n    },\n    {\n      label: \"Category\",\n      name: \"category\",\n      type: \"autocomplete\",\n      required: false,\n    },\n    { label: \"Size\", name: \"size\", type: \"text\", required: false },\n    { label: \"Materials\", name: \"materials\", type: \"text\", required: false },\n    { label: \"Color\", name: \"color\", type: \"text\", required: false },\n    {\n      label: \"Company name\",\n      name: \"companyName\",\n      type: \"text\",\n      required: false,\n    },\n\n    {\n      type: \"divider\",\n    },\n\n    { label: \"Stock Quantity\", name: \"qty\", type: \"number\", required: false },\n    {\n      label: \"Quantity sold\",\n      name: \"qtySold\",\n      type: \"number\",\n      required: false,\n    },\n    {\n      label: \"Quantity remaining\",\n      name: \"qtyRemaining\",\n      type: \"number\",\n      readOnly: true,\n    },\n\n    {\n      type: \"divider\",\n    },\n\n    {\n      label: \"Total Amount Received (exclu. VAT)\",\n      name: \"totalAmountReceivedWithoutVAT\",\n      type: \"text\",\n      readOnly: true,\n    },\n\n    {\n      label: \"Total Amount Received (Inclu. VAT)\",\n      name: \"totalAmountReceivedWithVAT\",\n      type: \"text\",\n      readOnly: true,\n    },\n    {\n      label: \"View recent transactions\",\n      name: \"recentTransactions\",\n      type: \"text\",\n      readOnly: true,\n    },\n\n    {\n      type: \"divider\",\n    },\n\n    {\n      label: \"Unit price without shipping\",\n      name: \"unitPriceWithoutShipping\",\n      type: \"text\",\n      readOnly: true,\n    },\n    {\n      label: \"Unit price with shipping\",\n      name: \"unitPriceWithShipping\",\n      type: \"text\",\n      readOnly: true,\n    },\n    {\n      label: \"Total price with shipping\",\n      name: \"totalPriceWithShipping\",\n      type: \"text\",\n      readOnly: true,\n    },\n    {\n      type: \"divider\",\n    },\n    {\n      label: \"Unit selling price\",\n      name: \"unitSellingPrice\",\n      type: \"text\",\n      required: false,\n    },\n    {\n      label: \"Total selling price\",\n      name: \"totalSellingPrice\",\n      type: \"text\",\n      readOnly: true,\n    },\n\n    {\n      type: \"divider\",\n    },\n\n    {\n      label: \"Percentage profit\",\n      name: \"percentageProfit\",\n      type: \"text\",\n      required: false,\n    },\n    {\n      label: \"Percentage shipping\",\n      name: \"percentageShipping\",\n      type: \"text\",\n      required: false,\n    },\n  ];\n\n  const [openAllTransactionDialog, set_openAllTransactionDialog] =\n    useState(false);\n\n  const temp_calculateQtyRemainingRef = useRef();\n  const temp_calculatePriceWithShippingRef = useRef();\n  const temp_calculateTotalPriceWithShippingRef = useRef();\n  // const temp_calculateSellingPriceRef = useRef();\n  const temp_calculateTotalSellingPriceRef = useRef();\n\n  // calculate remaining quantity\n  useEffect(() => {\n    temp_calculateQtyRemainingRef.current();\n  }, [qty, qtySold]);\n\n  // calculate price with shipping\n  useEffect(() => {\n    temp_calculatePriceWithShippingRef.current();\n  }, [unitPriceWithoutShipping, percentageShipping]);\n\n  // calculate total price with shipping\n  useEffect(() => {\n    temp_calculateTotalPriceWithShippingRef.current();\n  }, [unitPriceWithShipping, /* qtyRemaining */ qty]);\n\n  // calculate selling price\n  /*   useEffect(() => {\n    temp_calculateSellingPriceRef.current();\n  }, [unitPriceWithShipping, percentageProfit]); */\n\n  // calculate total selling price\n  useEffect(() => {\n    temp_calculateTotalSellingPriceRef.current();\n  }, [unitSellingPrice, qty]);\n\n  function calculateQtyRemaining() {\n    let remaining = Number(qty || 0) - Number(qtySold || 0);\n    setState((prev) => {\n      return { ...prev, qtyRemaining: remaining };\n    });\n  }\n\n  temp_calculateQtyRemainingRef.current = calculateQtyRemaining;\n\n  function calculatePriceWithShipping() {\n    //let percentage = Number(percentageShipping || 0) / 100;\n    // percentage = percentage + 1;\n    let priceWithShipping =\n      Number(percentageShipping || 0) * Number(unitPriceWithoutShipping || 0);\n\n    setState((prev) => {\n      return { ...prev, unitPriceWithShipping: priceWithShipping.toFixed(2) };\n    });\n  }\n\n  temp_calculatePriceWithShippingRef.current = calculatePriceWithShipping;\n\n  function calculateTotalPriceWithShipping() {\n    let totalPrice = Number(qty || 0) * Number(unitPriceWithShipping || 0);\n\n    setState((prev) => {\n      return { ...prev, totalPriceWithShipping: totalPrice.toFixed(2) };\n    });\n  }\n\n  temp_calculateTotalPriceWithShippingRef.current =\n    calculateTotalPriceWithShipping;\n\n  /* function calculateSellingPrice() {\n    // let percentage = Number(percentageProfit || 0) / 100;\n    // percentage = percentage + 1;\n    let sellingPrice =\n      Number(percentageProfit || 0) * Number(unitPriceWithShipping || 0);\n\n    setState((prev) => {\n      return { ...prev, unitSellingPrice: sellingPrice.toFixed(2) };\n    });\n  }\n\n  temp_calculateSellingPriceRef.current = calculateSellingPrice; */\n\n  function calculateTotalSellingPrice() {\n    let totalPrice = Number(qty || 0) * Number(unitSellingPrice || 0);\n\n    setState((prev) => {\n      return { ...prev, totalSellingPrice: totalPrice.toFixed(2) };\n    });\n  }\n\n  temp_calculateTotalSellingPriceRef.current = calculateTotalSellingPrice;\n\n  async function generateSkuCode() {\n    if (!model || !color) {\n      enqueueSnackbar(\n        \"Please fill in the fields Model and Color in order to generate the SKU Code.\",\n        {\n          variant: \"warning\",\n        }\n      );\n    } else {\n      dispatch(setLoading(true));\n\n      var documentDocRef = db\n        .collection(\"company\")\n        .doc(companyId)\n        .collection(\"inventory\")\n        .doc(\"documentIndex\");\n\n      db.runTransaction((transaction) => {\n        return transaction.get(documentDocRef).then((sfDoc) => {\n          if (!sfDoc.exists) {\n            // throw \"Document does not exist!\";\n            transaction.update(documentDocRef, {\n              documentIndex: 1,\n            });\n            return 1;\n          }\n\n          var newDocumentNumber = Number(sfDoc.data().documentIndex) + 1;\n          transaction.update(documentDocRef, {\n            documentIndex: newDocumentNumber,\n          });\n          return newDocumentNumber;\n        });\n      })\n        .then(async (documentNumber) => {\n          let modelString = model;\n          let colorString = color;\n\n          // Split the string by spaces\n          const words = modelString.split(\" \");\n\n          // Function to retrieve the first alphabet character from a word\n          const getFirstAlphabet = (word) => word.match(/[a-zA-Z]/)?.[0] || \"\";\n\n          // Initialize an array to hold the first alphabet characters\n          let result = \"\";\n\n          // Iterate through the words to get the first alphabet from the first two words\n          for (let i = 0; i < words.length && result.length < 2; i++) {\n            const firstChar = getFirstAlphabet(words[i]);\n            if (firstChar) {\n              result = result + firstChar;\n            }\n          }\n\n          const lastCharacter = colorString.slice(-1); // or str.charAt(str.length - 1)\n          const formattedDocNumber = Number(documentNumber)\n            .toString()\n            .padStart(3, \"0\");\n          let skuCode = `${result.toUpperCase()}${formattedDocNumber}${lastCharacter.toUpperCase()}`;\n          setState((prev) => {\n            return { ...prev, sku: skuCode };\n          });\n\n          dispatch(setLoading(false));\n        })\n        .catch((err) => {\n          enqueueSnackbar(\n            `Error occured while generating sku code : ${err?.message}`,\n            { variant: \"error\" }\n          );\n          dispatch(setLoading(false));\n        });\n    }\n  }\n\n  async function checkSkuCode() {\n    dispatch(setLoading(true));\n\n    await db\n      .collection(\"company\")\n      .doc(companyId)\n      .collection(\"inventory\")\n      .where(\"sku\", \"==\", sku)\n      .get()\n      .then((result) => {\n        if (result?.docs?.length > 0) {\n          enqueueSnackbar(\n            \"The SKU code you entered is already present in the database.\",\n            { variant: \"error\" }\n          );\n          dispatch(setLoading(false));\n        } else {\n          enqueueSnackbar(\"SKU code is valid and is not present in database.\");\n          dispatch(setLoading(false));\n        }\n      });\n  }\n\n  return (\n    <Grid container spacing={3}>\n      {fields &&\n        fields?.map((field) => {\n          if (field?.type === \"divider\") {\n            return (\n              <Grid item xs={12} md={12}>\n                <Divider />\n              </Grid>\n            );\n          } else {\n            return (\n              <Grid item xs={12} md={field?.name === \"sku\" ? 5 : 4}>\n                {field?.name === \"recentTransactions\" ? (\n                  <>\n                    {allInventoryItemTransactions &&\n                    allInventoryItemTransactions?.length > 0 ? (\n                      <Tooltip title=\"View all transactions made for this item.\">\n                        <Button\n                          variant=\"contained\"\n                          color=\"info\"\n                          onClick={() => set_openAllTransactionDialog(true)}\n                          fullWidth\n                        >\n                          View all recent transactions\n                        </Button>\n                      </Tooltip>\n                    ) : (\n                      <></>\n                    )}\n                  </>\n                ) : field?.name === \"totalAmountReceivedWithoutVAT\" ||\n                  field?.name === \"totalAmountReceivedWithVAT\" ? (\n                  <Stack\n                    spacing={2}\n                    direction={\"row\"}\n                    alignItems={\"center\"}\n                    sx={{ whiteSpace: \"nowrap\" }}\n                  >\n                    <TextField\n                      variant=\"outlined\"\n                      size=\"small\"\n                      required={field?.required || false}\n                      fullWidth\n                      name={field?.name}\n                      label={field?.label}\n                      type=\"text\"\n                      id={field?.name}\n                      value={state[field?.name] || \"0\"}\n                      onChange={(event) => {\n                        setState((prev) => {\n                          return { ...prev, [field?.name]: event.target.value };\n                        });\n                      }}\n                      readOnly={field?.readOnly}\n                      disabled={dialogType === \"view\"}\n                    />\n\n                    <Button\n                      variant=\"contained\"\n                      color=\"warning\"\n                      startIcon={<ArrowBackIcon />}\n                      onClick={() => {\n                        setOpenSetUpAmountReceivedDialog({\n                          open: true,\n                          type: field?.name,\n                          typeLabel: field?.label,\n                          companyId: companyId,\n                          inventoryId: id,\n                        });\n                      }}\n                    >\n                      {dialogType === \"view\" ? \"View\" : \"Set up\"}\n                    </Button>\n                  </Stack>\n                ) : field?.name === \"qtySold\" ||\n                  field?.name === \"qty\" ||\n                  field?.name === \"qtyRemaining\" ? (\n                  <Stack\n                    spacing={2}\n                    direction={\"row\"}\n                    alignItems={\"center\"}\n                    sx={{ whiteSpace: \"nowrap\" }}\n                  >\n                    <TextField\n                      variant=\"outlined\"\n                      size=\"small\"\n                      required={field?.required || false}\n                      fullWidth\n                      name={field?.name}\n                      label={field?.label}\n                      type=\"text\"\n                      id={field?.name}\n                      value={state[field?.name] || \"0\"}\n                      onChange={(event) => {\n                        setState((prev) => {\n                          return { ...prev, [field?.name]: event.target.value };\n                        });\n                      }}\n                      readOnly={field?.readOnly}\n                      disabled={dialogType === \"view\"}\n                    />\n                  </Stack>\n                ) : field?.name === \"sku\" ? (\n                  <Stack\n                    spacing={2}\n                    direction={\"row\"}\n                    alignItems={\"center\"}\n                    sx={{ whiteSpace: \"nowrap\" }}\n                  >\n                    <TextField\n                      variant=\"outlined\"\n                      size=\"small\"\n                      required={field?.required || false}\n                      fullWidth\n                      name={field?.name}\n                      label={field?.label}\n                      type=\"text\"\n                      id={field?.name}\n                      value={state[field?.name] || \"\"}\n                      onChange={(event) => {\n                        setState((prev) => {\n                          return { ...prev, [field?.name]: event.target.value };\n                        });\n                      }}\n                      readOnly={field?.readOnly}\n                      disabled={dialogType === \"view\"}\n                    />\n\n                    <Tooltip title=\"Generate SKU code based on the model and colour you entered.\">\n                      <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        onClick={() => generateSkuCode()}\n                        sx={{ width: \"150px\" }}\n                        disabled={sku || dialogType === \"view\"}\n                      >\n                        Auto-SKU\n                      </Button>\n                    </Tooltip>\n\n                    <Tooltip title=\"Check if the SKU code you entered is already present in the database.\">\n                      <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        onClick={() => checkSkuCode()}\n                        sx={{ width: \"150px\" }}\n                        disabled={!sku || dialogType === \"view\"}\n                      >\n                        Check-SKU\n                      </Button>\n                    </Tooltip>\n                  </Stack>\n                ) : field?.type === \"text\" || field?.type === \"number\" ? (\n                  <TextField\n                    variant=\"outlined\"\n                    size=\"small\"\n                    required={field?.required || false}\n                    fullWidth\n                    name={field?.name}\n                    label={field?.label}\n                    type=\"text\"\n                    id={field?.name}\n                    value={state[field?.name] || \"\"}\n                    onChange={(event) => {\n                      if (field?.name === \"unitSellingPrice\") {\n                        let percentageProfitValue =\n                          Number(event.target.value || 0) /\n                          Number(unitPriceWithShipping || 0);\n\n                        setState((prev) => {\n                          return {\n                            ...prev,\n                            unitSellingPrice: event.target.value,\n                            percentageProfit: percentageProfitValue.toFixed(2),\n                          };\n                        });\n                      } else if (field?.name === \"percentageProfit\") {\n                        let sellingPrice =\n                          Number(event.target.value || 0) *\n                          Number(unitPriceWithShipping || 0);\n\n                        setState((prev) => {\n                          return {\n                            ...prev,\n                            percentageProfit: event.target.value,\n                            unitSellingPrice: sellingPrice.toFixed(2),\n                          };\n                        });\n                      } else {\n                        setState((prev) => {\n                          return { ...prev, [field?.name]: event.target.value };\n                        });\n                      }\n                    }}\n                    readOnly={field?.readOnly}\n                    disabled={dialogType === \"view\"}\n                  />\n                ) : field?.type === \"autocomplete\" ? (\n                  <Autocomplete\n                    size=\"small\"\n                    fullWidth\n                    value={state[field?.name] || null}\n                    onChange={(e, value, reason) => {\n                      if (\n                        reason !== \"removeOption\" &&\n                        reason !== \"clear\" &&\n                        value\n                      ) {\n                        setState((prev) => {\n                          return { ...prev, [field?.name]: value };\n                        });\n                      } else {\n                        setState((prev) => {\n                          return { ...prev, [field?.name]: null };\n                        });\n                      }\n                    }}\n                    options={categoryList || []}\n                    renderInput={(params) => (\n                      <TextField\n                        {...params}\n                        variant=\"outlined\"\n                        label={field?.label}\n                        fullWidth\n                        disabled={dialogType === \"view\"}\n                      />\n                    )}\n                    getOptionLabel={(option) => option?.title}\n                    disabled={dialogType === \"view\"}\n                  />\n                ) : (\n                  <></>\n                )}\n              </Grid>\n            );\n          }\n        })}\n\n      <Grid item xs={12} md={12}>\n        <Divider />\n      </Grid>\n\n      <ManageStockHistory\n        stockHistory={stockHistory}\n        state={state}\n        setState={setState}\n        dialogType={dialogType}\n      />\n\n      {openAllTransactionDialog ? (\n        <ViewAllSoldTransactionsDialog\n          open={openAllTransactionDialog}\n          setOpen={set_openAllTransactionDialog}\n          allTransactions={allInventoryItemTransactions}\n        />\n      ) : (\n        <></>\n      )}\n\n      {openSetUpAmountReceivedDialog ? (\n        <SetUpAmountReceivedDialog\n          data={openSetUpAmountReceivedDialog}\n          setData={setOpenSetUpAmountReceivedDialog}\n          dialogType={dialogType}\n          fetchData={fetchData}\n          setState={setState}\n        />\n      ) : (\n        <></>\n      )}\n    </Grid>\n  );\n}\n","import {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  Stack,\n  Divider,\n} from \"@mui/material\";\n\nimport { useDispatch } from \"react-redux\";\nimport { setLoading } from \"../../../../features/globalSlice\";\nimport { useSnackbar } from \"notistack\";\nimport ItemForm from \"./inventory-item-form/ItemForm\";\nimport db from \"src/firebase\";\nimport { useEffect, useRef, useState } from \"react\";\n\nfunction CreateOrUpdateInventoryDialog({\n  dialogType,\n  openDialog,\n  handleCloseDialog,\n  state,\n  setState,\n  fetchData,\n  companyId,\n}) {\n  const {\n    id,\n    sku,\n    model,\n    category,\n    size,\n    materials,\n    color,\n    stockHistory,\n    qty,\n    qtySold,\n    qtyRemaining,\n    unitPriceWithoutShipping,\n    unitPriceWithShipping,\n    totalPriceWithShipping,\n    unitSellingPrice,\n    totalSellingPrice,\n    companyName,\n    percentageProfit,\n    percentageShipping,\n  } = state;\n  const { enqueueSnackbar } = useSnackbar();\n  const dispatch = useDispatch();\n\n  const [categoryList, setCategoryList] = useState([]);\n\n  const temp_fetchCategoryRef = useRef();\n\n  useEffect(() => {\n    temp_fetchCategoryRef.current();\n  }, []);\n\n  async function fetchCategory() {\n    if (openDialog) {\n      dispatch(setLoading(true));\n\n      await db\n        .collection(\"company\")\n        .doc(companyId)\n        .collection(\"category\")\n        .orderBy(\"title\")\n        .get()\n        .then((result) => {\n          if (result?.docs?.length > 0) {\n            const itemList = result.docs.map((doc) => ({\n              id: doc.id,\n              data: { ...doc.data() },\n              title: doc?.data()?.title || \"\",\n            }));\n\n            setCategoryList(itemList);\n\n            dispatch(setLoading(false));\n          } else {\n            setCategoryList([]);\n\n            dispatch(setLoading(false));\n          }\n        })\n        .catch((error) => {\n          enqueueSnackbar(\n            `Error occured while fetching categories: ${error?.message}`,\n            { variant: \"error\" }\n          );\n          dispatch(setLoading(false));\n        });\n    }\n  }\n\n  temp_fetchCategoryRef.current = fetchCategory;\n\n  const submitChanges = (e) => {\n    e.preventDefault();\n    dispatch(setLoading(true));\n    if (!sku) {\n      enqueueSnackbar(\"Please provide a SKU code\", { variant: \"error\" });\n      dispatch(setLoading(false));\n    } else {\n      if (dialogType === \"add\") {\n        performAdd();\n      } else if (dialogType === \"update\") {\n        performUpdate();\n      }\n    }\n  };\n\n  async function performAdd() {\n    dispatch(setLoading(true));\n\n    await db\n      .collection(\"company\")\n      .doc(companyId)\n      .collection(\"inventory\")\n      .add({\n        sku: sku || \"\",\n        category: category || null,\n        model: model || \"\",\n        size: size || \"\",\n        materials: materials || \"\",\n        color: color || \"\",\n        stockHistory: stockHistory || [],\n        qty: qty || \"\",\n        qtySold: qtySold || \"\",\n        qtyRemaining: qtyRemaining || \"\",\n        unitPriceWithoutShipping: unitPriceWithoutShipping || \"\",\n        unitPriceWithShipping: unitPriceWithShipping || \"\",\n        totalPriceWithShipping: totalPriceWithShipping || \"\",\n        unitSellingPrice: unitSellingPrice || \"\",\n        totalSellingPrice: totalSellingPrice || \"\",\n        companyName: companyName || \"\",\n        percentageProfit: percentageProfit || \"\",\n        percentageShipping: percentageShipping || \"\",\n      })\n      .then(async () => {\n        enqueueSnackbar(\"Category added successfully\");\n        await fetchData();\n        handleCloseDialog();\n        dispatch(setLoading(false));\n      })\n      .catch((error) => {\n        enqueueSnackbar(\n          `Error occured while adding category: ${error?.message}`,\n          { variant: \"error\" }\n        );\n        dispatch(setLoading(false));\n      });\n  }\n\n  async function performUpdate() {\n    dispatch(setLoading(true));\n\n    await db\n      .collection(\"company\")\n      .doc(companyId)\n      .collection(\"inventory\")\n      .doc(id)\n      .set(\n        {\n          id: id,\n          sku: sku || \"\",\n          category: category || null,\n          model: model || \"\",\n          size: size || \"\",\n          materials: materials || \"\",\n          color: color || \"\",\n          stockHistory: stockHistory || [],\n          qty: qty || \"\",\n          qtySold: qtySold || \"\",\n          qtyRemaining: qtyRemaining || \"\",\n          unitPriceWithoutShipping: unitPriceWithoutShipping || \"\",\n          unitPriceWithShipping: unitPriceWithShipping || \"\",\n          totalPriceWithShipping: totalPriceWithShipping || \"\",\n          unitSellingPrice: unitSellingPrice || \"\",\n          totalSellingPrice: totalSellingPrice || \"\",\n          companyName: companyName || \"\",\n          percentageProfit: percentageProfit || \"\",\n          percentageShipping: percentageShipping || \"\",\n        },\n        { merge: true }\n      )\n      .then(async () => {\n        enqueueSnackbar(\"Category updated successfully\");\n        await fetchData();\n        handleCloseDialog();\n        dispatch(setLoading(false));\n      })\n      .catch((error) => {\n        enqueueSnackbar(\n          `Error occured while updating category: ${error?.message}`,\n          { variant: \"error\" }\n        );\n        dispatch(setLoading(false));\n      });\n  }\n\n  return (\n    <>\n      <Dialog\n        open={openDialog}\n        // onClose={handleCloseDialog}\n        maxWidth={\"lg\"}\n        fullWidth\n      >\n        <DialogTitle id=\"alert-dialog-title\">\n          {dialogType === \"view\"\n            ? \"View item\"\n            : dialogType === \"add\"\n            ? \"Create item\"\n            : \"Update item\"}\n        </DialogTitle>\n        <DialogContent>\n          <Divider />\n          <br />\n          <ItemForm\n            state={state}\n            setState={setState}\n            categoryList={categoryList}\n            companyId={companyId}\n            dialogType={dialogType}\n            fetchData={fetchData}\n          />\n        </DialogContent>\n        <DialogActions>\n          <Stack spacing={2} direction=\"row\">\n            {dialogType !== \"view\" ? (\n              <Button\n                onClick={(e) => submitChanges(e)}\n                color=\"primary\"\n                variant=\"contained\"\n              >\n                {dialogType && dialogType === \"add\" ? \"Add\" : \"Update\"}\n              </Button>\n            ) : (\n              <></>\n            )}\n\n            <Button\n              onClick={() => handleCloseDialog()}\n              color=\"error\"\n              variant=\"outlined\"\n            >\n              Cancel\n            </Button>\n          </Stack>\n        </DialogActions>\n      </Dialog>\n    </>\n  );\n}\n\nexport default CreateOrUpdateInventoryDialog;\n","import { Grid } from \"@mui/material\";\nimport { useSnackbar } from \"notistack\";\nimport { lazy, Suspense, useEffect, useRef, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectDocument } from \"src/features/documentSlice\";\nimport { setLoading } from \"src/features/globalSlice\";\nimport db from \"src/firebase\";\nimport CreateOrUpdateInventoryDialog from \"./CreateOrUpdateInventoryDialog\";\n\nconst FETCH_LIMIT = 50;\n\nconst TableCRUDTemplate = lazy(() =>\n  import(\"src/components/table/TableCRUDTemplate\")\n);\n\nexport default function ManageInventory() {\n  const dispatch = useDispatch();\n\n  const { enqueueSnackbar } = useSnackbar();\n\n  const { companyDetails } = useSelector(selectDocument);\n\n  const headers = [\n    { id: \"list\", label: \"List\" },\n    { id: \"view\", label: \"View\" },\n    { id: \"update\", label: \"Update\" },\n    { id: \"delete\", label: \"Delete\" },\n    { id: \"sku\", label: \"SKU\" },\n    { id: \"category\", label: \"Category\" },\n    { id: \"model\", label: \"Model\" },\n    { id: \"size\", label: \"Size\" },\n    { id: \"materials\", label: \"Material\" },\n    { id: \"color\", label: \"Color\" },\n    // { id: \"stockHistory\", label: \"Stock history\" },\n    { id: \"qty\", label: \"Quantity\" },\n    { id: \"qtySold\", label: \"Quantity Sold\" },\n    { id: \"qtyRemaining\", label: \"Quantity Remaining\" },\n    { id: \"unitPriceWithoutShipping\", label: \"Unit price without shipping\" },\n    { id: \"unitPriceWithShipping\", label: \"Unit price with shipping\" },\n    { id: \"totalPriceWithShipping\", label: \"Total price with shipping\" },\n    { id: \"unitSellingPrice\", label: \"Unit selling price\" },\n    { id: \"totalSellingPrice\", label: \"Total Selling price\" },\n    { id: \"companyName\", label: \"Company\" },\n    { id: \"percentageProfit\", label: \"% Profit\" },\n    { id: \"percentageShipping\", label: \"% Shipping\" },\n  ];\n\n  const [openDialog, setOpenDialog] = useState(false);\n\n  const [dialogType, setDialogType] = useState(\"\");\n\n  const [itemDetail, setItemDetail] = useState({\n    sku: \"\",\n    model: \"\",\n    category: null,\n    size: \"\",\n    materials: \"\",\n    color: \"\",\n    stockHistory: [],\n    qty: \"\",\n    qtySold: \"\",\n    qtyRemaining: \"\",\n    unitPriceWithoutShipping: \"\",\n    unitPriceWithShipping: \"\",\n    totalPriceWithShipping: \"\",\n    unitSellingPrice: \"\",\n    totalSellingPrice: \"\",\n    companyName: \"\",\n    percentageProfit: \"\",\n    percentageShipping: \"\",\n    allInventoryItemTransactions: [],\n  });\n\n  const [list, setList] = useState([]);\n\n  const [lastDoc, setLastDoc] = useState(null); // Keep track of the last document for pagination\n\n  const [hasMore, setHasMore] = useState(true); // Check if there are more documents\n\n  const temp_fetchInventoryRef = useRef();\n\n  useEffect(() => {\n    temp_fetchInventoryRef.current();\n  }, []);\n\n  const fetchInventory = async () => {\n    dispatch(setLoading(true));\n\n    await db\n      .collection(\"company\")\n      .doc(companyDetails?.id)\n      .collection(\"inventory\")\n      .orderBy(\"model\")\n      .limit(FETCH_LIMIT)\n      .get()\n      .then((result) => {\n        if (result?.docs?.length > 0) {\n          const lastVisible = result?.docs[result?.docs.length - 1];\n          setLastDoc(lastVisible); // Save the last document for pagination\n\n          let itemList = [];\n          result.docs.forEach((doc) => {\n            if (doc?.id !== \"documentIndex\") {\n              itemList.push({\n                id: doc.id,\n                data: { ...doc.data() },\n                sku: doc.data()?.sku || \"\",\n                category: JSON.stringify(doc.data()?.category || null),\n                model: doc.data()?.model || \"\",\n                size: doc.data()?.size || \"\",\n                materials: doc.data()?.materials || \"\",\n                color: doc.data()?.color || \"\",\n                stockHistory: doc.data()?.stockHistory || [],\n                qty: doc.data()?.qty || \"\",\n                qtySold: doc.data()?.qtySold || \"\",\n                qtyRemaining: doc.data()?.qtyRemaining || \"\",\n                unitPriceWithoutShipping:\n                  doc.data()?.unitPriceWithoutShipping || \"\",\n                unitPriceWithShipping: doc.data()?.unitPriceWithShipping || \"\",\n                totalPriceWithShipping:\n                  doc.data()?.totalPriceWithShipping || \"\",\n                unitSellingPrice: doc.data()?.unitSellingPrice || \"\",\n                totalSellingPrice: doc.data()?.totalSellingPrice || \"\",\n                companyName: doc.data()?.companyName || \"\",\n                percentageProfit: doc.data()?.percentageProfit || \"\",\n                percentageShipping: doc.data()?.percentageShipping || \"\",\n                allInventoryItemTransactions:\n                  doc?.data()?.allInventoryItemTransactions || [],\n                totalAmountReceivedWithoutVAT:\n                  doc.data()?.totalAmountReceivedWithoutVAT || \"\",\n                totalAmountReceivedWithVAT:\n                  doc.data()?.totalAmountReceivedWithVAT || \"\",\n              });\n            }\n          });\n\n          setList(itemList);\n\n          if (result?.docs?.length === FETCH_LIMIT) {\n            setHasMore(true);\n          }\n\n          dispatch(setLoading(false));\n        } else {\n          setHasMore(false);\n          setList([]);\n          setLastDoc(null);\n\n          dispatch(setLoading(false));\n        }\n      })\n      .catch((error) => {\n        enqueueSnackbar(\n          `Error occured while fetching inventory items: ${error?.message}`,\n          { variant: \"error\" }\n        );\n        dispatch(setLoading(false));\n      });\n  };\n\n  temp_fetchInventoryRef.current = fetchInventory;\n\n  const fetchMoreItems = async () => {\n    if (!lastDoc) return; // Don't fetch if there's no last document\n\n    dispatch(setLoading(true));\n\n    await db\n      .collection(\"company\")\n      .doc(companyDetails?.id)\n      .collection(\"inventory\")\n      .orderBy(\"model\")\n      .startAfter(lastDoc)\n      .limit(FETCH_LIMIT)\n      .get()\n      .then((result) => {\n        if (result?.docs?.length > 0) {\n          const lastVisible = result?.docs[result?.docs.length - 1];\n          setLastDoc(lastVisible); // Save the last document for pagination\n\n          let itemList = [];\n          result.docs.forEach((doc) => {\n            if (doc?.id !== \"documentIndex\") {\n              itemList.push({\n                id: doc.id,\n                data: { ...doc.data() },\n                sku: doc.data()?.sku || \"\",\n                category: doc.data()?.category || null,\n                model: doc.data()?.model || \"\",\n                size: doc.data()?.size || \"\",\n                materials: doc.data()?.materials || \"\",\n                color: doc.data()?.color || \"\",\n                stockHistory: doc.data()?.stockHistory || [],\n                qty: doc.data()?.qty || \"\",\n                qtySold: doc.data()?.qtySold || \"\",\n                qtyRemaining: doc.data()?.qtyRemaining || \"\",\n                unitPriceWithoutShipping:\n                  doc.data()?.unitPriceWithoutShipping || \"\",\n                unitPriceWithShipping: doc.data()?.unitPriceWithShipping || \"\",\n                totalPriceWithShipping:\n                  doc.data()?.totalPriceWithShipping || \"\",\n                unitSellingPrice: doc.data()?.unitSellingPrice || \"\",\n                totalSellingPrice: doc.data()?.totalSellingPrice || \"\",\n                companyName: doc.data()?.companyName || \"\",\n                percentageProfit: doc.data()?.percentageProfit || \"\",\n                percentageShipping: doc.data()?.percentageShipping || \"\",\n                allInventoryItemTransactions:\n                  doc?.data()?.allInventoryItemTransactions || [],\n                totalAmountReceivedWithoutVAT:\n                  doc.data()?.totalAmountReceivedWithoutVAT || \"\",\n                totalAmountReceivedWithVAT:\n                  doc.data()?.totalAmountReceivedWithVAT || \"\",\n              });\n            }\n          });\n\n          setList((prevProducts) => [...prevProducts, ...itemList]);\n\n          if (result?.docs?.length === FETCH_LIMIT) {\n            setHasMore(true);\n          } else {\n            setHasMore(false);\n          }\n\n          dispatch(setLoading(false));\n        } else {\n          dispatch(setLoading(false));\n        }\n      })\n      .catch((error) => {\n        enqueueSnackbar(\n          `Error occured while fetching inventory items: ${error?.message}`,\n          { variant: \"error\" }\n        );\n        dispatch(setLoading(false));\n      });\n  };\n\n  const addBtnFunc = () => {\n    setDialogType(\"add\");\n    setOpenDialog(true);\n    setItemDetail({\n      ...itemDetail,\n      id: \"\",\n      sku: \"\",\n      category: null,\n      model: \"\",\n      size: \"\",\n      materials: \"\",\n      color: \"\",\n      stockHistory: [],\n      qty: \"\",\n      qtySold: \"\",\n      qtyRemaining: \"\",\n      unitPriceWithoutShipping: \"\",\n      unitPriceWithShipping: \"\",\n      totalPriceWithShipping: \"\",\n      unitSellingPrice: \"\",\n      totalSellingPrice: \"\",\n      companyName: \"\",\n      percentageProfit: \"\",\n      percentageShipping: \"\",\n      allInventoryItemTransactions: [],\n      totalAmountReceivedWithoutVAT: \"\",\n      totalAmountReceivedWithVAT: \"\",\n    });\n  };\n\n  const updateBtnFunc = (id, data) => {\n    setDialogType(\"update\");\n    setOpenDialog(true);\n    setItemDetail({\n      id: id,\n      sku: data?.sku || \"\",\n      category: data?.category || null,\n      model: data?.model || \"\",\n      size: data?.size || \"\",\n      materials: data?.materials || \"\",\n      color: data?.color || \"\",\n      stockHistory: data?.stockHistory || [],\n      qty: data?.qty || \"\",\n      qtySold: data?.qtySold || \"\",\n      qtyRemaining: data?.qtyRemaining || \"\",\n      unitPriceWithoutShipping: data?.unitPriceWithoutShipping || \"\",\n      unitPriceWithShipping: data?.unitPriceWithShipping || \"\",\n      totalPriceWithShipping: data?.totalPriceWithShipping || \"\",\n      unitSellingPrice: data?.unitSellingPrice || \"\",\n      totalSellingPrice: data?.totalSellingPrice || \"\",\n      companyName: data?.companyName || \"\",\n      percentageProfit: data?.percentageProfit || \"\",\n      percentageShipping: data?.percentageShipping || \"\",\n      allInventoryItemTransactions: data?.allInventoryItemTransactions || [],\n      totalAmountReceivedWithoutVAT: data?.totalAmountReceivedWithoutVAT || \"\",\n      totalAmountReceivedWithVAT: data?.totalAmountReceivedWithVAT || \"\",\n    });\n  };\n\n  const deleteBtnFunc = async (id) => {\n    dispatch(setLoading(true));\n    await db\n      .collection(\"company\")\n      .doc(companyDetails?.id)\n      .collection(\"inventory\")\n      .doc(id)\n      .delete()\n      .then(async () => {\n        fetchInventory();\n        dispatch(setLoading(false));\n      })\n      .catch((err) => {\n        enqueueSnackbar(\n          `Error occured while deleting a item: ${err?.message}`,\n          { variant: \"error\" }\n        );\n        dispatch(setLoading(false));\n      });\n  };\n\n  function handleCloseDialog() {\n    setItemDetail({\n      id: \"\",\n      sku: \"\",\n      category: null,\n      model: \"\",\n      size: \"\",\n      materials: \"\",\n      color: \"\",\n      stockHistory: [],\n      qty: \"\",\n      qtySold: \"\",\n      qtyRemaining: \"\",\n      unitPriceWithoutShipping: \"\",\n      unitPriceWithShipping: \"\",\n      totalPriceWithShipping: \"\",\n      unitSellingPrice: \"\",\n      totalSellingPrice: \"\",\n      companyName: \"\",\n      percentageProfit: \"\",\n      percentageShipping: \"\",\n      allInventoryItemTransactions: [],\n      totalAmountReceivedWithoutVAT: \"\",\n      totalAmountReceivedWithVAT: \"\",\n    });\n\n    setOpenDialog(false);\n\n    setDialogType(\"\");\n  }\n\n  const viewBtnFunc = (id, data) => {\n    setDialogType(\"view\");\n    setOpenDialog(true);\n    setItemDetail({\n      ...data,\n      id: id,\n    });\n  };\n\n  return (\n    <>\n      <Grid container spacing={3}>\n        <Grid item xs={12} md={12}>\n          <Grid item xs={12} md={12}>\n            <Suspense fallback={<p>Loading...</p>}>\n              <TableCRUDTemplate\n                companyId={companyDetails?.id}\n                type=\"inventory\"\n                headers={headers}\n                aCollection={list}\n                addBtnDisplay={true}\n                addBtnLabel={\"Create an item\"}\n                addBtnFunc={addBtnFunc}\n                openDialog={openDialog}\n                handleCloseDialog={handleCloseDialog}\n                emptyColMsg={\n                  \"Sorry, not a single inventory item has been created yet. Please create a inventory item.\"\n                }\n                viewOption={true}\n                viewBtnFunc={viewBtnFunc}\n                updateBtnDisplay={true}\n                deleteBtnDisplay={true}\n                updateBtnFunc={updateBtnFunc}\n                deleteBtnFunc={deleteBtnFunc}\n              />\n            </Suspense>\n          </Grid>\n        </Grid>\n      </Grid>\n\n      {openDialog ? (\n        <CreateOrUpdateInventoryDialog\n          dialogType={dialogType}\n          openDialog={openDialog}\n          handleCloseDialog={handleCloseDialog}\n          state={itemDetail}\n          setState={setItemDetail}\n          fetchData={fetchInventory}\n          companyId={companyDetails?.id}\n        />\n      ) : (\n        <></>\n      )}\n    </>\n  );\n}\n","import {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  Stack,\n  Divider,\n  Grid,\n  TextField,\n} from \"@mui/material\";\n\nimport { useDispatch } from \"react-redux\";\nimport { setLoading } from \"../../../../features/globalSlice\";\nimport { useSnackbar } from \"notistack\";\nimport db from \"src/firebase\";\n\nfunction CreateOrUpdateCategoryDialog({\n  dialogType,\n  openDialog,\n  handleCloseDialog,\n  state,\n  setState,\n  fetchData,\n  companyId,\n}) {\n  const { id, title } = state;\n  const { enqueueSnackbar } = useSnackbar();\n  const dispatch = useDispatch();\n\n  const submitChanges = (e) => {\n    e.preventDefault();\n    dispatch(setLoading(true));\n    if (!title) {\n      enqueueSnackbar(\"Please provide a title\", { variant: \"error\" });\n      dispatch(setLoading(false));\n    } else {\n      if (dialogType === \"add\") {\n        performAdd();\n      } else if (dialogType === \"update\") {\n        performUpdate();\n      }\n    }\n  };\n\n  async function performAdd() {\n    dispatch(setLoading(true));\n\n    await db\n      .collection(\"company\")\n      .doc(companyId)\n      .collection(\"category\")\n      .add({ title: title })\n      .then(async () => {\n        enqueueSnackbar(\"Category added successfully\");\n        await fetchData();\n        handleCloseDialog();\n        dispatch(setLoading(false));\n      })\n      .catch((error) => {\n        enqueueSnackbar(\n          `Error occured while adding category: ${error?.message}`,\n          { variant: \"error\" }\n        );\n        dispatch(setLoading(false));\n      });\n  }\n\n  async function performUpdate() {\n    dispatch(setLoading(true));\n\n    await db\n      .collection(\"company\")\n      .doc(companyId)\n      .collection(\"category\")\n      .doc(id)\n      .set({ title: title }, { merge: true })\n      .then(async () => {\n        enqueueSnackbar(\"Category updated successfully\");\n        await fetchData();\n        handleCloseDialog();\n        dispatch(setLoading(false));\n      })\n      .catch((error) => {\n        enqueueSnackbar(\n          `Error occured while updating category: ${error?.message}`,\n          { variant: \"error\" }\n        );\n        dispatch(setLoading(false));\n      });\n  }\n\n  return (\n    <>\n      <Dialog\n        open={openDialog}\n        onClose={handleCloseDialog}\n        maxWidth={\"sm\"}\n        fullWidth\n      >\n        <DialogTitle id=\"alert-dialog-title\">\n          {dialogType && dialogType === \"add\" ? \"Create item\" : \"Update item\"}\n        </DialogTitle>\n        <DialogContent>\n          <Divider />\n          <br />\n          <Grid container spacing={3}>\n            <Grid item xs={12} md={12}>\n              <TextField\n                variant=\"outlined\"\n                size=\"small\"\n                required\n                fullWidth\n                name=\"title\"\n                label=\"Title\"\n                type=\"text\"\n                id={\"title\"}\n                value={title || \"\"}\n                onChange={(event) => {\n                  setState((prev) => {\n                    return { ...prev, title: event.target.value };\n                  });\n                }}\n              />\n            </Grid>\n          </Grid>\n        </DialogContent>\n        <DialogActions>\n          <Stack spacing={2} direction=\"row\">\n            <Button\n              onClick={(e) => submitChanges(e)}\n              color=\"primary\"\n              variant=\"contained\"\n            >\n              {dialogType && dialogType === \"add\" ? \"Add\" : \"Update\"}\n            </Button>\n\n            <Button\n              onClick={() => handleCloseDialog()}\n              color=\"error\"\n              variant=\"outlined\"\n            >\n              Cancel\n            </Button>\n          </Stack>\n        </DialogActions>\n      </Dialog>\n    </>\n  );\n}\n\nexport default CreateOrUpdateCategoryDialog;\n","import { Grid } from \"@mui/material\";\nimport { useSnackbar } from \"notistack\";\nimport { lazy, Suspense, useEffect, useRef, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectDocument } from \"src/features/documentSlice\";\nimport { setLoading } from \"src/features/globalSlice\";\nimport db from \"src/firebase\";\nimport CreateOrUpdateCategoryDialog from \"./CreateOrUpdateCategoryDialog\";\n\nconst TableCRUDTemplate = lazy(() =>\n  import(\"src/components/table/TableCRUDTemplate\")\n);\n\nexport default function ManageCategory() {\n  const dispatch = useDispatch();\n\n  const { enqueueSnackbar } = useSnackbar();\n\n  const { companyDetails } = useSelector(selectDocument);\n\n  const headers = [\n    { id: \"list\", label: \"List\" },\n    { id: \"update\", label: \"Update\" },\n    { id: \"delete\", label: \"Delete\" },\n    { id: \"title\", label: \"Title\" },\n  ];\n\n  const [openDialog, setOpenDialog] = useState(false);\n\n  const [dialogType, setDialogType] = useState(\"\");\n\n  const [categoryDetail, setCategoryDetail] = useState({\n    title: \"\",\n  });\n\n  const [list, setList] = useState([]);\n\n  const temp_fetchCategoryRef = useRef();\n\n  useEffect(() => {\n    temp_fetchCategoryRef.current();\n  }, []);\n\n  const fetchCategory = async () => {\n    dispatch(setLoading(true));\n\n    await db\n      .collection(\"company\")\n      .doc(companyDetails?.id)\n      .collection(\"category\")\n      .orderBy(\"title\")\n      .get()\n      .then((result) => {\n        if (result?.docs?.length > 0) {\n          const itemList = result.docs.map((doc) => ({\n            id: doc.id,\n            data: { ...doc.data() },\n            title: doc?.data()?.title || \"\",\n          }));\n\n          setList(itemList);\n\n          dispatch(setLoading(false));\n        } else {\n          setList([]);\n\n          dispatch(setLoading(false));\n        }\n      })\n      .catch((error) => {\n        enqueueSnackbar(\n          `Error occured while fetching categories: ${error?.message}`,\n          { variant: \"error\" }\n        );\n        dispatch(setLoading(false));\n      });\n  };\n\n  temp_fetchCategoryRef.current = fetchCategory;\n\n  const addBtnFunc = () => {\n    setDialogType(\"add\");\n    setOpenDialog(true);\n    setCategoryDetail({\n      ...categoryDetail,\n      id: \"\",\n      title: \"\",\n    });\n  };\n\n  const updateBtnFunc = (id, data) => {\n    setDialogType(\"update\");\n    setOpenDialog(true);\n    setCategoryDetail({\n      id: id,\n      title: data?.title || \"\",\n    });\n  };\n\n  const deleteBtnFunc = async (id) => {\n    dispatch(setLoading(true));\n    await db\n      .collection(\"company\")\n      .doc(companyDetails?.id)\n      .collection(\"category\")\n      .doc(id)\n      .delete()\n      .then(async () => {\n        fetchCategory();\n        dispatch(setLoading(false));\n      })\n      .catch((err) => {\n        enqueueSnackbar(\n          `Error occured while deleting a category: ${err?.message}`,\n          { variant: \"error\" }\n        );\n        dispatch(setLoading(false));\n      });\n  };\n\n  function handleCloseDialog() {\n    setCategoryDetail({\n      id: \"\",\n      category: \"\",\n    });\n\n    setOpenDialog(false);\n\n    setDialogType(\"\");\n  }\n\n  return (\n    <>\n      <Grid container spacing={3}>\n        <Grid item xs={12} md={12}>\n          <Grid item xs={12} md={12}>\n            <Suspense fallback={<p>Loading...</p>}>\n              <TableCRUDTemplate\n                companyId={companyDetails?.id}\n                type=\"category\"\n                headers={headers}\n                aCollection={list}\n                addBtnDisplay={true}\n                addBtnLabel={\"Create an category\"}\n                addBtnFunc={addBtnFunc}\n                openDialog={openDialog}\n                handleCloseDialog={handleCloseDialog}\n                emptyColMsg={\n                  \"Sorry, not a single category has been created yet. Please create a category.\"\n                }\n                updateBtnDisplay={true}\n                deleteBtnDisplay={true}\n                updateBtnFunc={updateBtnFunc}\n                deleteBtnFunc={deleteBtnFunc}\n              />\n            </Suspense>\n          </Grid>\n        </Grid>\n      </Grid>\n\n      {openDialog ? (\n        <CreateOrUpdateCategoryDialog\n          dialogType={dialogType}\n          openDialog={openDialog}\n          handleCloseDialog={handleCloseDialog}\n          state={categoryDetail}\n          setState={setCategoryDetail}\n          fetchData={fetchCategory}\n          companyId={companyDetails?.id}\n        />\n      ) : (\n        <></>\n      )}\n    </>\n  );\n}\n","import {\n  Autocomplete,\n  Button,\n  Container,\n  Grid,\n  Stack,\n  TextField,\n  Typography,\n} from \"@mui/material\";\nimport { lazy, Suspense, useState } from \"react\";\nimport Page from \"src/components/Page\";\nimport useSettings from \"src/hooks/useSettings\";\nimport ManageInventory from \"./manage-inventory/ManageInventory\";\nimport KeyboardBackspaceIcon from \"@mui/icons-material/KeyboardBackspace\";\nimport { useNavigate } from \"react-router\";\nimport { PATH_DASHBOARD } from \"src/routes/paths\";\nimport { selectDocument } from \"src/features/documentSlice\";\nimport { useSelector } from \"react-redux\";\nimport ManageCategory from \"./manage-cateogry/ManageCategory\";\n\nconst CompanyClientSelection = lazy(() =>\n  import(\"src/components/selection-component/CompanyClientSelection\")\n);\n\nexport default function InventoryIndex() {\n  const { themeStretch } = useSettings();\n\n  const navigate = useNavigate();\n\n  const { companyDetails } = useSelector(selectDocument);\n\n  const [selectedTable, setSelectedTable] = useState(null);\n\n  const tableOptions = [\n    { collectionName: \"inventory\", title: \"Inventory\" },\n    { collectionName: \"category\", title: \"Category\" },\n  ];\n\n  return (\n    <>\n      <Page title=\"Inventory\">\n        <Container maxWidth={themeStretch ? false : \"xl\"}>\n          <Grid container spacing={3}>\n            <Grid item xs={12} md={12}>\n              <Stack spacing={3} direction=\"row\" alignItems={\"center\"}>\n                <Button\n                  startIcon={<KeyboardBackspaceIcon />}\n                  variant=\"outlined\"\n                  color=\"primary\"\n                  onClick={() => navigate(PATH_DASHBOARD.general.app1)}\n                >\n                  Back\n                </Button>\n                <Typography variant=\"h3\">Inventory section</Typography>\n              </Stack>\n            </Grid>\n\n            <Suspense fallback={<></>}>\n              <CompanyClientSelection type={\"inventory\"} />\n            </Suspense>\n\n            <Grid item xs={12} md={4}>\n              <Autocomplete\n                size=\"small\"\n                label=\"Please select table\"\n                id=\"table-drop-down\"\n                options={tableOptions}\n                value={selectedTable || null}\n                renderInput={(params) => (\n                  <TextField {...params} label=\"Please select table\" />\n                )}\n                onChange={(e, value, reason) => {\n                  if (\n                    reason !== \"removeOption\" &&\n                    reason !== \"clear\" &&\n                    value\n                  ) {\n                    setSelectedTable(value);\n                  } else if (reason === \"removeOption\" || reason === \"clear\") {\n                    setSelectedTable(null);\n                  }\n                }}\n                getOptionLabel={(option) => option?.title || \"\"}\n                renderOption={(props, option) => (\n                  <li {...props} key={option?.collectionName}>\n                    <span>{option?.title || \"\"}</span>\n                  </li>\n                )}\n                disabled={!companyDetails}\n              />\n            </Grid>\n\n            {selectedTable && selectedTable?.collectionName === \"inventory\" ? (\n              <Grid item xs={12} md={12}>\n                <ManageInventory />\n              </Grid>\n            ) : selectedTable &&\n              selectedTable?.collectionName === \"category\" ? (\n              <Grid item xs={12} md={12}>\n                <ManageCategory />\n              </Grid>\n            ) : (\n              <></>\n            )}\n          </Grid>\n        </Container>\n      </Page>\n    </>\n  );\n}\n"],"sourceRoot":""}