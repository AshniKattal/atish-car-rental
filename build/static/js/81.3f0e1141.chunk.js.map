{"version":3,"sources":["pages/dashboard/bugsBeGone-custom-checkbox-management/BugsBeGoneCustomCheckboxManagementDetail.js"],"names":["TableCRUDTemplate","lazy","CreateOrUpdateCheckboxDialog","BugsBeGoneCustomCheckboxManagementDetail","dispatch","useDispatch","enqueueSnackbar","useSelector","selectGlobal","loading","useSnackbar","temp_fetchRowsRef","useRef","useState","collectionSelected","setCollectionSelected","rows","setRows","openDialog","setOpenDialog","dialogType","setDialogType","title","name","rowDetail","setRowDetail","useEffect","current","fetchRows","a","setLoading","db","collection","doc","process","REACT_APP_CUSTOM_BUGSBEGONE_ID","collectionName","orderBy","get","then","result","docs","length","arr","forEach","push","id","data","catch","error","message","variant","handleCloseDialog","deleteBtnFunc","delete","err","container","spacing","item","xs","md","size","label","options","value","renderInput","params","required","onChange","e","reason","preventDefault","getOptionLabel","option","fallback","type","headers","aCollection","viewOption","viewBtnFunc","undefined","addBtnDisplay","addBtnLabel","addBtnFunc","emptyColMsg","updateBtnDisplay","deleteBtnDisplay","updateBtnFunc","companyId"],"mappings":"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","file":"static/js/81.3f0e1141.chunk.js","sourcesContent":["import {\n  Autocomplete,\n  Container,\n  Grid,\n  TableContainer,\n  TextField,\n  Typography,\n} from \"@mui/material\";\nimport { useSnackbar } from \"notistack\";\nimport { lazy, Suspense, useEffect, useRef, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectGlobal, setLoading } from \"src/features/globalSlice\";\nimport db from \"src/firebase\";\n\nconst TableCRUDTemplate = lazy(() =>\n  import(\"src/components/table/TableCRUDTemplate\")\n);\nconst CreateOrUpdateCheckboxDialog = lazy(() =>\n  import(\"./CreateOrUpdateCheckboxDialog\")\n);\n\nexport default function BugsBeGoneCustomCheckboxManagementDetail() {\n  const dispatch = useDispatch();\n\n  const { loading } = useSelector(selectGlobal);\n\n  const { enqueueSnackbar } = useSnackbar();\n\n  const temp_fetchRowsRef = useRef();\n\n  const collectionOptions = [\n    { collectionName: \"controlof\", title: \"Control Of\" },\n    { collectionName: \"infestation\", title: \"Infestation\" },\n    { collectionName: \"controlvector\", title: \"Control Vector\" },\n    { collectionName: \"locationtreated\", title: \"Location Treated\" },\n    { collectionName: \"recommendation\", title: \"Recommendation\" },\n    { collectionName: \"routine\", title: \"Routine\" },\n  ];\n\n  const [collectionSelected, setCollectionSelected] = useState(null);\n\n  const [rows, setRows] = useState([]);\n\n  const [openDialog, setOpenDialog] = useState(false);\n\n  const [dialogType, setDialogType] = useState(\"\");\n\n  const [rowDetail, setRowDetail] = useState({\n    title: \"\",\n    name: \"\",\n  });\n\n  const headers = [\n    { id: \"list\", label: \"List\" },\n    { id: \"update\", label: \"Update\" },\n    { id: \"delete\", label: \"Delete\" },\n    { id: \"title\", label: \"Title\" },\n    { id: \"name\", label: \"Name Id\" },\n  ];\n\n  useEffect(() => {\n    temp_fetchRowsRef.current();\n  }, [collectionSelected]);\n\n  const fetchRows = async () => {\n    if (collectionSelected) {\n      dispatch(setLoading(true));\n\n      await db\n        .collection(\"company\")\n        .doc(process.env.REACT_APP_CUSTOM_BUGSBEGONE_ID)\n        .collection(collectionSelected?.collectionName)\n        .orderBy(\"title\")\n        .get()\n        .then((result) => {\n          if (result?.docs?.length > 0) {\n            let arr = [];\n            result?.docs.forEach((doc) => {\n              arr.push({\n                id: doc?.id,\n                data: { ...doc?.data() },\n                title: doc?.data()?.title || \"\",\n                name: doc?.data()?.name || \"\",\n              });\n            });\n            setRows(arr);\n            dispatch(setLoading(false));\n          } else {\n            setRows([]);\n            dispatch(setLoading(false));\n          }\n        })\n        .catch((error) => {\n          enqueueSnackbar(\n            `Error occured while fetching rows: ${error?.message}`,\n            { variant: \"error\" }\n          );\n          dispatch(setLoading(false));\n        });\n    }\n  };\n\n  temp_fetchRowsRef.current = fetchRows;\n\n  const addBtnFunc = () => {\n    setDialogType(\"add\");\n    setOpenDialog(true);\n    setRowDetail({\n      ...rowDetail,\n      id: \"\",\n      title: \"\",\n      name: \"\",\n    });\n  };\n\n  const updateBtnFunc = (id, data) => {\n    setDialogType(\"update\");\n    setOpenDialog(true);\n    setRowDetail({\n      ...data,\n      id: id,\n    });\n  };\n\n  const handleCloseDialog = () => {\n    setDialogType(\"\");\n    setOpenDialog(false);\n    setRowDetail({\n      title: \"\",\n      name: \"\",\n    });\n  };\n\n  const deleteBtnFunc = async (id) => {\n    dispatch(setLoading(true));\n\n    await db\n      .collection(\"company\")\n      .doc(process.env.REACT_APP_CUSTOM_BUGSBEGONE_ID)\n      .collection(collectionSelected?.collectionName)\n      .doc(id)\n      .delete()\n      .then(async () => {\n        await fetchRows();\n        dispatch(setLoading(false));\n      })\n      .catch((err) => {\n        enqueueSnackbar(\n          `Error occured while deleting ${collectionSelected?.title || \"\"}: ${\n            err?.message\n          }`,\n          { variant: \"error\" }\n        );\n        dispatch(setLoading(false));\n      });\n  };\n\n  return (\n    <Container>\n      <Grid container spacing={3}>\n        <Grid item xs={12} md={4}>\n          <Autocomplete\n            size=\"small\"\n            label=\"Please choose type of checkbox\"\n            id=\"collection-drop-down\"\n            options={collectionOptions || []}\n            value={collectionSelected || null}\n            renderInput={(params) => (\n              <TextField\n                {...params}\n                label=\"Please choose type of checkbox\"\n                required\n              />\n            )}\n            onChange={(e, value, reason) => {\n              e.preventDefault();\n              if (reason !== \"removeOption\" && reason !== \"clear\" && value) {\n                setCollectionSelected(value);\n              } else if (reason === \"removeOption\" || reason === \"clear\") {\n                setCollectionSelected(null);\n              }\n            }}\n            getOptionLabel={(option) => option?.title || \"\"}\n          />\n        </Grid>\n\n        {collectionSelected ? (\n          <Grid item xs={12} md={12}>\n            <Suspense fallback={<></>}>\n              <TableCRUDTemplate\n                type=\"bugsBeGoneCustomCheckboxManagement\"\n                headers={headers}\n                aCollection={rows}\n                viewOption={false}\n                viewBtnFunc={undefined}\n                addBtnDisplay={true}\n                addBtnLabel={`Create new ${collectionSelected?.title}`}\n                addBtnFunc={addBtnFunc}\n                openDialog={openDialog}\n                handleCloseDialog={handleCloseDialog}\n                emptyColMsg={`No ${collectionSelected?.title} retrieved for the date range selected.`}\n                updateBtnDisplay={true}\n                deleteBtnDisplay={true}\n                updateBtnFunc={updateBtnFunc}\n                deleteBtnFunc={deleteBtnFunc}\n              />\n            </Suspense>\n          </Grid>\n        ) : (\n          <></>\n        )}\n      </Grid>\n\n      {openDialog && (\n        <Suspense fallback={<></>}>\n          <CreateOrUpdateCheckboxDialog\n            dialogType={dialogType}\n            openDialog={openDialog}\n            handleCloseDialog={handleCloseDialog}\n            rowDetail={rowDetail}\n            setRowDetail={setRowDetail}\n            fetchRows={fetchRows}\n            title={collectionSelected?.title}\n            collectionName={collectionSelected?.collectionName}\n            companyId={process.env.REACT_APP_CUSTOM_BUGSBEGONE_ID}\n          />\n        </Suspense>\n      )}\n    </Container>\n  );\n}\n"],"sourceRoot":""}