{"version":3,"sources":["pages/dashboard/calendar/CalendarForm.js"],"names":["CalendarForm","selectedCompany","operationType","updatedEvent","set_updatedEvent","open","onCancel","fetchEventDateRange","fetchEmployee","employeesList","us_fromDate","us_ToDate","user","useAuth","enqueueSnackbar","useSnackbar","dispatch","useDispatch","useState","employeeName","set_employeeName","eventId","date","Date","title","titleField","description","startTime","endTime","employees","eventColor","linkedDocumentType","editedUser","event","set_events","a","length","variant","setLoading","formattedDate","moment","format","startTimeString","endTimeString","employeeNames","forEach","employee","name","eventTitle","eventDescription","db","collection","doc","id","add","start","end","allDay","email","firebaseDateTimestamp","firebase","firestore","Timestamp","fromDate","then","catch","err","message","publicId","set","merge","onClose","maxWidth","fullWidth","container","spacing","style","padding","item","xs","md","label","type","value","size","onChange","previousState","target","required","multiline","rows","disabled","newValue","inputFormat","renderInput","params","InputLabelProps","shrink","e","multiple","options","getOptionLabel","option","placeholder","margin","labelId","eventColour","inputProps","direction","alignItems","color","onClick","addEmployee","whiteSpace","width","submitChanges","permissions","updateCalendarTask","assignedCompanyId","includes"],"mappings":"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","file":"static/js/83.110de827.chunk.js","sourcesContent":["// @mui\nimport {\n  Button,\n  TextField,\n  DialogActions,\n  Dialog,\n  DialogTitle,\n  Grid,\n  Autocomplete,\n  Stack,\n  Typography,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n} from \"@mui/material\";\nimport { useSnackbar } from \"notistack\";\nimport { useState } from \"react\";\nimport { setLoading } from \"../../../features/globalSlice\";\nimport db from \"../../../firebase\";\nimport PropTypes from \"prop-types\";\nimport { DatePicker } from \"@mui/lab\";\nimport moment from \"moment\";\nimport { useDispatch } from \"react-redux\";\n// import { ColorSinglePicker } from \"../../../components/color-utils\";\nimport useAuth from \"../../../hooks/useAuth\";\nimport firebase from \"firebase/compat\";\n// ----------------------------------------------------------------------\n\nCalendarForm.propTypes = {\n  operationType: PropTypes.string,\n  updatedEvent: PropTypes.object,\n  set_updatedEvent: PropTypes.func,\n  open: PropTypes.bool,\n  onCancel: PropTypes.func,\n  fetchEvent: PropTypes.func,\n  fetchEmployee: PropTypes.func,\n  employeesList: PropTypes.array,\n};\n\n/* const COLOR_OPTIONS = [\n  \"#00AB55\", // theme.palette.primary.main,\n  \"#1890FF\", // theme.palette.info.main,\n  \"#54D62C\", // theme.palette.success.main,\n  \"#FFC107\", // theme.palette.warning.main,\n  \"#FF4842\", // theme.palette.error.main\n  \"#04297A\", // theme.palette.info.darker\n  \"#7A0C2E\", // theme.palette.error.darker\n]; */\n\nexport default function CalendarForm({\n  selectedCompany,\n  operationType,\n  updatedEvent,\n  set_updatedEvent,\n  open,\n  onCancel,\n  fetchEventDateRange,\n  fetchEmployee,\n  employeesList,\n  us_fromDate,\n  us_ToDate,\n}) {\n  const { user } = useAuth();\n\n  const { enqueueSnackbar } = useSnackbar();\n\n  const dispatch = useDispatch();\n\n  const [employeeName, set_employeeName] = useState(\"\");\n\n  const [event, set_events] = useState({\n    eventId: operationType === \"update\" ? updatedEvent?.eventId : \"\",\n    date: operationType === \"update\" ? updatedEvent?.date : new Date(),\n    title: operationType === \"update\" ? updatedEvent?.titleField : \"\",\n    description: operationType === \"update\" ? updatedEvent?.description : \"\",\n    startTime: operationType === \"update\" ? updatedEvent?.startTime : \"00:00\",\n    endTime: operationType === \"update\" ? updatedEvent?.endTime : \"00:00\",\n    employees: operationType === \"update\" ? updatedEvent?.employees : [],\n    eventColor:\n      operationType === \"update\"\n        ? updatedEvent?.linkedDocumentType &&\n          updatedEvent?.linkedDocumentType === \"invoice\"\n          ? \"#54D62C\"\n          : updatedEvent?.linkedDocumentType &&\n            updatedEvent?.linkedDocumentType === \"proforma\"\n          ? \"#FF4842\"\n          : \"\"\n        : \"\",\n    editedUser: operationType === \"update\" ? updatedEvent?.editedUser : \"\",\n    linkedDocumentType:\n      operationType === \"update\" ? updatedEvent?.linkedDocumentType : \"\",\n  });\n\n  const {\n    date,\n    title,\n    description,\n    startTime,\n    endTime,\n    employees,\n    eventColor,\n    editedUser,\n    linkedDocumentType,\n  } = event;\n\n  async function submitChanges() {\n    if (\n      !title ||\n      //!description ||\n      !date ||\n      !startTime ||\n      !endTime ||\n      startTime === \"00:00\" ||\n      endTime === \"00:00\" ||\n      !employees ||\n      employees?.length === 0 /* ||\n      !linkedDocumentType */\n    ) {\n      enqueueSnackbar(\"Title, date, time and employees fields are compulsory\", {\n        variant: \"warning\",\n      });\n    } else {\n      dispatch(setLoading(true));\n\n      let formattedDate = moment(date).format(\"YYYY-MM-DD\");\n      let startTimeString = `${formattedDate}T${startTime}:00Z`;\n      let endTimeString = `${formattedDate}T${endTime}:00Z`;\n\n      let employeeNames = \"\";\n      employees.forEach((employee) => {\n        employeeNames = employeeNames + employee?.name + \", \";\n      });\n\n      let eventTitle = `Title: ${title}`;\n\n      let eventDescription = description;\n\n      if (description) {\n        eventTitle = eventTitle + ` - Description: ${description}`;\n      }\n\n      if (employeeNames) {\n        eventTitle = eventTitle + ` - Assigned employees: ${employeeNames}`;\n      }\n\n      eventTitle =\n        eventTitle + ` - Start time: ${startTime} - End time: ${endTime}`;\n\n      if (operationType && operationType === \"create\") {\n        await db\n          .collection(\"company\")\n          .doc(selectedCompany.id)\n          .collection(\"calendar\")\n          .add({\n            title: eventTitle,\n            titleField: title,\n            start: startTimeString,\n            end: endTimeString,\n            allDay: false,\n            description: eventDescription,\n            employees: employees,\n            eventColor: eventColor,\n            linkedDocumentType: linkedDocumentType,\n            editedUser: user?.email,\n            firebaseDateTimestamp: firebase.firestore.Timestamp.fromDate(\n              new Date(formattedDate)\n            ),\n          })\n          .then(() => {\n            set_events({\n              date: new Date(),\n              title: \"\",\n              description: \"\",\n              startTime: \"00:00\",\n              endTime: \"00:00\",\n              employees: [],\n              eventColor: \"\",\n              linkedDocumentType: \"\",\n            });\n            // fetchEvent();\n            fetchEventDateRange(selectedCompany.id, us_fromDate, us_ToDate);\n            enqueueSnackbar(\"Details saved successfully\");\n            dispatch(setLoading(false));\n            onCancel();\n          })\n          .catch((err) => {\n            enqueueSnackbar(\n              `Error occured while saving details: ${err?.message}`,\n              { variant: \"error\" }\n            );\n            dispatch(setLoading(false));\n          });\n      } else if (operationType === \"update\" && updatedEvent?.publicId !== \"\") {\n        await db\n          .collection(\"company\")\n          .doc(selectedCompany.id)\n          .collection(\"calendar\")\n          .doc(updatedEvent?.publicId)\n          .set(\n            {\n              title: eventTitle,\n              titleField: title,\n              start: startTimeString,\n              end: endTimeString,\n              allDay: false,\n              description: eventDescription,\n              employees: employees,\n              eventColor: eventColor,\n              linkedDocumentType: linkedDocumentType,\n              editedUser: user?.email,\n              firebaseDateTimestamp: firebase.firestore.Timestamp.fromDate(\n                new Date(formattedDate)\n              ),\n            },\n            { merge: true }\n          )\n          .then(() => {\n            set_events({\n              date: new Date(),\n              title: \"\",\n              description: \"\",\n              startTime: \"00:00\",\n              endTime: \"00:00\",\n              employees: [],\n              eventColor: \"\",\n              linkedDocumentType: \"\",\n            });\n            set_updatedEvent(null);\n            // fetchEvent();\n            fetchEventDateRange(selectedCompany.id, us_fromDate, us_ToDate);\n            enqueueSnackbar(\"Details saved successfully\");\n            dispatch(setLoading(false));\n            onCancel();\n          })\n          .catch((err) => {\n            enqueueSnackbar(\n              `Error occured while saving details: ${err?.message}`,\n              { variant: \"error\" }\n            );\n            dispatch(setLoading(false));\n          });\n      }\n    }\n  }\n\n  async function addEmployee() {\n    if (employeeName) {\n      dispatch(setLoading(true));\n      await db\n        .collection(\"company\")\n        .doc(selectedCompany.id)\n        .collection(\"employee\")\n        .add({\n          name: employeeName,\n        })\n        .then(() => {\n          set_employeeName(\"\");\n          fetchEmployee();\n          enqueueSnackbar(\"Employee saved successfully\");\n          dispatch(setLoading(false));\n        })\n        .catch((err) => {\n          enqueueSnackbar(\n            `Error occured while saving employee name: ${err?.message}`,\n            { variant: \"error\" }\n          );\n          dispatch(setLoading(false));\n        });\n    } else {\n      enqueueSnackbar(\"Please provide an employee name\", {\n        variant: \"warning\",\n      });\n    }\n  }\n\n  return (\n    <Dialog open={open} onClose={onCancel} maxWidth={\"sm\"} fullWidth>\n      <DialogTitle>\n        {operationType && operationType === \"create\"\n          ? \"Add task\"\n          : operationType && operationType === \"update\"\n          ? \"Edit task\"\n          : \"\"}\n      </DialogTitle>\n\n      <Grid container spacing={3} style={{ padding: \"1em\" }}>\n        <Grid item xs={12} md={12}>\n          <TextField\n            variant=\"outlined\"\n            fullWidth\n            name=\"title\"\n            label=\"Title\"\n            type=\"text\"\n            id=\"title\"\n            value={title || \"\"}\n            size=\"small\"\n            onChange={(event) => {\n              set_events((previousState) => {\n                return {\n                  ...previousState,\n                  title: event.target.value,\n                };\n              });\n            }}\n            required\n          />\n        </Grid>\n        <Grid item xs={12} md={12}>\n          <TextField\n            variant=\"outlined\"\n            fullWidth\n            name=\"description\"\n            label=\"Description\"\n            type=\"text\"\n            id=\"description\"\n            value={description || \"\"}\n            multiline\n            rows={4}\n            size=\"small\"\n            onChange={(event) => {\n              set_events((previousState) => {\n                return {\n                  ...previousState,\n                  description: event.target.value,\n                };\n              });\n            }}\n          />\n        </Grid>\n\n        {operationType === \"update\" ? (\n          <Grid item xs={12} md={12}>\n            <TextField\n              variant=\"outlined\"\n              fullWidth\n              name=\"editedUser\"\n              label=\"User edited\"\n              type=\"text\"\n              id=\"editedUser\"\n              value={editedUser || \"\"}\n              size=\"small\"\n              disabled\n            />\n          </Grid>\n        ) : (\n          \"\"\n        )}\n\n        <Grid item xs={12} md={12}>\n          <DatePicker\n            label=\"Date\"\n            value={date || \"\"}\n            onChange={(newValue) => {\n              set_events((previousState) => {\n                return {\n                  ...previousState,\n                  date: newValue,\n                };\n              });\n            }}\n            inputFormat=\"dd/MM/yyyy\"\n            renderInput={(params) => <TextField {...params} size=\"small\" />}\n            style={{ maxWidth: \"500px\" }}\n            required\n          />\n        </Grid>\n        <Grid item xs={12} md={6}>\n          <TextField\n            type=\"time\"\n            label=\"Start time\"\n            id=\"startTime\"\n            name=\"startTime\"\n            value={startTime}\n            InputLabelProps={{\n              shrink: true,\n            }}\n            variant=\"outlined\"\n            onChange={(e) => {\n              set_events((previousState) => {\n                return {\n                  ...previousState,\n                  startTime: e.target.value,\n                };\n              });\n            }}\n            size=\"small\"\n            fullWidth\n            required\n          />\n        </Grid>\n        <Grid item xs={12} md={6}>\n          <TextField\n            type=\"time\"\n            label=\"End time\"\n            id=\"endTime\"\n            name=\"endTime\"\n            value={endTime}\n            InputLabelProps={{\n              shrink: true,\n            }}\n            variant=\"outlined\"\n            onChange={(e) => {\n              set_events((previousState) => {\n                return {\n                  ...previousState,\n                  endTime: e.target.value,\n                };\n              });\n            }}\n            size=\"small\"\n            fullWidth\n            required\n          />\n        </Grid>\n\n        <Grid item xs={12} md={12}>\n          <Autocomplete\n            multiple\n            id=\"tags-standard\"\n            options={employeesList || []}\n            getOptionLabel={(option) => option.name}\n            value={employees || null}\n            renderInput={(params) => (\n              <TextField\n                {...params}\n                variant=\"outlined\"\n                label=\"Assigned employees\"\n                placeholder=\"Employees\"\n                size=\"small\"\n              />\n            )}\n            onChange={(e, value) => {\n              set_events((previousState) => {\n                return {\n                  ...previousState,\n                  employees: value,\n                };\n              });\n            }}\n            required\n          />\n        </Grid>\n\n        <Grid item xs={12} md={12}>\n          <Stack spacing={2}>\n            <Typography>\n              Please choose if task is linked to proforma or invoice\n            </Typography>\n\n            <FormControl\n              size=\"small\"\n              variant=\"outlined\"\n              fullWidth\n              margin=\"normal\"\n            >\n              <InputLabel id=\"linked-document-type\">\n                Linked document type\n              </InputLabel>\n\n              <Select\n                label=\"Linked document type\"\n                labelId=\"linked-document-type\"\n                size=\"small\"\n                placeholder=\"Please choose a document type\"\n                value={linkedDocumentType || \"\"}\n                onChange={(event) => {\n                  const value = event.target.value;\n                  let eventColour = \"\";\n                  if (value === \"invoice\") {\n                    eventColour = \"#54D62C\";\n                  } else if (value === \"proforma\") {\n                    eventColour = \"#FF4842\";\n                  }\n\n                  set_events((previousState) => {\n                    return {\n                      ...previousState,\n                      linkedDocumentType: value,\n                      eventColor: eventColour,\n                    };\n                  });\n                }}\n                inputProps={{\n                  name: \"linkedDocumentType\",\n                  id: \"linkedDocumentType\",\n                }}\n              >\n                <MenuItem value=\"\">Please choose a document type *</MenuItem>\n                <MenuItem value=\"invoice\">Invoice</MenuItem>\n                <MenuItem value=\"proforma\">Proforma</MenuItem>\n              </Select>\n            </FormControl>\n            {/* <ColorSinglePicker\n              value={eventColor || \"\"}\n              onChange={(e) => {\n                set_events((previousState) => {\n                  return {\n                    ...previousState,\n                    eventColor: e.target.value,\n                  };\n                });\n              }}\n              colors={COLOR_OPTIONS}\n            /> */}\n          </Stack>\n        </Grid>\n\n        <Grid item xs={12} md={12}>\n          <Stack spacing={3} direction=\"row\" alignItems=\"center\">\n            <TextField\n              variant=\"outlined\"\n              fullWidth\n              name=\"employeeName\"\n              label=\"Enter new employee name\"\n              type=\"text\"\n              id=\"employeeName\"\n              value={employeeName || \"\"}\n              size=\"small\"\n              onChange={(e) => {\n                set_employeeName(e.target.value);\n              }}\n            />\n\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={() => addEmployee()}\n              style={{ whiteSpace: \"nowrap\", width: \"300px\" }}\n              disabled={!employeeName}\n            >\n              Add employee\n            </Button>\n          </Stack>\n        </Grid>\n      </Grid>\n\n      <DialogActions>\n        <Grid container spacing={3}>\n          <Grid item xs={12} md={6}>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={() => submitChanges()}\n              fullWidth\n              disabled={\n                (operationType === \"update\" &&\n                  !user?.permissions?.updateCalendarTask?.assignedCompanyId?.includes(\n                    selectedCompany?.id\n                  )) ||\n                !title ||\n                // !description ||\n                !date ||\n                !startTime ||\n                !endTime ||\n                startTime === \"00:00\" ||\n                endTime === \"00:00\" ||\n                !employees ||\n                employees?.length === 0 /* ||\n                !linkedDocumentType */\n              }\n            >\n              submit changes\n            </Button>\n          </Grid>\n          <Grid item xs={12} md={6}>\n            <Button\n              variant=\"outlined\"\n              color=\"error\"\n              onClick={onCancel}\n              fullWidth\n            >\n              Cancel\n            </Button>\n          </Grid>\n        </Grid>\n      </DialogActions>\n    </Dialog>\n  );\n}\n"],"sourceRoot":""}