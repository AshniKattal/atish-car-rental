{"version":3,"sources":["pages/dashboard/manage-client/ClientDetail.js"],"names":["TableCRUDTemplate","lazy","CreateClientDialog","UpdateClientDialog","ClientDetail","themeStretch","useSettings","dispatch","useDispatch","enqueueSnackbar","useSnackbar","user","useAuth","companyList","useSelector","selectCompanyList","useState","clientListOriginal","setClientListOriginal","clientList","setClientList","id","companyRefId","companyRefName","name","companyType","tan","address","contactNumber","mobileNumber","email","email2","email3","email4","brn","nic","buyerType","representativeName","representativeContactNumber","clientDetails","setClientDetails","companySearchId","setCompanySearchId","selectedClient","setSelectedClient","selectedCompany","setSelectedCompany","openDialog","setOpenDialog","dialogType","setDialogType","temp_initMemberCompId","useRef","temp_initializeCompanies","temp_initializeClient","temp_filterClientsRef","temp_checkPermission_ref","viewPermissionGranted","setViewPermissionGranted","useEffect","current","permissions","viewClientChk","assignedCompanyId","includes","variant","_ue_initMemberCompId","a","role","a_comp","length","initializeCompanies","setLoading","getCompanies","result","error","msg","setCompanyList","initializeClientList","db","collection","doc","process","orderBy","get","then","snapshot","arr","docs","forEach","push","data","JSON","stringify","catch","err","message","newClientList","filter","client","handleCloseDialog","deleteBtnFunc","delete","setCompanyInvSelected","undefined","setClientInvSelected","maxWidth","style","display","sx","p","container","item","xs","md","ListboxProps","maxHeight","size","label","options","value","renderInput","params","onChange","e","reason","getOptionLabel","option","renderOption","props","key","spacing","fallback","companyId","type","headers","aCollection","addBtnDisplay","addBtnLabel","addBtnFunc","emptyColMsg","updateBtnDisplay","deleteBtnDisplay","updateBtnFunc"],"mappings":"wWA4BMA,EAAoBC,gBAAK,kBAC7B,wDAEIC,EAAqBD,gBAAK,kBAAM,yDAChCE,EAAqBF,gBAAK,kBAAM,mCA0kBvBG,UAxkBM,WAAO,IAAD,EACjBC,EAAiBC,cAAjBD,aAEFE,EAAWC,cACTC,EAAoBC,cAApBD,gBACAE,EAASC,cAATD,KACAE,EAAgBC,YAAYC,KAA5BF,YAER,EAAoDG,mBAAS,IAA7D,mBAAOC,EAAP,KAA2BC,EAA3B,KACA,EAAoCF,mBAAS,IAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KACA,EAA0CJ,mBAAS,CACjDK,GAAI,GACJC,aAAc,GACdC,eAAgB,GAChBC,KAAM,GACNC,YAAa,GAIbC,IAAK,GACLC,QAAS,GAETC,cAAe,GACfC,aAAc,GACdC,MAAO,GACPC,OAAQ,GACRC,OAAQ,GACRC,OAAQ,GACRC,IAAK,GACLC,IAAK,GACLC,UAAW,KACXC,mBAAoB,GACpBC,4BAA6B,KAtB/B,mBAAOC,EAAP,KAAsBC,EAAtB,KAyBA,EAA8CxB,mBAAS,IAAvD,mBAAOyB,EAAP,KAAwBC,EAAxB,KAEA,EAA4C1B,mBAAS,MAArD,mBAAO2B,EAAP,KAAuBC,EAAvB,KAEA,EAA8C5B,mBAAS,MAAvD,mBAAO6B,GAAP,KAAwBC,GAAxB,KAEA,GAAoC9B,oBAAS,GAA7C,qBAAO+B,GAAP,MAAmBC,GAAnB,MACA,GAAoChC,mBAAS,IAA7C,qBAAOiC,GAAP,MAAmBC,GAAnB,MA0BMC,GAAwBC,mBAExBC,GAA2BD,mBAE3BE,GAAwBF,mBAExBG,GAAwBH,mBAExBI,GAA2BJ,mBAEjC,GAA0DpC,oBAAS,GAAnE,qBAAOyC,GAAP,MAA8BC,GAA9B,MAEAC,qBAAU,WACRH,GAAyBI,YACxB,CAACnB,IAqBJe,GAAyBI,QAnBzB,WACwB,IAAD,MAAjBnB,IAEA,OAAC9B,QAAD,IAACA,GAAD,UAACA,EAAMkD,mBAAP,iBAAC,EAAmBC,qBAApB,iBAAC,EAAkCC,yBAAnC,OAAC,EAAqDC,SACpDvB,GAUFiB,IAAyB,IAPzBjD,EACE,kEACA,CAAEwD,QAAS,UAGbP,IAAyB,MAS/BC,qBAAU,WACRR,GAAsBS,YACrB,CAACjD,IAEJgD,qBAAU,WACRN,GAAyBO,YACxB,CAAC/C,IAEJ8C,qBAAU,WACJlB,GAAmBgB,GACrBH,GAAsBM,WAEtB1C,EAAsB,IACtBE,EAAc,OAEf,CAACqB,EAAiBgB,KAErBE,qBAAU,WACRJ,GAAsBK,YACrB,CAACjB,IAEJ,IAAMuB,GAAoB,uCAAG,kCAAAC,EAAA,sDAEV,kBAAX,OAAJxD,QAAI,IAAJA,OAAA,EAAAA,EAAMyD,OAAN,OACAzD,QADA,IACAA,KAAM0D,SACF,OAAJ1D,QAAI,IAAJA,GAAA,UAAAA,EAAM0D,cAAN,eAAcC,QAAS,GAFvB,OAGA3D,QAHA,IAGAA,GAHA,UAGAA,EAAMkD,mBAHN,OAGA,EAAmBC,eAEU,KAArB,OAAJnD,QAAI,IAAJA,GAAA,UAAAA,EAAM0D,cAAN,eAAcC,SAChB5B,EAAkB,OAAC/B,QAAD,IAACA,GAAD,UAACA,EAAM0D,OAAO,UAAd,aAAC,EAAiBhD,IARb,2CAAH,qDAa1B8B,GAAsBS,QAAUM,GAEhC,IAAMK,GAAmB,uCAAG,4BAAAJ,EAAA,0DAEtBtD,GAAsC,IAAvBA,EAAYyD,OAFL,uBAGxB/D,EAASiE,aAAW,IAHI,SAILC,YAAY,OAAC9D,QAAD,IAACA,OAAD,EAACA,EAAMU,GAAP,OAAWV,QAAX,IAAWA,OAAX,EAAWA,EAAM0D,OAAjB,OAAyB1D,QAAzB,IAAyBA,OAAzB,EAAyBA,EAAMyD,MAJtC,QAIpBM,EAJoB,QAMbC,OACTlE,EAAgBiE,EAAOE,KAAO,GAAI,CAAEX,QAASS,EAAOT,UACpD1D,EAASiE,aAAW,MAEpBjE,EAASsE,YAAeH,IACxBnE,EAASiE,aAAW,KAXE,2CAAH,qDAiBzBnB,GAAyBO,QAAUW,GAEnC,IAAMO,GAAoB,uCAAG,sBAAAX,EAAA,0DACvB1B,GAAuC,KAApBA,EADI,uBAEzBlC,EAASiE,aAAW,IAFK,SAGnBO,IACHC,WAAW,WACXC,IAAIC,wBACJF,WAAW,UACXG,QAAQ,OAAQ,OAChBC,MACAC,MAAK,SAACC,GAAc,IAAD,EACdC,EAAM,IACE,OAARD,QAAQ,IAARA,GAAA,UAAAA,EAAUE,YAAV,eAAgBlB,QAAS,GAC3BgB,EAASE,KAAKC,SAAQ,SAACR,GACgB,IAAD,oCAArB,sBAAXA,EAAI5D,IACNkE,EAAIG,KAAK,CACPrE,GAAE,OAAE4D,QAAF,IAAEA,OAAF,EAAEA,EAAK5D,GACTsE,KAAI,OAAEV,QAAF,IAAEA,OAAF,EAAEA,EAAKU,OACXnE,MAAS,OAAHyD,QAAG,IAAHA,GAAA,UAAAA,EAAKU,cAAL,eAAanE,OAAQ,GAC3BD,gBAAmB,OAAH0D,QAAG,IAAHA,GAAA,UAAAA,EAAKU,cAAL,eAAapE,iBAAkB,GAC/CD,cAAiB,OAAH2D,QAAG,IAAHA,GAAA,UAAAA,EAAKU,cAAL,eAAarE,eAAgB,GAC3CG,aAAgB,OAAHwD,QAAG,IAAHA,GAAA,UAAAA,EAAKU,cAAL,eAAalE,cAAe,GACzCE,SAAY,OAAHsD,QAAG,IAAHA,GAAA,UAAAA,EAAKU,cAAL,eAAahE,UAAW,GACjCC,eAAkB,OAAHqD,QAAG,IAAHA,GAAA,UAAAA,EAAKU,cAAL,eAAa/D,gBAAiB,GAC7CC,cAAiB,OAAHoD,QAAG,IAAHA,GAAA,UAAAA,EAAKU,cAAL,eAAa9D,eAAgB,GAC3CC,OAAU,OAAHmD,QAAG,IAAHA,GAAA,UAAAA,EAAKU,cAAL,eAAa7D,QAAS,GAC7BC,QAAW,OAAHkD,QAAG,IAAHA,GAAA,UAAAA,EAAKU,cAAL,eAAa5D,SAAU,GAC/BC,QAAW,OAAHiD,QAAG,IAAHA,GAAA,UAAAA,EAAKU,cAAL,eAAa3D,SAAU,GAC/BC,QAAW,OAAHgD,QAAG,IAAHA,GAAA,UAAAA,EAAKU,cAAL,eAAa1D,SAAU,GAC/BP,KAAQ,OAAHuD,QAAG,IAAHA,GAAA,UAAAA,EAAKU,cAAL,eAAajE,MAAO,GACzBQ,KAAQ,OAAH+C,QAAG,IAAHA,GAAA,UAAAA,EAAKU,cAAL,eAAazD,MAAO,GACzBC,KAAQ,OAAH8C,QAAG,IAAHA,GAAA,UAAAA,EAAKU,cAAL,eAAaxD,MAAO,GACzBC,UAAc,OAAH6C,QAAG,IAAHA,GAAA,UAAAA,EAAKU,cAAL,SAAavD,UACpBwD,KAAKC,UAAL,OAAeZ,QAAf,IAAeA,GAAf,UAAeA,EAAKU,cAApB,aAAe,EAAavD,WAC5B,KAEJC,oBAAuB,OAAH4C,QAAG,IAAHA,GAAA,UAAAA,EAAKU,cAAL,eAAatD,qBAAsB,GACvDC,6BACK,OAAH2C,QAAG,IAAHA,GAAA,UAAAA,EAAKU,cAAL,eAAarD,8BAA+B,QAIpDlB,EAAcmE,GACdrE,EAAsBqE,GACtBhF,EAASiE,aAAW,MAEpBpD,EAAc,IACdF,EAAsB,IACtBX,EAASiE,aAAW,QAGvBsB,OAAM,SAACC,GACNtF,EAAgB,yCAAD,cAC4BsF,QAD5B,IAC4BA,OAD5B,EAC4BA,EAAKC,SAC9C,CAAE/B,QAAS,UAEb1D,EAASiE,aAAW,OAvDC,2CAAH,qDA4D1BlB,GAAsBM,QAAUkB,GAahCvB,GAAsBK,QAXtB,WACE,GAAIjB,EAAgB,CAClB,IAAIsD,EAAgBhF,EAAmBiF,QACrC,SAACC,GAAD,OAAkB,OAANA,QAAM,IAANA,OAAA,EAAAA,EAAQ9E,OAAR,OAAesB,QAAf,IAAeA,OAAf,EAAeA,EAAgBtB,OAE7CD,EAAc6E,QAEd7E,EAAc,YAAIH,KAMtB,IAAMmF,GAAoB,WACxBpD,IAAc,GACdR,EAAiB,CACfnB,GAAI,GACJC,aAAc,GACdC,eAAgB,GAChBC,KAAM,GACNC,YAAa,GAIbC,IAAK,GACLC,QAAS,GAETC,cAAe,GACfC,aAAc,GACdC,MAAO,GACPC,OAAQ,GACRC,OAAQ,GACRC,OAAQ,GACRC,IAAK,GACLC,IAAK,GACLC,UAAW,KACXC,mBAAoB,GACpBC,4BAA6B,MA+D3B+D,GAAa,uCAAG,WAAOhF,GAAP,SAAA8C,EAAA,6DACpB5D,EAASiE,aAAW,IADA,SAEdO,IACHC,WAAW,WACXC,IAAIC,wBACJF,WAAW,UACXC,IAAI5D,GACJiF,SACAjB,KANG,sBAME,sBAAAlB,EAAA,sDACJW,KACAvE,EAASgG,iBAAsBC,IAC/BjG,EAASkG,iBAAqBD,IAC9BjG,EAASiE,aAAW,IAJhB,4CAMLsB,OAAM,SAACC,GACNtF,EAAgB,0CAAD,cAC6BsF,QAD7B,IAC6BA,OAD7B,EAC6BA,EAAKC,SAC/C,CAAE/B,QAAS,UAEb1D,EAASiE,aAAW,OAnBJ,2CAAH,sDA4EnB,OACE,eAAC,IAAD,CAAWkC,UAAUrG,GAAuB,KAA5C,UA4BE,sBACEsG,MAAO,CACLC,QACiB,kBAAX,OAAJjG,QAAI,IAAJA,OAAA,EAAAA,EAAMyD,OAAN,OACAzD,QADA,IACAA,KAAM0D,QACmB,KAArB,OAAJ1D,QAAI,IAAJA,GAAA,UAAAA,EAAM0D,cAAN,eAAcC,QACV,OACA,IAPV,UAUE,cAAC,IAAD,UACE,cAAC,IAAD,CAAOuC,GAAI,CAAEC,EAAG,GAAhB,SACE,cAAC,IAAD,CAAMC,WAAS,EAAf,SACE,cAAC,IAAD,CAAMC,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAvB,SACE,cAAC,IAAD,CACEC,aAAc,CAAER,MAAO,CAAES,UAAW,SACpCC,KAAK,QACLC,MAAM,wBACNjG,GAAG,mBACHkG,QAAS1G,GAAe,GACxB2G,MAAO3E,IAAmB,KAC1B4E,YAAa,SAACC,GAAD,OACX,cAAC,IAAD,2BAAeA,GAAf,IAAuBJ,MAAM,4BAE/BK,SAAU,SAACC,EAAGJ,EAAOK,GAEN,iBAAXA,GACW,UAAXA,GACAL,GAEA9E,EAAkB,OAAC8E,QAAD,IAACA,OAAD,EAACA,EAAOnG,IAC1ByB,GAAmB0E,IAER,iBAAXK,GACW,UAAXA,IAEAnF,EAAmB,IACnBI,GAAmB,QAGvBgF,eAAgB,SAACC,GAAD,OAAkB,OAANA,QAAM,IAANA,OAAA,EAAAA,EAAQvG,OAAQ,IAC5CwG,aAAc,SAACC,EAAOF,GAAR,OACZ,wDAAQE,GAAR,IAAeC,IAAG,OAAEH,QAAF,IAAEA,OAAF,EAAEA,EAAQ1G,KAC1B,gCAAa,OAAN0G,QAAM,IAANA,OAAA,EAAAA,EAAQvG,OAAQ,iBAQrC,0BAGF,cAAC,IAAD,CAAMuF,WAAS,EAACoB,QAAS,EAAzB,SACG1F,GAAmBgB,IAAyBtC,EAC3C,qCACE,eAAC,IAAD,CAAM6F,MAAI,EAACC,GAAI,GAAIC,GAAI,GAAvB,UACE,cAAC,IAAD,2BAAgB/F,QAAhB,IAAgBA,OAAhB,EAAgBA,EAAYmD,OAA5B,wBAAqE,QAG5D,OAAVnD,QAAU,IAAVA,OAAA,EAAAA,EAAYmD,QAAS,EACpB,cAAC,IAAD,CAAM0C,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAvB,SACE,cAAC,IAAD,CACEC,aAAc,CAAER,MAAO,CAAES,UAAW,SACpCC,KAAK,QACLC,MAAM,gBACNjG,GAAG,mBACHkG,QAAStG,GAAsB,GAC/BuG,MAAO7E,GAAkB,KACzB8E,YAAa,SAACC,GAAD,OACX,cAAC,IAAD,2BAAeA,GAAf,IAAuBJ,MAAM,oBAE/BK,SAAU,SAACC,EAAGJ,EAAOK,GAEN,iBAAXA,GACW,UAAXA,GACAL,EAEA5E,EAAkB4E,GAEP,iBAAXK,GACW,UAAXA,GAEAjF,EAAkB,OAGtBkF,eAAgB,SAACC,GAAD,OAAkB,OAANA,QAAM,IAANA,OAAA,EAAAA,EAAQvG,OAAQ,IAC5CwG,aAAc,SAACC,EAAOF,GAAR,OACZ,wDAAQE,GAAR,IAAeC,IAAG,OAAEH,QAAF,IAAEA,OAAF,EAAEA,EAAQ1G,KAC1B,gCAAa,OAAN0G,QAAM,IAANA,OAAA,EAAAA,EAAQvG,OAAQ,WAM/B,6BAGF,cAAC,IAAD,CAAMwF,MAAI,EAACC,GAAI,GAAIC,GAAI,GAAvB,SACE,cAAC,WAAD,CAAUkB,SAAU,2CAApB,SACE,cAACpI,EAAD,CACEqI,UAAW5F,EACX6F,KAAK,SACLC,QAveA,CACd,CAAElH,GAAI,OAAQiG,MAAO,QACrB,CAAEjG,GAAI,SAAUiG,MAAO,UACvB,CAAEjG,GAAI,SAAUiG,MAAO,UACvB,CAAEjG,GAAI,OAAQiG,MAAO,QACrB,CAAEjG,GAAI,cAAeiG,MAAO,QAC5B,CAAEjG,GAAI,UAAWiG,MAAO,WACxB,CAAEjG,GAAI,gBAAiBiG,MAAO,kBAC9B,CAAEjG,GAAI,eAAgBiG,MAAO,iBAC7B,CAAEjG,GAAI,QAASiG,MAAO,WACtB,CAAEjG,GAAI,SAAUiG,MAAO,WACvB,CAAEjG,GAAI,SAAUiG,MAAO,WACvB,CAAEjG,GAAI,SAAUiG,MAAO,WACvB,CAAEjG,GAAI,MAAOiG,MAAO,OACpB,CAAEjG,GAAI,MAAOiG,MAAO,OACpB,CAAEjG,GAAI,MAAOiG,MAAO,OACpB,CAAEjG,GAAI,YAAaiG,MAAO,cAC1B,CAAEjG,GAAI,qBAAsBiG,MAAO,uBACnC,CACEjG,GAAI,8BACJiG,MAAO,kCAodKkB,YAAarH,EACbsH,gBAAe5F,GACf6F,YAAa,kBACbC,WAhRG,WACjBzF,GAAc,OACdF,IAAc,GACdR,EAAiB,2BACZD,GADW,IAEdlB,GAAI,GAEJE,eAAgB,GAChBC,KAAM,GACNC,YAAa,GAIbC,IAAK,GACLC,QAAS,GAETC,cAAe,GACfC,aAAc,GACdC,MAAO,GACPC,OAAQ,GACRC,OAAQ,GACRC,OAAQ,GACRC,IAAK,GACLC,IAAK,GACLC,UAAW,KACXC,mBAAoB,GACpBC,4BAA6B,OAuPjBS,WAAYA,GACZqD,kBAAmBA,GACnBwC,YACE,2EAEFC,kBAAkB,EAClBC,kBAAkB,EAClBC,cA1PM,SAAC1H,EAAIsE,GACzBzC,GAAc,UACdF,IAAc,GACdR,EAAiB,CACfnB,GAAIA,EACJG,MAAU,OAAJmE,QAAI,IAAJA,OAAA,EAAAA,EAAMnE,OAAQ,GACpBF,cAAkB,OAAJqE,QAAI,IAAJA,OAAA,EAAAA,EAAMrE,eAAgB,GACpCC,gBAAoB,OAAJoE,QAAI,IAAJA,OAAA,EAAAA,EAAMpE,iBAAkB,GACxCE,aAAiB,OAAJkE,QAAI,IAAJA,OAAA,EAAAA,EAAMlE,cAAe,GAIlCC,KAAS,OAAJiE,QAAI,IAAJA,OAAA,EAAAA,EAAMjE,MAAO,GAClBC,SAAa,OAAJgE,QAAI,IAAJA,OAAA,EAAAA,EAAMhE,UAAW,GAE1BG,OAAW,OAAJ6D,QAAI,IAAJA,OAAA,EAAAA,EAAM7D,QAAS,GACtBC,QAAY,OAAJ4D,QAAI,IAAJA,OAAA,EAAAA,EAAM5D,SAAU,GACxBC,QAAY,OAAJ2D,QAAI,IAAJA,OAAA,EAAAA,EAAM3D,SAAU,GACxBC,QAAY,OAAJ0D,QAAI,IAAJA,OAAA,EAAAA,EAAM1D,SAAU,GACxBL,eAAmB,OAAJ+D,QAAI,IAAJA,OAAA,EAAAA,EAAM/D,gBAAiB,GACtCC,cAAkB,OAAJ8D,QAAI,IAAJA,OAAA,EAAAA,EAAM9D,eAAgB,GACpCK,KAAS,OAAJyD,QAAI,IAAJA,OAAA,EAAAA,EAAMzD,MAAO,GAClBC,KAAS,OAAJwD,QAAI,IAAJA,OAAA,EAAAA,EAAMxD,MAAO,GAClBC,WAAe,OAAJuD,QAAI,IAAJA,OAAA,EAAAA,EAAMvD,YAAa,KAC9BC,oBAAwB,OAAJsD,QAAI,IAAJA,OAAA,EAAAA,EAAMtD,qBAAsB,GAChDC,6BAAiC,OAAJqD,QAAI,IAAJA,OAAA,EAAAA,EAAMrD,8BAA+B,MAkOtD+D,cAAeA,YAMvB,+BAIJ,8BACGpD,IAA6B,QAAfA,GACb,cAAC,WAAD,CAAUmF,SAAU,2CAApB,SACE,cAAClI,EAAD,CACEmI,UAAW5F,EACXM,WAAYA,GACZqD,kBAAmBA,GACnB7D,cAAeA,EACfC,iBAAkBA,EAClBsC,qBAAsBA,OAI1B,cAAC,WAAD,CAAUsD,SAAU,2CAApB,SACE,cAACjI,EAAD,CACEkI,UAAW5F,EACXM,WAAYA,GACZqD,kBAAmBA,GACnB7D,cAAeA,EACfC,iBAAkBA,EAClBsC,qBAAsBA","file":"static/js/91.1897f1ed.chunk.js","sourcesContent":["import { useState, useEffect, lazy, Suspense, useRef } from \"react\";\nimport db from \"../../../firebase\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  Autocomplete,\n  Card,\n  Container,\n  Grid,\n  Stack,\n  TextField,\n  Typography,\n} from \"@mui/material\";\nimport {\n  selectCompanyList,\n  setCompanyList,\n} from \"../../../features/companySlice\";\nimport { getCompanies } from \"../../../components/core-functions/SelectionCoreFunctions\";\nimport useAuth from \"../../../hooks/useAuth\";\nimport { useSnackbar } from \"notistack\";\nimport {\n  setClientInvSelected,\n  setCompanyInvSelected,\n} from \"../../../features/invoiceSectionSlice\";\nimport { setLoading } from \"src/features/globalSlice\";\nimport useSettings from \"src/hooks/useSettings\";\n/* import readXlsxFile from \"read-excel-file\";\nimport firebase from \"firebase/compat\"; */\n\nconst TableCRUDTemplate = lazy(() =>\n  import(\"../../../components/table/TableCRUDTemplate\")\n);\nconst CreateClientDialog = lazy(() => import(\"./CreateClientDialog\"));\nconst UpdateClientDialog = lazy(() => import(\"./UpdateClientDialog\"));\n\nconst ClientDetail = () => {\n  const { themeStretch } = useSettings();\n\n  const dispatch = useDispatch();\n  const { enqueueSnackbar } = useSnackbar();\n  const { user } = useAuth();\n  const { companyList } = useSelector(selectCompanyList);\n\n  const [clientListOriginal, setClientListOriginal] = useState([]);\n  const [clientList, setClientList] = useState([]);\n  const [clientDetails, setClientDetails] = useState({\n    id: \"\",\n    companyRefId: \"\",\n    companyRefName: \"\",\n    name: \"\",\n    companyType: \"\",\n    // natureOfBusiness: \"\",\n    // incorDate: \"\",\n    // payeRegNo: \"\",\n    tan: \"\",\n    address: \"\",\n    // country: \"\",\n    contactNumber: \"\",\n    mobileNumber: \"\",\n    email: \"\",\n    email2: \"\",\n    email3: \"\",\n    email4: \"\",\n    brn: \"\",\n    nic: \"\",\n    buyerType: null,\n    representativeName: \"\",\n    representativeContactNumber: \"\",\n  });\n\n  const [companySearchId, setCompanySearchId] = useState(\"\");\n\n  const [selectedClient, setSelectedClient] = useState(null);\n\n  const [selectedCompany, setSelectedCompany] = useState(null);\n\n  const [openDialog, setOpenDialog] = useState(false);\n  const [dialogType, setDialogType] = useState(\"\");\n\n  const headers = [\n    { id: \"list\", label: \"List\" },\n    { id: \"update\", label: \"Update\" },\n    { id: \"delete\", label: \"Delete\" },\n    { id: \"name\", label: \"Name\" },\n    { id: \"companyType\", label: \"Type\" },\n    { id: \"address\", label: \"Address\" },\n    { id: \"contactNumber\", label: \"Contact number\" },\n    { id: \"mobileNumber\", label: \"Mobile_Number\" },\n    { id: \"email\", label: \"Email 1\" },\n    { id: \"email2\", label: \"Email 2\" },\n    { id: \"email3\", label: \"Email 3\" },\n    { id: \"email4\", label: \"Email 4\" },\n    { id: \"tan\", label: \"VAT\" },\n    { id: \"brn\", label: \"BRN\" },\n    { id: \"nic\", label: \"NIC\" },\n    { id: \"buyerType\", label: \"Buyer Type\" },\n    { id: \"representativeName\", label: \"Representative name\" },\n    {\n      id: \"representativeContactNumber\",\n      label: \"Representative contact number\",\n    },\n  ];\n\n  const temp_initMemberCompId = useRef();\n\n  const temp_initializeCompanies = useRef();\n\n  const temp_initializeClient = useRef();\n\n  const temp_filterClientsRef = useRef();\n\n  const temp_checkPermission_ref = useRef();\n\n  const [viewPermissionGranted, setViewPermissionGranted] = useState(false);\n\n  useEffect(() => {\n    temp_checkPermission_ref.current();\n  }, [companySearchId]);\n\n  function checkPermission() {\n    if (companySearchId) {\n      if (\n        !user?.permissions?.viewClientChk?.assignedCompanyId?.includes(\n          companySearchId\n        )\n      ) {\n        enqueueSnackbar(\n          \"You do not have the permission to view clients for this company\",\n          { variant: \"error\" }\n        );\n\n        setViewPermissionGranted(false);\n      } else {\n        setViewPermissionGranted(true);\n      }\n    }\n  }\n\n  temp_checkPermission_ref.current = checkPermission;\n\n  useEffect(() => {\n    temp_initMemberCompId.current();\n  }, [user]);\n\n  useEffect(() => {\n    temp_initializeCompanies.current();\n  }, [companyList]);\n\n  useEffect(() => {\n    if (companySearchId && viewPermissionGranted) {\n      temp_initializeClient.current();\n    } else {\n      setClientListOriginal([]);\n      setClientList([]);\n    }\n  }, [companySearchId, viewPermissionGranted]);\n\n  useEffect(() => {\n    temp_filterClientsRef.current();\n  }, [selectedClient]);\n\n  const _ue_initMemberCompId = async () => {\n    if (\n      user?.role === \"admin_member\" &&\n      user?.a_comp &&\n      user?.a_comp?.length > 0 &&\n      user?.permissions?.viewClientChk\n    ) {\n      if (user?.a_comp?.length === 1) {\n        setCompanySearchId(user?.a_comp[0]?.id);\n      }\n    }\n  };\n\n  temp_initMemberCompId.current = _ue_initMemberCompId;\n\n  const initializeCompanies = async () => {\n    // if (user?.id !== \"\" && user?.role !== \"admin_member\") {\n    if (companyList && companyList.length === 0) {\n      dispatch(setLoading(true));\n      let result = await getCompanies(user?.id, user?.a_comp, user?.role);\n\n      if (result.error) {\n        enqueueSnackbar(result.msg || \"\", { variant: result.variant });\n        dispatch(setLoading(false));\n      } else {\n        dispatch(setCompanyList(result));\n        dispatch(setLoading(false));\n      }\n    }\n    // }\n  };\n\n  temp_initializeCompanies.current = initializeCompanies;\n\n  const initializeClientList = async () => {\n    if (companySearchId && companySearchId !== \"\") {\n      dispatch(setLoading(true));\n      await db\n        .collection(\"company\")\n        .doc(process.env.REACT_APP_COMPANY_ID)\n        .collection(\"client\")\n        .orderBy(\"name\", \"asc\")\n        .get()\n        .then((snapshot) => {\n          var arr = [];\n          if (snapshot?.docs?.length > 0) {\n            snapshot.docs.forEach((doc) => {\n              if (doc.id !== \"--counterStatus--\") {\n                arr.push({\n                  id: doc?.id,\n                  data: doc?.data(),\n                  name: doc?.data()?.name || \"\",\n                  companyRefName: doc?.data()?.companyRefName || \"\",\n                  companyRefId: doc?.data()?.companyRefId || \"\",\n                  companyType: doc?.data()?.companyType || \"\",\n                  address: doc?.data()?.address || \"\",\n                  contactNumber: doc?.data()?.contactNumber || \"\",\n                  mobileNumber: doc?.data()?.mobileNumber || \"\",\n                  email: doc?.data()?.email || \"\",\n                  email2: doc?.data()?.email2 || \"\",\n                  email3: doc?.data()?.email3 || \"\",\n                  email4: doc?.data()?.email4 || \"\",\n                  tan: doc?.data()?.tan || \"\",\n                  brn: doc?.data()?.brn || \"\",\n                  nic: doc?.data()?.nic || \"\",\n                  buyerType: doc?.data()?.buyerType\n                    ? JSON.stringify(doc?.data()?.buyerType)\n                    : null,\n\n                  representativeName: doc?.data()?.representativeName || \"\",\n                  representativeContactNumber:\n                    doc?.data()?.representativeContactNumber || \"\",\n                });\n              }\n            });\n            setClientList(arr);\n            setClientListOriginal(arr);\n            dispatch(setLoading(false));\n          } else {\n            setClientList([]);\n            setClientListOriginal([]);\n            dispatch(setLoading(false));\n          }\n        })\n        .catch((err) => {\n          enqueueSnackbar(\n            `Error occured while fetching clients: ${err?.message}`,\n            { variant: \"error\" }\n          );\n          dispatch(setLoading(false));\n        });\n    }\n  };\n\n  temp_initializeClient.current = initializeClientList;\n\n  function filterClients() {\n    if (selectedClient) {\n      let newClientList = clientListOriginal.filter(\n        (client) => client?.id === selectedClient?.id\n      );\n      setClientList(newClientList);\n    } else {\n      setClientList([...clientListOriginal]);\n    }\n  }\n\n  temp_filterClientsRef.current = filterClients;\n\n  const handleCloseDialog = () => {\n    setOpenDialog(false);\n    setClientDetails({\n      id: \"\",\n      companyRefId: \"\",\n      companyRefName: \"\",\n      name: \"\",\n      companyType: \"\",\n      // natureOfBusiness: \"\",\n      // incorDate: \"\",\n      // payeRegNo: \"\",\n      tan: \"\",\n      address: \"\",\n      // country: \"\",\n      contactNumber: \"\",\n      mobileNumber: \"\",\n      email: \"\",\n      email2: \"\",\n      email3: \"\",\n      email4: \"\",\n      brn: \"\",\n      nic: \"\",\n      buyerType: null,\n      representativeName: \"\",\n      representativeContactNumber: \"\",\n    });\n  };\n\n  const addBtnFunc = () => {\n    setDialogType(\"add\");\n    setOpenDialog(true);\n    setClientDetails({\n      ...clientDetails,\n      id: \"\",\n      //companyRefId: \"\",\n      companyRefName: \"\",\n      name: \"\",\n      companyType: \"\",\n      // natureOfBusiness: \"\",\n      // incorDate: \"\",\n      // payeRegNo: \"\",\n      tan: \"\",\n      address: \"\",\n      // country: \"\",\n      contactNumber: \"\",\n      mobileNumber: \"\",\n      email: \"\",\n      email2: \"\",\n      email3: \"\",\n      email4: \"\",\n      brn: \"\",\n      nic: \"\",\n      buyerType: null,\n      representativeName: \"\",\n      representativeContactNumber: \"\",\n    });\n  };\n\n  const updateBtnFunc = (id, data) => {\n    setDialogType(\"update\");\n    setOpenDialog(true);\n    setClientDetails({\n      id: id,\n      name: data?.name || \"\",\n      companyRefId: data?.companyRefId || \"\",\n      companyRefName: data?.companyRefName || \"\",\n      companyType: data?.companyType || \"\",\n      // natureOfBusiness: data.natureOfBusiness,\n      // incorDate: data.incorDate,\n      // payeRegNo: data.payeRegNo,\n      tan: data?.tan || \"\",\n      address: data?.address || \"\",\n      // country: data.country,\n      email: data?.email || \"\",\n      email2: data?.email2 || \"\",\n      email3: data?.email3 || \"\",\n      email4: data?.email4 || \"\",\n      contactNumber: data?.contactNumber || \"\",\n      mobileNumber: data?.mobileNumber || \"\",\n      brn: data?.brn || \"\",\n      nic: data?.nic || \"\",\n      buyerType: data?.buyerType || null,\n      representativeName: data?.representativeName || \"\",\n      representativeContactNumber: data?.representativeContactNumber || \"\",\n    });\n  };\n\n  const deleteBtnFunc = async (id) => {\n    dispatch(setLoading(true));\n    await db\n      .collection(\"company\")\n      .doc(process.env.REACT_APP_COMPANY_ID)\n      .collection(\"client\")\n      .doc(id)\n      .delete()\n      .then(async () => {\n        initializeClientList();\n        dispatch(setCompanyInvSelected(undefined));\n        dispatch(setClientInvSelected(undefined));\n        dispatch(setLoading(false));\n      })\n      .catch((err) => {\n        enqueueSnackbar(\n          `Error occured while deleting a client: ${err?.message}`,\n          { variant: \"error\" }\n        );\n        dispatch(setLoading(false));\n      });\n  };\n\n  // const onFileChange = async (e) => {\n  //   if (e.target.files?.length > 0) {\n  //     let o_file = e.target.files[0];\n  //     dispatch(setLoading(true));\n\n  //     await readXlsxFile(o_file).then(async (rows) => {\n  //       // check if first row contain title\n  //       if (rows[0]?.length === 1) {\n  //         rows.shift();\n  //       }\n\n  //       // check if first row has 2nd column named as Name -> remove if present\n  //       if (rows[0][0] === \"Table 1\") {\n  //         rows.shift();\n  //       }\n\n  //       // check if first row has 2nd column named as Name -> remove if present\n  //       if (rows[0][0] === \"Name\") {\n  //         rows.shift();\n  //       }\n\n  //       for (let i = 0; i < rows?.length; i++) {\n  //         let name = rows[i][0] || \"\";\n  //         name = name\n  //           .trim() // Remove leading and trailing spaces\n  //           .replace(/\\s+/g, \" \") // Replace multiple spaces with a single space\n  //           .toLowerCase() // Convert to lowercase\n  //           .replace(/\\b\\w/g, (char) => char.toUpperCase()); // Capitalize first letter of each word\n\n  //         await db\n  //           .collection(\"company\")\n  //           .doc(companySearchId)\n  //           .collection(\"client\")\n  //           .add({\n  //             name: name || \"\",\n  //             companyRefId: clientDetails?.companyRefId || \"\",\n  //             companyRefName: clientDetails?.companyRefName || \"\",\n  //             companyType: \"\",\n  //             tan: \"\",\n  //             address: rows[i][1] || \"\",\n  //             email: rows[i][5] || \"\",\n  //             contactNumber: rows[i][2] || \"\",\n  //             mobileNumber: rows[i][3] || \"\",\n  //             brn: \"\",\n  //             nic: rows[i][4] || \"\",\n  //             buyerType: null,\n  //             timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n  //           });\n  //       }\n  //     });\n  //   }\n  // };\n\n  return (\n    <Container maxWidth={themeStretch ? false : \"xl\"}>\n      {/*   <TextField\n        className=\"uploadInput\"\n        variant=\"outlined\"\n        size=\"small\"\n        //fullWidth\n        name=\"excel\"\n        type=\"file\"\n        id=\"excel\"\n        accept=\".xlsx\"\n        onChange={(event) => onFileChange(event)}\n      /> */}\n      {/* \n      <div\n        style={{\n          display: !user?.permissions?.viewClientChk ? \"\" : \"none\",\n        }}\n      >\n        <Alert severity=\"error\">\n          Sorry, you do not have access to this section. Please contact Admin\n          for more info. Thank you.\n        </Alert>\n      </div>\n      <div\n        style={{\n          display: user?.permissions?.viewClientChk ? \"\" : \"none\",\n        }}\n      > */}\n      <div\n        style={{\n          display:\n            user?.role === \"admin_member\" &&\n            user?.a_comp &&\n            user?.a_comp?.length === 1\n              ? \"none\"\n              : \"\",\n        }}\n      >\n        <Card>\n          <Stack sx={{ p: 3 }}>\n            <Grid container>\n              <Grid item xs={12} md={4}>\n                <Autocomplete\n                  ListboxProps={{ style: { maxHeight: \"70vh\" } }}\n                  size=\"small\"\n                  label=\"Please select company\"\n                  id=\"client-drop-down\"\n                  options={companyList || []}\n                  value={selectedCompany || null}\n                  renderInput={(params) => (\n                    <TextField {...params} label=\"Please select company\" />\n                  )}\n                  onChange={(e, value, reason) => {\n                    if (\n                      reason !== \"removeOption\" &&\n                      reason !== \"clear\" &&\n                      value\n                    ) {\n                      setCompanySearchId(value?.id);\n                      setSelectedCompany(value);\n                    } else if (\n                      reason === \"removeOption\" ||\n                      reason === \"clear\"\n                    ) {\n                      setCompanySearchId(\"\");\n                      setSelectedCompany(null);\n                    }\n                  }}\n                  getOptionLabel={(option) => option?.name || \"\"}\n                  renderOption={(props, option) => (\n                    <li {...props} key={option?.id}>\n                      <span>{option?.name || \"\"}</span>\n                    </li>\n                  )}\n                />\n              </Grid>\n            </Grid>\n          </Stack>\n        </Card>\n        <br />\n      </div>\n\n      <Grid container spacing={3}>\n        {companySearchId && viewPermissionGranted && clientList ? (\n          <>\n            <Grid item xs={12} md={12}>\n              <Typography>{`${clientList?.length} clients retrieved`}</Typography>{\" \"}\n            </Grid>\n\n            {clientList?.length > 0 ? (\n              <Grid item xs={12} md={4}>\n                <Autocomplete\n                  ListboxProps={{ style: { maxHeight: \"70vh\" } }}\n                  size=\"small\"\n                  label=\"Search client\"\n                  id=\"client-drop-down\"\n                  options={clientListOriginal || []}\n                  value={selectedClient || null}\n                  renderInput={(params) => (\n                    <TextField {...params} label=\"Search client\" />\n                  )}\n                  onChange={(e, value, reason) => {\n                    if (\n                      reason !== \"removeOption\" &&\n                      reason !== \"clear\" &&\n                      value\n                    ) {\n                      setSelectedClient(value);\n                    } else if (\n                      reason === \"removeOption\" ||\n                      reason === \"clear\"\n                    ) {\n                      setSelectedClient(null);\n                    }\n                  }}\n                  getOptionLabel={(option) => option?.name || \"\"}\n                  renderOption={(props, option) => (\n                    <li {...props} key={option?.id}>\n                      <span>{option?.name || \"\"}</span>\n                    </li>\n                  )}\n                />\n              </Grid>\n            ) : (\n              <></>\n            )}\n\n            <Grid item xs={12} md={12}>\n              <Suspense fallback={<p>Loading...</p>}>\n                <TableCRUDTemplate\n                  companyId={companySearchId}\n                  type=\"client\"\n                  headers={headers}\n                  aCollection={clientList}\n                  addBtnDisplay={selectedCompany ? true : false}\n                  addBtnLabel={\"Create a client\"}\n                  addBtnFunc={addBtnFunc}\n                  openDialog={openDialog}\n                  handleCloseDialog={handleCloseDialog}\n                  emptyColMsg={\n                    \"Sorry, not a single client has been created yet. Please create a client.\"\n                  }\n                  updateBtnDisplay={true}\n                  deleteBtnDisplay={true}\n                  updateBtnFunc={updateBtnFunc}\n                  deleteBtnFunc={deleteBtnFunc}\n                />\n              </Suspense>\n            </Grid>\n          </>\n        ) : (\n          <></>\n        )}\n      </Grid>\n\n      <div>\n        {dialogType && dialogType === \"add\" ? (\n          <Suspense fallback={<p>Loading...</p>}>\n            <CreateClientDialog\n              companyId={companySearchId}\n              openDialog={openDialog}\n              handleCloseDialog={handleCloseDialog}\n              clientDetails={clientDetails}\n              setClientDetails={setClientDetails}\n              initializeClientList={initializeClientList}\n            />\n          </Suspense>\n        ) : (\n          <Suspense fallback={<p>Loading...</p>}>\n            <UpdateClientDialog\n              companyId={companySearchId}\n              openDialog={openDialog}\n              handleCloseDialog={handleCloseDialog}\n              clientDetails={clientDetails}\n              setClientDetails={setClientDetails}\n              initializeClientList={initializeClientList}\n            />\n          </Suspense>\n        )}\n      </div>\n      {/*       </div> */}\n    </Container>\n  );\n};\n\nexport default ClientDetail;\n"],"sourceRoot":""}