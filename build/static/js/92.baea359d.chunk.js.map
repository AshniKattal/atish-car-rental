{"version":3,"sources":["pages/dashboard/manage-client/CreateClientDialog.js"],"names":["useStyles","makeStyles","theme","root","width","backButton","marginRight","spacing","instructions","marginTop","marginBottom","selectAllText","fontWeight","selectedAll","backgroundColor","indeterminateColor","color","palette","primary","getStepContent","stepIndex","CreateClientDialog","companyId","openDialog","handleCloseDialog","clientDetails","setClientDetails","initializeClientList","enqueueSnackbar","useSnackbar","name","companyRefId","companyRefName","companyType","tan","address","email","email2","email3","email4","contactNumber","mobileNumber","brn","nic","buyerType","representativeName","representativeContactNumber","classes","dispatch","useDispatch","snackbar","useSelector","selectSnackbar","useState","activeStep","setActiveStep","steps","errorBool","errorMsg","error","setError","addClient","a","setLoading","db","collection","doc","process","add","timestamp","firebase","firestore","FieldValue","serverTimestamp","then","setCompanyIdSelected","undefined","setCompanyDetails","setClientDocumentIdSelected","setClientDocumentObjectSelected","catch","message","setSnackbar","counter","variant","style","maxWidth","fullWidth","open","onClose","id","height","container","display","flexDirection","justifyContent","alignItems","item","xs","sm","align","className","alternativeLabel","map","label","severity","md","required","type","size","value","onChange","event","target","native","placeholder","inputProps","ListboxProps","maxHeight","options","JSON","parse","renderInput","params","e","reason","preventDefault","getOptionLabel","option","title","length","onClick","disabled","prevActiveStep"],"mappings":"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","file":"static/js/92.baea359d.chunk.js","sourcesContent":["import {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  FormControl,\n  Grid,\n  Select,\n  Table,\n  TableBody,\n  TableCell,\n  TableRow,\n  TextField,\n  Typography,\n  Stepper,\n  Step,\n  StepLabel,\n  Alert,\n  Autocomplete,\n} from \"@mui/material\";\nimport { useState } from \"react\";\nimport db from \"../../../firebase\";\nimport firebase from \"firebase/compat\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectSnackbar, setSnackbar } from \"../../../features/snackbarSlice\";\nimport { setLoading } from \"../../../features/globalSlice\";\nimport { useSnackbar } from \"notistack\";\nimport {\n  setClientDocumentIdSelected,\n  setClientDocumentObjectSelected,\n  setCompanyDetails,\n  setCompanyIdSelected,\n} from \"../../../features/documentSlice\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: \"100%\",\n  },\n  backButton: {\n    marginRight: theme.spacing(1),\n  },\n  instructions: {\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1),\n  },\n  selectAllText: {\n    fontWeight: 500,\n  },\n  selectedAll: {\n    backgroundColor: \"rgba(0, 0, 0, 0.08)\",\n    \"&:hover\": {\n      backgroundColor: \"rgba(0, 0, 0, 0.08)\",\n    },\n  },\n  indeterminateColor: {\n    color: theme.palette.primary,\n  },\n}));\n\nfunction getSteps() {\n  return [\"Tell us\", \"Contact Info\", \"Save & Finish\"];\n}\n\nfunction getStepContent(stepIndex) {\n  switch (stepIndex) {\n    case 0:\n      return \"Tell us about your business\";\n    case 1:\n      return \"Enter your business contact information\";\n    /* case 2:\n      return 'Enter absence quota that will be applied to all employees'; */\n    case 2:\n      return \"You are all done!\";\n    default:\n      return \"Unknown stepIndex\";\n  }\n}\n\nfunction CreateClientDialog({\n  companyId,\n  openDialog,\n  handleCloseDialog,\n  clientDetails,\n  setClientDetails,\n  initializeClientList,\n}) {\n  const { enqueueSnackbar } = useSnackbar();\n\n  const {\n    name,\n    companyRefId,\n    companyRefName,\n    companyType,\n    tan,\n    address,\n    email,\n    email2,\n    email3,\n    email4,\n    contactNumber,\n    mobileNumber,\n    brn,\n    nic,\n    buyerType,\n    representativeName,\n    representativeContactNumber,\n  } = clientDetails;\n\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const snackbar = useSelector(selectSnackbar);\n  const [activeStep, setActiveStep] = useState(0);\n  const steps = getSteps();\n  const [error, setError] = useState({\n    errorBool: false,\n    errorMsg: \"\",\n  });\n  const { errorBool, errorMsg } = error;\n\n  const handleNext = () => {\n    if (activeStep === 0) {\n      if (name === \"\") {\n        setError({\n          errorBool: true,\n          errorMsg: \"Please enter a name\",\n        });\n      } else {\n        setError({\n          errorBool: false,\n          errorMsg: \"\",\n        });\n        setActiveStep((prevActiveStep) => prevActiveStep + 1);\n      }\n    } else if (activeStep === 2) {\n      setError({\n        errorBool: false,\n        errorMsg: \"\",\n      });\n      addClient();\n      setActiveStep(0);\n    } else {\n      setError({\n        errorBool: false,\n        errorMsg: \"\",\n      });\n      setActiveStep((prevActiveStep) => prevActiveStep + 1);\n    }\n  };\n\n  const handleBack = () => {\n    setActiveStep((prevActiveStep) => prevActiveStep - 1);\n  };\n\n  const handleReset = () => {\n    setActiveStep(0);\n  };\n\n  const addClient = async () => {\n    if (process.env.REACT_APP_COMPANY_ID) {\n      dispatch(setLoading(true));\n\n      await db\n        .collection(\"company\")\n        .doc(process.env.REACT_APP_COMPANY_ID)\n        .collection(\"client\")\n        .add({\n          name: name || \"\",\n          companyRefId: companyRefId || \"\",\n          companyRefName: companyRefName || \"\",\n          companyType: companyType || \"\",\n          tan: tan || \"\",\n          address: address || \"\",\n          email: email || \"\",\n          email2: email2 || \"\",\n          email3: email3 || \"\",\n          email4: email4 || \"\",\n          contactNumber: contactNumber || \"\",\n          mobileNumber: mobileNumber || \"\",\n          brn: brn || \"\",\n          nic: nic || \"\",\n          buyerType: buyerType || null,\n          representativeName: representativeName || \"\",\n          representativeContactNumber: representativeContactNumber || \"\",\n          timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n        })\n        .then(() => {\n          enqueueSnackbar(`Client added successfully`);\n          dispatch(setLoading(false));\n\n          // reset company id\n          dispatch(setCompanyIdSelected(undefined));\n\n          // reset company details\n          dispatch(setCompanyDetails(null));\n\n          dispatch(setClientDocumentIdSelected(undefined));\n\n          dispatch(setClientDocumentObjectSelected(undefined));\n\n          handleCloseDialog();\n\n          if (initializeClientList) {\n            initializeClientList();\n          }\n        })\n        .catch((error) => {\n          enqueueSnackbar(\n            `Error occured while adding client: ${error?.message}`\n          );\n          dispatch(setLoading(false));\n        });\n    } else {\n      dispatch(\n        setSnackbar({\n          counter: snackbar.counter + 1,\n          message:\n            \"Your session has been terminated due to greater than 30 minutes of inactivity. Please log in again.\",\n          variant: \"error\",\n        })\n      );\n    }\n  };\n\n  return (\n    <>\n      <Dialog\n        style={{ width: \"100%\" }}\n        maxWidth=\"md\"\n        fullWidth\n        open={openDialog}\n        onClose={handleCloseDialog}\n      >\n        <DialogTitle id=\"alert-dialog-title\">Create a company</DialogTitle>\n        <DialogContent style={{ height: \"auto\" }}>\n          <Grid\n            container\n            style={{\n              width: \"100%\",\n              display: \"flex\",\n              flexDirection: \"row\",\n              justifyContent: \"center\",\n              alignItems: \"center\",\n            }}\n          >\n            <Grid item xs={12} sm={6}>\n              <Typography variant=\"h6\" align=\"left\" color=\"primary\">\n                {getStepContent(activeStep)}\n              </Typography>\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <div className={classes.root}>\n                <Stepper activeStep={activeStep} alternativeLabel>\n                  {steps.map((label) => (\n                    <Step key={label}>\n                      <StepLabel>{label}</StepLabel>\n                    </Step>\n                  ))}\n                </Stepper>\n              </div>\n            </Grid>\n          </Grid>\n          <Alert\n            variant=\"filled\"\n            severity=\"error\"\n            style={{ display: errorBool ? \"\" : \"none\" }}\n          >\n            {errorMsg}\n          </Alert>\n          <div style={{ display: activeStep === 0 ? \"\" : \"none\" }}>\n            <br />\n            <hr />\n            <Grid container spacing={3} style={{ marginTop: \"1em\" }}>\n              <Grid item xs={12} sm={6} md={4}>\n                <TextField\n                  variant=\"outlined\"\n                  required\n                  fullWidth\n                  name=\"name\"\n                  label=\"Name\"\n                  type=\"text\"\n                  id=\"name\"\n                  size=\"small\"\n                  value={name || \"\"}\n                  onChange={(event) => {\n                    setClientDetails({\n                      ...clientDetails,\n                      name: event.target.value,\n                    });\n                  }}\n                />\n              </Grid>\n              <Grid item xs={12} sm={6} md={4}>\n                <FormControl size=\"small\" variant=\"outlined\" fullWidth>\n                  <Select\n                    size=\"small\"\n                    native\n                    //label=\"Company Type\"\n                    placeholder=\"Please choose a company type\"\n                    value={companyType || \"\"}\n                    onChange={(event) => {\n                      setClientDetails({\n                        ...clientDetails,\n                        companyType: event.target.value,\n                      });\n                    }}\n                    inputProps={{\n                      name: \"companyType\",\n                      id: \"companyType\",\n                    }}\n                  >\n                    <option value=\"\">Please choose a Company Type</option>\n                    <option value=\"Individual\">Individual</option>\n                    <option value=\"Company\">Company</option>\n                    <option value=\"Other\">Other</option>\n                  </Select>\n                </FormControl>\n              </Grid>\n              <Grid item xs={12} sm={6} md={4}>\n                <TextField\n                  size=\"small\"\n                  variant=\"outlined\"\n                  fullWidth\n                  name=\"tan\"\n                  label=\"VAT\"\n                  type=\"number\"\n                  id=\"tan\"\n                  value={tan || \"\"}\n                  onChange={(event) => {\n                    setClientDetails({\n                      ...clientDetails,\n                      tan: event.target.value,\n                    });\n                  }}\n                />\n              </Grid>\n              <Grid item xs={12} sm={6} md={4}>\n                <TextField\n                  variant=\"outlined\"\n                  size=\"small\"\n                  fullWidth\n                  name=\"brn\"\n                  label=\"BRN\"\n                  type=\"text\"\n                  id=\"brn\"\n                  value={brn || \"\"}\n                  onChange={(event) => {\n                    setClientDetails({\n                      ...clientDetails,\n                      brn: event.target.value,\n                    });\n                  }}\n                />\n              </Grid>\n              <Grid item xs={12} sm={6} md={4}>\n                <TextField\n                  variant=\"outlined\"\n                  size=\"small\"\n                  fullWidth\n                  name=\"nic\"\n                  label=\"NIC\"\n                  type=\"text\"\n                  id=\"nic\"\n                  value={nic || \"\"}\n                  onChange={(event) => {\n                    setClientDetails({\n                      ...clientDetails,\n                      nic: event.target.value,\n                    });\n                  }}\n                />\n              </Grid>\n              <Grid item xs={12} sm={6} md={4}>\n                <Autocomplete\n                  ListboxProps={{ style: { maxHeight: \"70vh\" } }}\n                  size=\"small\"\n                  label=\"Please define type of buyer\"\n                  id=\"buyer-type-drop-down\"\n                  options={\n                    process.env.REACT_APP_EBS_BUYER_TYPE_VALUES\n                      ? JSON.parse(process.env.REACT_APP_EBS_BUYER_TYPE_VALUES)\n                      : []\n                  }\n                  value={buyerType}\n                  renderInput={(params) => (\n                    <TextField\n                      {...params}\n                      label=\"Please define type of buyer\"\n                    />\n                  )}\n                  onChange={(e, value, reason) => {\n                    e.preventDefault();\n                    if (\n                      reason !== \"removeOption\" &&\n                      reason !== \"clear\" &&\n                      value\n                    ) {\n                      setClientDetails({\n                        ...clientDetails,\n                        buyerType: value,\n                      });\n                    } else if (\n                      reason === \"removeOption\" ||\n                      reason === \"clear\"\n                    ) {\n                      setClientDetails({\n                        ...clientDetails,\n                        buyerType: null,\n                      });\n                    }\n                  }}\n                  getOptionLabel={(option) => option?.title || \"\"}\n                  fullWidth\n                />\n              </Grid>\n            </Grid>\n          </div>\n          <div style={{ display: activeStep === 1 ? \"\" : \"none\" }}>\n            <br />\n            <hr />\n            <Grid container spacing={3} style={{ marginTop: \"1em\" }}>\n              <Grid item xs={12} sm={6} md={4}>\n                <TextField\n                  size=\"small\"\n                  variant=\"outlined\"\n                  fullWidth\n                  name=\"address\"\n                  label=\"Address\"\n                  type=\"text\"\n                  id=\"address\"\n                  value={address || \"\"}\n                  onChange={(event) => {\n                    setClientDetails({\n                      ...clientDetails,\n                      address: event.target.value,\n                    });\n                  }}\n                />\n              </Grid>\n              <Grid item xs={12} sm={6} md={4}>\n                <TextField\n                  size=\"small\"\n                  variant=\"outlined\"\n                  fullWidth\n                  name=\"contactNumber\"\n                  label=\"Contact Number\"\n                  type=\"text\"\n                  id=\"contactNumber\"\n                  value={contactNumber || \"\"}\n                  onChange={(event) => {\n                    setClientDetails({\n                      ...clientDetails,\n                      contactNumber: event.target.value,\n                    });\n                  }}\n                />\n              </Grid>\n\n              <Grid item xs={12} sm={6} md={4}>\n                <TextField\n                  size=\"small\"\n                  variant=\"outlined\"\n                  fullWidth\n                  name=\"mobileNumber\"\n                  label=\"Mobile Number\"\n                  type=\"text\"\n                  id=\"mobileNumber\"\n                  value={mobileNumber || \"\"}\n                  onChange={(event) => {\n                    setClientDetails({\n                      ...clientDetails,\n                      mobileNumber: event.target.value,\n                    });\n                  }}\n                />\n              </Grid>\n              <Grid item xs={12} sm={6} md={4}>\n                <TextField\n                  size=\"small\"\n                  variant=\"outlined\"\n                  fullWidth\n                  name=\"email\"\n                  label=\"Email 1\"\n                  type=\"text\"\n                  id=\"email\"\n                  value={email || \"\"}\n                  onChange={(event) => {\n                    setClientDetails({\n                      ...clientDetails,\n                      email: event.target.value,\n                    });\n                  }}\n                />\n              </Grid>\n\n              <Grid item xs={12} sm={6} md={4}>\n                <TextField\n                  size=\"small\"\n                  variant=\"outlined\"\n                  fullWidth\n                  name=\"email2\"\n                  label=\"Email 2\"\n                  type=\"text\"\n                  id=\"email2\"\n                  value={email2 || \"\"}\n                  onChange={(event) => {\n                    setClientDetails({\n                      ...clientDetails,\n                      email2: event.target.value,\n                    });\n                  }}\n                />\n              </Grid>\n\n              <Grid item xs={12} sm={6} md={4}>\n                <TextField\n                  size=\"small\"\n                  variant=\"outlined\"\n                  fullWidth\n                  name=\"email3\"\n                  label=\"Email 3\"\n                  type=\"text\"\n                  id=\"email3\"\n                  value={email3 || \"\"}\n                  onChange={(event) => {\n                    setClientDetails({\n                      ...clientDetails,\n                      email3: event.target.value,\n                    });\n                  }}\n                />\n              </Grid>\n\n              <Grid item xs={12} sm={6} md={4}>\n                <TextField\n                  size=\"small\"\n                  variant=\"outlined\"\n                  fullWidth\n                  name=\"email4\"\n                  label=\"Email 4\"\n                  type=\"text\"\n                  id=\"email4\"\n                  value={email4 || \"\"}\n                  onChange={(event) => {\n                    setClientDetails({\n                      ...clientDetails,\n                      email4: event.target.value,\n                    });\n                  }}\n                />\n              </Grid>\n\n              <Grid item xs={12} sm={6} md={4}>\n                <TextField\n                  size=\"small\"\n                  variant=\"outlined\"\n                  fullWidth\n                  name=\"representativeName\"\n                  label=\"Representative name\"\n                  type=\"text\"\n                  id=\"representativeName\"\n                  value={representativeName || \"\"}\n                  onChange={(event) => {\n                    setClientDetails({\n                      ...clientDetails,\n                      representativeName: event.target.value,\n                    });\n                  }}\n                />\n              </Grid>\n\n              <Grid item xs={12} sm={6} md={4}>\n                <TextField\n                  size=\"small\"\n                  variant=\"outlined\"\n                  fullWidth\n                  name=\"representativeContactNumber\"\n                  label=\"Representative contact number\"\n                  type=\"text\"\n                  id=\"representativeContactNumber\"\n                  value={representativeContactNumber || \"\"}\n                  onChange={(event) => {\n                    setClientDetails({\n                      ...clientDetails,\n                      representativeContactNumber: event.target.value,\n                    });\n                  }}\n                />\n              </Grid>\n            </Grid>\n          </div>\n\n          <div\n            style={{\n              display: activeStep === 2 ? \"\" : \"none\",\n              width: \"100%\",\n              height: \"100%\",\n            }}\n          >\n            <Table>\n              <TableBody>\n                <TableRow>\n                  <TableCell>Name:</TableCell>\n                  <TableCell>{name || \"\"}</TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell>Company Type:</TableCell>\n                  <TableCell>{companyType || \"\"}</TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell>VAT:</TableCell>\n                  <TableCell>{tan || \"\"}</TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell>BRN:</TableCell>\n                  <TableCell>{brn || \"\"}</TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell>NIC:</TableCell>\n                  <TableCell>{nic || \"\"}</TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell>Address:</TableCell>\n                  <TableCell>{address || \"\"}</TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell>Contact Number:</TableCell>\n                  <TableCell>{contactNumber || \"\"}</TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell>Mobile Number:</TableCell>\n                  <TableCell>{mobileNumber || \"\"}</TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell>Email:</TableCell>\n                  <TableCell>{email || \"\"}</TableCell>\n                </TableRow>\n              </TableBody>\n            </Table>\n          </div>\n        </DialogContent>\n        <DialogActions>\n          <div>\n            {activeStep === steps.length ? (\n              <div>\n                <Typography className={classes.instructions}>\n                  All steps completed\n                </Typography>\n                <Button onClick={handleReset}>Reset</Button>\n              </div>\n            ) : (\n              <div>\n                <Button\n                  disabled={activeStep === 0}\n                  onClick={handleBack}\n                  className={classes.backButton}\n                  variant=\"outlined\"\n                >\n                  Back\n                </Button>\n                <Button\n                  variant=\"contained\"\n                  color=\"primary\"\n                  onClick={handleNext}\n                  className={classes.backButton}\n                >\n                  {activeStep === steps.length - 1 ? \"Save\" : \"Next\"}\n                </Button>\n              </div>\n            )}\n          </div>\n          <Button onClick={handleCloseDialog} color=\"error\" variant=\"outlined\">\n            Cancel\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  );\n}\n\nexport default CreateClientDialog;\n"],"sourceRoot":""}