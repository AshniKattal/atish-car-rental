{"version":3,"sources":["pages/dashboard/manage-admin/UpdateAdminDialog.js"],"names":["UpdateAdminDialog","openDialog","handleCloseDialog","adminDetails","setAdminDetails","init_admin_list","id","useAuth","user","firstName","lastName","contactNumber","password","email","role","access","sysFunc","a_comp","dispatch","useDispatch","enqueueSnackbar","useSnackbar","useState","step","setStep","us_b_modified","set_us_b_modified","selectedCompanies","set_selectedCompanies","temp_setUpPermissions","useRef","a","undefined","getPermissions","arr","length","_reArrangeSysFunc","useEffect","current","a_sysFunc","a_new_sysFunc","forEach","o_val","a_filer","filter","e","name","push","open","maxWidth","fullWidth","style","height","type","dialogType","spacing","direction","onClick","color","variant","setLoading","preventDefault","ValidateEmptyInput","ValidatePassword","userObjectParams","functions","httpsCallable","updateUserByAdmin","then","result","data","catch","err","msg","message","updateAdmin"],"mappings":"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","file":"static/js/89.a8c0a983.chunk.js","sourcesContent":["import {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  FormControl,\n  MenuItem,\n  Select,\n  TextField,\n  Typography,\n  TableContainer,\n  Table,\n  TableHead,\n  TableBody,\n  TableRow,\n  TableCell,\n  Checkbox,\n  Stack,\n  Autocomplete,\n  Divider,\n} from \"@mui/material\";\nimport { useEffect, useRef, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { setLoading } from \"../../../features/globalSlice\";\nimport db, { functions } from \"../../../firebase\";\nimport {\n  ValidatePassword,\n  ValidateEmptyInput,\n} from \"../../../components/core-functions/SelectionCoreFunctions\";\nimport { useSnackbar } from \"notistack\";\nimport { getPermissions } from \"../permisssions/Permissions\";\n// import { getPermissionsSuperAdmin } from \"../manage-super-admin/Permissions\";\nimport useAuth from \"../../../hooks/useAuth\";\nimport AdminStep1 from \"./AdminStep1\";\nimport AdminStepPermission from \"./AdminStepPermission\";\n\nfunction UpdateAdminDialog({\n  openDialog,\n  handleCloseDialog,\n  adminDetails,\n  setAdminDetails,\n  init_admin_list,\n}) {\n  const { user } = useAuth();\n\n  const {\n    id,\n    firstName,\n    lastName,\n    contactNumber,\n    email,\n    password,\n    role,\n    access,\n    sysFunc,\n    a_comp,\n  } = adminDetails;\n  const dispatch = useDispatch();\n  const { enqueueSnackbar } = useSnackbar();\n  const [step, setStep] = useState(0);\n\n  const [us_b_modified, set_us_b_modified] = useState(false);\n\n  const [selectedCompanies, set_selectedCompanies] = useState([]);\n\n  const temp_setUpPermissions = useRef();\n\n  useEffect(() => {\n    temp_setUpPermissions.current();\n  }, [sysFunc, openDialog]);\n\n  async function setUpPermissions() {\n    if (sysFunc === undefined && openDialog) {\n      let arr = await getPermissions(true);\n      setAdminDetails({\n        ...adminDetails,\n        sysFunc: arr,\n      });\n    } else if (!us_b_modified && sysFunc?.length > 0 && openDialog) {\n      /**\n       * check if the permission stored contains all the new permissions if added.\n       */\n      _reArrangeSysFunc(sysFunc);\n    }\n  }\n\n  temp_setUpPermissions.current = setUpPermissions;\n\n  const _reArrangeSysFunc = async (a_sysFunc) => {\n    let a_new_sysFunc = [];\n    let a_default_sysFunc = await getPermissions(false);\n    a_default_sysFunc.forEach((o_val) => {\n      let a_filer = a_sysFunc.filter((e) => e.name === o_val.name);\n      if (a_filer?.length === 0) {\n        /* a_sysFunc does not contain the permission */\n        a_new_sysFunc.push(o_val);\n      } else {\n        a_new_sysFunc.push(a_filer[0]);\n      }\n    });\n    setAdminDetails({\n      ...adminDetails,\n      sysFunc: a_new_sysFunc,\n    });\n    set_us_b_modified(true);\n  };\n\n  const updateAdmin = (e) => {\n    dispatch(setLoading(true));\n    e.preventDefault();\n    if (\n      !ValidateEmptyInput([\n        firstName,\n        lastName,\n        contactNumber,\n        // email,\n        password,\n        role,\n      ])\n    ) {\n      enqueueSnackbar(\"Please fill in all the inputs\", { variant: \"error\" });\n      dispatch(setLoading(false));\n    } else if (!ValidatePassword(password)) {\n      enqueueSnackbar(\"Password must be equal or greater than 6 characters\", {\n        variant: \"error\",\n      });\n      dispatch(setLoading(false));\n    } else {\n      let userObjectParams = {\n        id: id,\n        firstName: firstName,\n        lastName: lastName,\n        contactNumber: contactNumber,\n        // email: email,\n        password: password,\n        role: role,\n        access: access,\n        sysFunc: sysFunc,\n        a_comp: a_comp || [],\n      };\n\n      const updateUserByAdmin = functions.httpsCallable(\"updateuserbyadminnew\");\n      updateUserByAdmin({\n        ...userObjectParams,\n      })\n        .then((result) => {\n          if (init_admin_list) {\n            init_admin_list();\n          }\n          enqueueSnackbar(result?.data?.result || \"\", { variant: \"success\" });\n\n          handleCloseDialog();\n          set_us_b_modified(false);\n          setStep(0);\n\n          dispatch(setLoading(false));\n        })\n        .catch((err) => {\n          let msg = \"\";\n          if (err.message) {\n            msg = err.message;\n          } else {\n            msg = err;\n          }\n          enqueueSnackbar(msg, { variant: \"error\" });\n\n          setStep(0);\n          handleCloseDialog();\n          set_us_b_modified(false);\n\n          dispatch(setLoading(false));\n        });\n    }\n  };\n\n  const handleChkChange = (e, index, name) => {\n    let arr = [...sysFunc];\n    let newArr = [];\n    for (let i = 0; i < arr.length; i++) {\n      if (i === index) {\n        newArr.push({\n          ...arr[i],\n          [name]: e.target.checked,\n        });\n      } else {\n        newArr.push(arr[i]);\n      }\n    }\n    setAdminDetails({\n      ...adminDetails,\n      sysFunc: newArr,\n    });\n  };\n\n  const assignAll = async () => {\n    let arr = await getPermissions(true);\n    setAdminDetails({\n      ...adminDetails,\n      sysFunc: arr,\n    });\n  };\n\n  const none = async () => {\n    let arr = await getPermissions(false);\n    setAdminDetails({\n      ...adminDetails,\n      sysFunc: arr,\n    });\n  };\n\n  async function onHandleRoleChange(value) {\n    if (value === \"Admin\") {\n      let arr = await getPermissions(true);\n      setAdminDetails({\n        ...adminDetails,\n        sysFunc: arr,\n        role: value,\n      });\n    } else if (value === \"SalePerson\") {\n      let arr = await getPermissions(false);\n      if (arr?.length > 0) {\n        let newPermissions = [];\n        arr.forEach((permission) => {\n          if (\n            permission.name === \"viewQuotation\" ||\n            permission.name === \"createQuotation\" ||\n            permission.name === \"updateQuotation\"\n          ) {\n            newPermissions.push({\n              ...permission,\n              [permission.name]: true,\n            });\n          } else {\n            newPermissions.push(permission);\n          }\n        });\n        setAdminDetails({\n          ...adminDetails,\n          sysFunc: newPermissions,\n          role: value,\n        });\n      }\n    } else if (value === \"Secretary\") {\n      let arr = await getPermissions(false);\n      if (arr?.length > 0) {\n        let newPermissions = [];\n        arr.forEach((permission) => {\n          if (\n            permission.name === \"accessPaymentExpense\" ||\n            permission.name === \"addExpense\" ||\n            permission.name === \"viewQuotation\" ||\n            permission.name === \"updateQuotation\" ||\n            permission.name === \"viewQuotation\" ||\n            permission.name === \"createQuotation\" ||\n            permission.name === \"viewInvoice\" ||\n            permission.name === \"createInvoice\" ||\n            permission.name === \"viewVatInvoice\" ||\n            permission.name === \"createVatInvoice\" ||\n            permission.name === \"viewPurchaseOrder\" ||\n            permission.name === \"createPurchaseOrder\" ||\n            permission.name === \"viewProforma\" ||\n            permission.name === \"createProforma\" ||\n            permission.name === \"viewCreditNote\" ||\n            permission.name === \"createCreditNote\" ||\n            permission.name === \"viewUnpaidInvoiceOnly\"\n          ) {\n            newPermissions.push({\n              ...permission,\n              [permission.name]: true,\n            });\n          } else {\n            newPermissions.push(permission);\n          }\n        });\n        setAdminDetails({\n          ...adminDetails,\n          sysFunc: newPermissions,\n          role: value,\n        });\n      }\n    }\n  }\n\n  /*  async function convertToSuperAdmin() {\n    const super_admin_permissions = await getPermissionsSuperAdmin();\n\n    const updateUserByAdmin = functions.httpsCallable(\"updateuserbyadminnew\");\n    updateUserByAdmin({\n      id: id,\n      firstName: firstName,\n      lastName: lastName,\n      contactNumber: contactNumber,\n      password: password,\n      role: \"super-admin\",\n      access: true,\n      sysFunc: super_admin_permissions,\n    })\n      .then((result) => {\n        if (init_admin_list) {\n          init_admin_list();\n        }\n        enqueueSnackbar(result?.data?.result || \"\", { variant: \"success\" });\n\n        handleCloseDialog();\n        set_us_b_modified(false);\n        setStep(0);\n\n        dispatch(setLoading(false));\n      })\n      .catch((err) => {\n        let msg = \"\";\n        if (err.message) {\n          msg = err.message;\n        } else {\n          msg = err;\n        }\n        enqueueSnackbar(msg, { variant: \"error\" });\n\n        setStep(0);\n        handleCloseDialog();\n        set_us_b_modified(false);\n\n        dispatch(setLoading(false));\n      });\n  } */\n\n  return (\n    <>\n      <Dialog open={openDialog} maxWidth=\"lg\" fullWidth>\n        <DialogTitle id=\"alert-dialog-title\">Update a User</DialogTitle>\n        <DialogContent style={{ height: \"auto\" }}>\n          <Divider />\n          <br />\n          {step === 0 ? (\n            <AdminStep1\n              adminDetails={adminDetails}\n              setAdminDetails={setAdminDetails}\n              selectedCompanies={selectedCompanies}\n              set_selectedCompanies={set_selectedCompanies}\n              type=\"admin\"\n              dialogType={\"update\"}\n            />\n          ) : step === 1 ? (\n            <AdminStepPermission\n              adminDetails={adminDetails}\n              setAdminDetails={setAdminDetails}\n              type=\"admin\"\n              dialogType={\"update\"}\n            />\n          ) : (\n            \"\"\n          )}\n        </DialogContent>\n        <DialogActions>\n          <Stack spacing={2} direction=\"row\">\n            {step === 0 ? (\n              <Button\n                onClick={() => {\n                  setStep(1);\n                }}\n                color=\"primary\"\n                variant=\"contained\"\n              >\n                Next\n              </Button>\n            ) : step === 1 ? (\n              <>\n                <Button\n                  onClick={() => setStep(0)}\n                  color=\"secondary\"\n                  variant=\"contained\"\n                >\n                  Back\n                </Button>\n                <Button\n                  onClick={(e) => updateAdmin(e)}\n                  color=\"primary\"\n                  variant=\"contained\"\n                >\n                  Update\n                </Button>\n              </>\n            ) : (\n              \"\"\n            )}\n\n            <Button\n              onClick={() => {\n                handleCloseDialog();\n                setStep(0);\n                set_us_b_modified(false);\n              }}\n              color=\"error\"\n              variant=\"outlined\"\n            >\n              Cancel\n            </Button>\n          </Stack>\n        </DialogActions>\n      </Dialog>\n    </>\n  );\n}\n\nexport default UpdateAdminDialog;\n"],"sourceRoot":""}