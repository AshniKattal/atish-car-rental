{"version":3,"sources":["pages/dashboard/manage-client/CreateClientDialog.js","pages/dashboard/client-survey/ClientSurveyDetail.js"],"names":["useStyles","makeStyles","theme","root","width","backButton","marginRight","spacing","instructions","marginTop","marginBottom","selectAllText","fontWeight","selectedAll","backgroundColor","indeterminateColor","color","palette","primary","getStepContent","stepIndex","CreateClientDialog","companyId","openDialog","handleCloseDialog","clientDetails","setClientDetails","initializeClientList","enqueueSnackbar","useSnackbar","name","companyRefId","companyRefName","companyType","tan","address","email","email2","email3","email4","contactNumber","mobileNumber","brn","nic","buyerType","representativeName","representativeContactNumber","classes","dispatch","useDispatch","snackbar","useSelector","selectSnackbar","useState","activeStep","setActiveStep","steps","errorBool","errorMsg","error","setError","addClient","a","setLoading","db","collection","doc","process","add","timestamp","firebase","firestore","FieldValue","serverTimestamp","then","setCompanyIdSelected","undefined","setCompanyDetails","setClientDocumentIdSelected","setClientDocumentObjectSelected","catch","message","setSnackbar","counter","variant","style","maxWidth","fullWidth","open","onClose","id","height","container","display","flexDirection","justifyContent","alignItems","item","xs","sm","align","className","alternativeLabel","map","label","severity","md","required","type","size","value","onChange","event","target","native","placeholder","inputProps","ListboxProps","maxHeight","options","JSON","parse","renderInput","params","e","reason","preventDefault","getOptionLabel","option","title","length","onClick","disabled","prevActiveStep","TableCRUDTemplate","lazy","CreateOrUpdateClientSurveyDialog","ClientSurveyDetail","themeStretch","useSettings","user","useAuth","temp_fetchDataRef","useRef","selectDocument","companyDetails","clientList","companyList","selectCompanyList","documentType","setDocumentType","surveyList","setSurveyList","setOpenDialog","dialogType","setDialogType","us_new_client_dlg","set_us_new_client_dlg","initialDate","Date","setMonth","getMonth","us_fromDate","set_us_fromDate","us_ToDate","set_us_ToDate","logo","setLogo","temp_logo_image_ref","temp_checkPermission_ref","viewPermissionGranted","setViewPermissionGranted","useEffect","current","permissions","viewAllClientSurveyChk","assignedCompanyId","includes","surveyNumber","customerName","phone","time","controlOf","ants","geckos","lizard","spiders","rodent","woodworm","pigeon","cockroaches","fleas","mosquitoes","bedbugs","termite","snake","otherControlOf","infestation","slight","moderate","severe","infestationNote","typeOfCockroach","typeOfTermite","typeOfTermiteBait","typeOfTermiteTotal","solTreatmentmeter","solTreatmentFt","solTreatmentUnitPrice","solTreatmentTotal","controlVector","fumigation","mistingControl","lightSpraying","locationTreated","house","restaurant","villa","shop","stroes","snack","school","otherLocationTreated","rodentBox","recommendation","contratOneYear","serviceOneOff","evaluationPieces","estimateAmount","preparedBy","preparedByName","clientSig","clientSigName","serviceCarriesAt","timeIn","timeOut","routine","complaint","job","initialFlushOut","spotCheck","findings","recommendationServiceReport","technicianSig","signatureDate","surveyDetail","setSurveyDetail","headers","data","imageUrl","toDataUrl","logoImage","url","fetch","blob","Promise","resolve","reader","FileReader","readAsDataURL","onloadend","base64data","result","console","log","orderBy","get","queryDocs","docs","arr","forEach","push","setClientList","err","fetchClientSurvey","handleSelectChange","collectionName","startDateISOString","toISOString","startDateStringSplit","split","endDateISOString","endDateStringSplit","startDate","endDate","where","Timestamp","fromDate","dateCreated","moment","toDate","format","status","viewDownloadPdf","sendEmail","sort","dynamicSortDesc","deleteBtnFunc","delete","InputLabelProps","REACT_APP_DOCUMENT_TYPE_OPTIONS","direction","newValue","inputFormat","fallback","aCollection","viewOption","viewBtnFunc","addBtnDisplay","addBtnLabel","addBtnFunc","emptyColMsg","updateBtnDisplay","deleteBtnDisplay","updateBtnFunc"],"mappings":"odAoCMA,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,MAAO,QAETC,WAAY,CACVC,YAAaJ,EAAMK,QAAQ,IAE7BC,aAAc,CACZC,UAAWP,EAAMK,QAAQ,GACzBG,aAAcR,EAAMK,QAAQ,IAE9BI,cAAe,CACbC,WAAY,KAEdC,YAAa,CACXC,gBAAiB,sBACjB,UAAW,CACTA,gBAAiB,wBAGrBC,mBAAoB,CAClBC,MAAOd,EAAMe,QAAQC,aAQzB,SAASC,EAAeC,GACtB,OAAQA,GACN,KAAK,EACH,MAAO,8BACT,KAAK,EACH,MAAO,0CAGT,KAAK,EACH,MAAO,oBACT,QACE,MAAO,qBA6lBEC,UAzlBf,YAOG,EANDC,UAME,IALFC,EAKC,EALDA,WACAC,EAIC,EAJDA,kBACAC,EAGC,EAHDA,cACAC,EAEC,EAFDA,iBACAC,EACC,EADDA,qBAEQC,EAAoBC,cAApBD,gBAGNE,EAiBEL,EAjBFK,KACAC,EAgBEN,EAhBFM,aACAC,EAeEP,EAfFO,eACAC,EAcER,EAdFQ,YACAC,EAaET,EAbFS,IACAC,EAYEV,EAZFU,QACAC,EAWEX,EAXFW,MACAC,EAUEZ,EAVFY,OACAC,EASEb,EATFa,OACAC,EAQEd,EARFc,OACAC,EAOEf,EAPFe,cACAC,EAMEhB,EANFgB,aACAC,EAKEjB,EALFiB,IACAC,GAIElB,EAJFkB,IACAC,GAGEnB,EAHFmB,UACAC,GAEEpB,EAFFoB,mBACAC,GACErB,EADFqB,4BAGIC,GAAU/C,IACVgD,GAAWC,cACXC,GAAWC,YAAYC,KAC7B,GAAoCC,mBAAS,GAA7C,qBAAOC,GAAP,MAAmBC,GAAnB,MACMC,GApDC,CAAC,UAAW,eAAgB,iBAqDnC,GAA0BH,mBAAS,CACjCI,WAAW,EACXC,SAAU,KAFZ,qBAAOC,GAAP,MAAcC,GAAd,MAIQH,GAAwBE,GAAxBF,UAAWC,GAAaC,GAAbD,SAwCbG,GAAS,uCAAG,sBAAAC,EAAA,6DAEdd,GAASe,aAAW,IAFN,SAIRC,IACHC,WAAW,WACXC,IAAIC,wBACJF,WAAW,UACXG,IAAI,CACHtC,KAAMA,GAAQ,GACdC,aAAcA,GAAgB,GAC9BC,eAAgBA,GAAkB,GAClCC,YAAaA,GAAe,GAC5BC,IAAKA,GAAO,GACZC,QAASA,GAAW,GACpBC,MAAOA,GAAS,GAChBC,OAAQA,GAAU,GAClBC,OAAQA,GAAU,GAClBC,OAAQA,GAAU,GAClBC,cAAeA,GAAiB,GAChCC,aAAcA,GAAgB,GAC9BC,IAAKA,GAAO,GACZC,IAAKA,IAAO,GACZC,UAAWA,IAAa,KACxBC,mBAAoBA,IAAsB,GAC1CC,4BAA6BA,IAA+B,GAC5DuB,UAAWC,IAASC,UAAUC,WAAWC,oBAE1CC,MAAK,WACJ9C,EAAgB,6BAChBoB,GAASe,aAAW,IAGpBf,GAAS2B,iBAAqBC,IAG9B5B,GAAS6B,YAAkB,OAE3B7B,GAAS8B,iBAA4BF,IAErC5B,GAAS+B,iBAAgCH,IAEzCpD,IAEIG,GACFA,OAGHqD,OAAM,SAACrB,GACN/B,EAAgB,sCAAD,cACyB+B,QADzB,IACyBA,OADzB,EACyBA,EAAOsB,UAE/CjC,GAASe,aAAW,OApDV,6BAuDdf,GACEkC,YAAY,CACVC,QAASjC,GAASiC,QAAU,EAC5BF,QACE,sGACFG,QAAS,WA5DC,2CAAH,qDAkEf,OACE,mCACE,eAAC,IAAD,CACEC,MAAO,CAAEjF,MAAO,QAChBkF,SAAS,KACTC,WAAS,EACTC,KAAMjE,EACNkE,QAASjE,EALX,UAOE,cAAC,IAAD,CAAakE,GAAG,qBAAhB,8BACA,eAAC,IAAD,CAAeL,MAAO,CAAEM,OAAQ,QAAhC,UACE,eAAC,IAAD,CACEC,WAAS,EACTP,MAAO,CACLjF,MAAO,OACPyF,QAAS,OACTC,cAAe,MACfC,eAAgB,SAChBC,WAAY,UAPhB,UAUE,cAAC,IAAD,CAAMC,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAvB,SACE,cAAC,IAAD,CAAYf,QAAQ,KAAKgB,MAAM,OAAOpF,MAAM,UAA5C,SACGG,EAAemC,QAGpB,cAAC,IAAD,CAAM2C,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAvB,SACE,qBAAKE,UAAWtD,GAAQ5C,KAAxB,SACE,cAAC,IAAD,CAASmD,WAAYA,GAAYgD,kBAAgB,EAAjD,SACG9C,GAAM+C,KAAI,SAACC,GAAD,OACT,cAAC,IAAD,UACE,cAAC,IAAD,UAAYA,KADHA,eAQrB,cAAC,IAAD,CACEpB,QAAQ,SACRqB,SAAS,QACTpB,MAAO,CAAEQ,QAASpC,GAAY,GAAK,QAHrC,SAKGC,KAEH,sBAAK2B,MAAO,CAAEQ,QAAwB,IAAfvC,GAAmB,GAAK,QAA/C,UACE,uBACA,uBACA,eAAC,IAAD,CAAMsC,WAAS,EAACrF,QAAS,EAAG8E,MAAO,CAAE5E,UAAW,OAAhD,UACE,cAAC,IAAD,CAAMwF,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGO,GAAI,EAA9B,SACE,cAAC,IAAD,CACEtB,QAAQ,WACRuB,UAAQ,EACRpB,WAAS,EACTzD,KAAK,OACL0E,MAAM,OACNI,KAAK,OACLlB,GAAG,OACHmB,KAAK,QACLC,MAAOhF,GAAQ,GACfiF,SAAU,SAACC,GACTtF,EAAiB,2BACZD,GADW,IAEdK,KAAMkF,EAAMC,OAAOH,cAK3B,cAAC,IAAD,CAAMb,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGO,GAAI,EAA9B,SACE,cAAC,IAAD,CAAaG,KAAK,QAAQzB,QAAQ,WAAWG,WAAS,EAAtD,SACE,eAAC,IAAD,CACEsB,KAAK,QACLK,QAAM,EAENC,YAAY,+BACZL,MAAO7E,GAAe,GACtB8E,SAAU,SAACC,GACTtF,EAAiB,2BACZD,GADW,IAEdQ,YAAa+E,EAAMC,OAAOH,UAG9BM,WAAY,CACVtF,KAAM,cACN4D,GAAI,eAdR,UAiBE,wBAAQoB,MAAM,GAAd,0CACA,wBAAQA,MAAM,aAAd,wBACA,wBAAQA,MAAM,UAAd,qBACA,wBAAQA,MAAM,QAAd,0BAIN,cAAC,IAAD,CAAMb,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGO,GAAI,EAA9B,SACE,cAAC,IAAD,CACEG,KAAK,QACLzB,QAAQ,WACRG,WAAS,EACTzD,KAAK,MACL0E,MAAM,MACNI,KAAK,SACLlB,GAAG,MACHoB,MAAO5E,GAAO,GACd6E,SAAU,SAACC,GACTtF,EAAiB,2BACZD,GADW,IAEdS,IAAK8E,EAAMC,OAAOH,cAK1B,cAAC,IAAD,CAAMb,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGO,GAAI,EAA9B,SACE,cAAC,IAAD,CACEtB,QAAQ,WACRyB,KAAK,QACLtB,WAAS,EACTzD,KAAK,MACL0E,MAAM,MACNI,KAAK,OACLlB,GAAG,MACHoB,MAAOpE,GAAO,GACdqE,SAAU,SAACC,GACTtF,EAAiB,2BACZD,GADW,IAEdiB,IAAKsE,EAAMC,OAAOH,cAK1B,cAAC,IAAD,CAAMb,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGO,GAAI,EAA9B,SACE,cAAC,IAAD,CACEtB,QAAQ,WACRyB,KAAK,QACLtB,WAAS,EACTzD,KAAK,MACL0E,MAAM,MACNI,KAAK,OACLlB,GAAG,MACHoB,MAAOnE,IAAO,GACdoE,SAAU,SAACC,GACTtF,EAAiB,2BACZD,GADW,IAEdkB,IAAKqE,EAAMC,OAAOH,cAK1B,cAAC,IAAD,CAAMb,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGO,GAAI,EAA9B,SACE,cAAC,IAAD,CACEW,aAAc,CAAEhC,MAAO,CAAEiC,UAAW,SACpCT,KAAK,QACLL,MAAM,8BACNd,GAAG,uBACH6B,QAEMC,KAAKC,MAAMtD,2IAGjB2C,MAAOlE,GACP8E,YAAa,SAACC,GAAD,OACX,cAAC,IAAD,2BACMA,GADN,IAEEnB,MAAM,kCAGVO,SAAU,SAACa,EAAGd,EAAOe,GACnBD,EAAEE,iBAEW,iBAAXD,GACW,UAAXA,GACAf,EAEApF,EAAiB,2BACZD,GADW,IAEdmB,UAAWkE,KAGF,iBAAXe,GACW,UAAXA,GAEAnG,EAAiB,2BACZD,GADW,IAEdmB,UAAW,SAIjBmF,eAAgB,SAACC,GAAD,OAAkB,OAANA,QAAM,IAANA,OAAA,EAAAA,EAAQC,QAAS,IAC7C1C,WAAS,YAKjB,sBAAKF,MAAO,CAAEQ,QAAwB,IAAfvC,GAAmB,GAAK,QAA/C,UACE,uBACA,uBACA,eAAC,IAAD,CAAMsC,WAAS,EAACrF,QAAS,EAAG8E,MAAO,CAAE5E,UAAW,OAAhD,UACE,cAAC,IAAD,CAAMwF,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGO,GAAI,EAA9B,SACE,cAAC,IAAD,CACEG,KAAK,QACLzB,QAAQ,WACRG,WAAS,EACTzD,KAAK,UACL0E,MAAM,UACNI,KAAK,OACLlB,GAAG,UACHoB,MAAO3E,GAAW,GAClB4E,SAAU,SAACC,GACTtF,EAAiB,2BACZD,GADW,IAEdU,QAAS6E,EAAMC,OAAOH,cAK9B,cAAC,IAAD,CAAMb,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGO,GAAI,EAA9B,SACE,cAAC,IAAD,CACEG,KAAK,QACLzB,QAAQ,WACRG,WAAS,EACTzD,KAAK,gBACL0E,MAAM,iBACNI,KAAK,OACLlB,GAAG,gBACHoB,MAAOtE,GAAiB,GACxBuE,SAAU,SAACC,GACTtF,EAAiB,2BACZD,GADW,IAEde,cAAewE,EAAMC,OAAOH,cAMpC,cAAC,IAAD,CAAMb,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGO,GAAI,EAA9B,SACE,cAAC,IAAD,CACEG,KAAK,QACLzB,QAAQ,WACRG,WAAS,EACTzD,KAAK,eACL0E,MAAM,gBACNI,KAAK,OACLlB,GAAG,eACHoB,MAAOrE,GAAgB,GACvBsE,SAAU,SAACC,GACTtF,EAAiB,2BACZD,GADW,IAEdgB,aAAcuE,EAAMC,OAAOH,cAKnC,cAAC,IAAD,CAAMb,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGO,GAAI,EAA9B,SACE,cAAC,IAAD,CACEG,KAAK,QACLzB,QAAQ,WACRG,WAAS,EACTzD,KAAK,QACL0E,MAAM,UACNI,KAAK,OACLlB,GAAG,QACHoB,MAAO1E,GAAS,GAChB2E,SAAU,SAACC,GACTtF,EAAiB,2BACZD,GADW,IAEdW,MAAO4E,EAAMC,OAAOH,cAM5B,cAAC,IAAD,CAAMb,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGO,GAAI,EAA9B,SACE,cAAC,IAAD,CACEG,KAAK,QACLzB,QAAQ,WACRG,WAAS,EACTzD,KAAK,SACL0E,MAAM,UACNI,KAAK,OACLlB,GAAG,SACHoB,MAAOzE,GAAU,GACjB0E,SAAU,SAACC,GACTtF,EAAiB,2BACZD,GADW,IAEdY,OAAQ2E,EAAMC,OAAOH,cAM7B,cAAC,IAAD,CAAMb,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGO,GAAI,EAA9B,SACE,cAAC,IAAD,CACEG,KAAK,QACLzB,QAAQ,WACRG,WAAS,EACTzD,KAAK,SACL0E,MAAM,UACNI,KAAK,OACLlB,GAAG,SACHoB,MAAOxE,GAAU,GACjByE,SAAU,SAACC,GACTtF,EAAiB,2BACZD,GADW,IAEda,OAAQ0E,EAAMC,OAAOH,cAM7B,cAAC,IAAD,CAAMb,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGO,GAAI,EAA9B,SACE,cAAC,IAAD,CACEG,KAAK,QACLzB,QAAQ,WACRG,WAAS,EACTzD,KAAK,SACL0E,MAAM,UACNI,KAAK,OACLlB,GAAG,SACHoB,MAAOvE,GAAU,GACjBwE,SAAU,SAACC,GACTtF,EAAiB,2BACZD,GADW,IAEdc,OAAQyE,EAAMC,OAAOH,cAM7B,cAAC,IAAD,CAAMb,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGO,GAAI,EAA9B,SACE,cAAC,IAAD,CACEG,KAAK,QACLzB,QAAQ,WACRG,WAAS,EACTzD,KAAK,qBACL0E,MAAM,sBACNI,KAAK,OACLlB,GAAG,qBACHoB,MAAOjE,IAAsB,GAC7BkE,SAAU,SAACC,GACTtF,EAAiB,2BACZD,GADW,IAEdoB,mBAAoBmE,EAAMC,OAAOH,cAMzC,cAAC,IAAD,CAAMb,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGO,GAAI,EAA9B,SACE,cAAC,IAAD,CACEG,KAAK,QACLzB,QAAQ,WACRG,WAAS,EACTzD,KAAK,8BACL0E,MAAM,gCACNI,KAAK,OACLlB,GAAG,8BACHoB,MAAOhE,IAA+B,GACtCiE,SAAU,SAACC,GACTtF,EAAiB,2BACZD,GADW,IAEdqB,4BAA6BkE,EAAMC,OAAOH,oBAQtD,qBACEzB,MAAO,CACLQ,QAAwB,IAAfvC,GAAmB,GAAK,OACjClD,MAAO,OACPuF,OAAQ,QAJZ,SAOE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,eAAC,IAAD,WACE,cAAC,IAAD,oBACA,cAAC,IAAD,UAAY7D,GAAQ,QAEtB,eAAC,IAAD,WACE,cAAC,IAAD,4BACA,cAAC,IAAD,UAAYG,GAAe,QAE7B,eAAC,IAAD,WACE,cAAC,IAAD,mBACA,cAAC,IAAD,UAAYC,GAAO,QAErB,eAAC,IAAD,WACE,cAAC,IAAD,mBACA,cAAC,IAAD,UAAYQ,GAAO,QAErB,eAAC,IAAD,WACE,cAAC,IAAD,mBACA,cAAC,IAAD,UAAYC,IAAO,QAErB,eAAC,IAAD,WACE,cAAC,IAAD,uBACA,cAAC,IAAD,UAAYR,GAAW,QAEzB,eAAC,IAAD,WACE,cAAC,IAAD,8BACA,cAAC,IAAD,UAAYK,GAAiB,QAE/B,eAAC,IAAD,WACE,cAAC,IAAD,6BACA,cAAC,IAAD,UAAYC,GAAgB,QAE9B,eAAC,IAAD,WACE,cAAC,IAAD,qBACA,cAAC,IAAD,UAAYL,GAAS,kBAM/B,eAAC,IAAD,WACE,8BACGkB,KAAeE,GAAM0E,OACpB,gCACE,cAAC,IAAD,CAAY7B,UAAWtD,GAAQvC,aAA/B,iCAGA,cAAC,IAAD,CAAQ2H,QA9eF,WAClB5E,GAAc,IA6eF,sBAGF,gCACE,cAAC,IAAD,CACE6E,SAAyB,IAAf9E,GACV6E,QAxfG,WACjB5E,IAAc,SAAC8E,GAAD,OAAoBA,EAAiB,MAwfrChC,UAAWtD,GAAQ1C,WACnB+E,QAAQ,WAJV,kBAQA,cAAC,IAAD,CACEA,QAAQ,YACRpE,MAAM,UACNmH,QA/hBG,WACE,IAAf7E,GACW,KAATxB,EACF8B,GAAS,CACPH,WAAW,EACXC,SAAU,yBAGZE,GAAS,CACPH,WAAW,EACXC,SAAU,KAEZH,IAAc,SAAC8E,GAAD,OAAoBA,EAAiB,MAE7B,IAAf/E,IACTM,GAAS,CACPH,WAAW,EACXC,SAAU,KAEZG,KACAN,GAAc,KAEdK,GAAS,CACPH,WAAW,EACXC,SAAU,KAEZH,IAAc,SAAC8E,GAAD,OAAoBA,EAAiB,OAsgBvChC,UAAWtD,GAAQ1C,WAJrB,SAMGiD,KAAeE,GAAM0E,OAAS,EAAI,OAAS,cAKpD,cAAC,IAAD,CAAQC,QAAS3G,EAAmBR,MAAM,QAAQoE,QAAQ,WAA1D,8B,8UCloBJkD,EAAoBC,gBAAK,kBAC7B,yDAEIC,EAAmCD,gBAAK,kBAC5C,mCAGa,SAASE,IACtB,IAAQC,EAAiBC,cAAjBD,aAEAE,EAASC,cAATD,KAEAhH,EAAoBC,cAApBD,gBAEFoB,EAAWC,cAEX6F,EAAoBC,mBAE1B,EAAuC5F,YAAY6F,KAA3CC,EAAR,EAAQA,eAAgBC,EAAxB,EAAwBA,WAEhBC,EAAgBhG,YAAYiG,KAA5BD,YAER,EAAwC9F,mBAAS,MAAjD,mBAAOgG,EAAP,KAAqBC,EAArB,KAEA,EAAoCjG,mBAAS,IAA7C,mBAAOkG,EAAP,KAAmBC,EAAnB,KAEA,EAAoCnG,oBAAS,GAA7C,mBAAO9B,EAAP,KAAmBkI,EAAnB,KAEA,EAAoCpG,mBAAS,IAA7C,mBAAOqG,EAAP,KAAmBC,EAAnB,KAEA,GAAmDtG,oBAAS,GAA5D,qBAAOuG,GAAP,MAA0BC,GAA1B,MAGMC,GAAc,IAAIC,KACxBD,GAAYE,SAASF,GAAYG,WAAa,GAG9C,OAAuC5G,mBAASyG,IAAhD,qBAAOI,GAAP,MAAoBC,GAApB,MAEA,GAAmC9G,mBAAS,IAAI0G,MAAhD,qBAAOK,GAAP,MAAkBC,GAAlB,MAEA,GAAwBhH,mBAAS,IAAjC,qBAAOiH,GAAP,MAAaC,GAAb,MAEMC,GAAsBzB,mBAEtB0B,GAA2B1B,mBAEjC,GAA0D1F,oBAAS,GAAnE,qBAAOqH,GAAP,MAA8BC,GAA9B,MAEAC,qBAAU,WACRH,GAAyBI,YACxB,CAAC5B,IAqBJwB,GAAyBI,QAnBzB,WAC6C,IAAD,MAAtC5B,GAAc,OAAIA,QAAJ,IAAIA,KAAgBvD,KAElC,OAACkD,QAAD,IAACA,GAAD,UAACA,EAAMkC,mBAAP,iBAAC,EAAmBC,8BAApB,iBAAC,EAA2CC,yBAA5C,OAAC,EAA8DC,SAA9D,OACChC,QADD,IACCA,OADD,EACCA,EAAgBvD,IAUlBiF,IAAyB,IAPzB/I,EACE,8EACA,CAAEwD,QAAS,UAGbuF,IAAyB,MAS/B,OAA0CtH,mBAAS,CACjDqC,GAAI,GACJ3D,cAA4B,OAAdkH,QAAc,IAAdA,OAAA,EAAAA,EAAgBvD,KAAM,GACpC1D,eAAiBiH,IAAc,OAAIA,QAAJ,IAAIA,OAAJ,EAAIA,EAAgBnH,OAAS,GAC5DA,KAAM,GACNG,YAAa,GACbC,IAAK,GACLC,QAAS,GACTK,cAAe,GACfJ,MAAO,GACPM,IAAK,GACLC,IAAK,KAXP,qBAAOlB,GAAP,MAAsBC,GAAtB,MAcA,GAAwC2B,mBAAS,CAC/C6H,aAAc,GACdC,aAAc,GACdhJ,QAAS,GACTC,MAAO,GACPgJ,MAAO,GAEPC,KAAM,GACNC,UAAW,CACTC,MAAM,EACNC,QAAQ,EACRC,QAAQ,EACRC,SAAS,EACTC,QAAQ,EACRC,UAAU,EACVC,QAAQ,EACRC,aAAa,EACbC,OAAO,EACPC,YAAY,EACZC,SAAS,EACTC,SAAS,EACTC,OAAO,GAETC,eAAgB,GAChBC,YAAa,CACXC,QAAQ,EACRC,UAAU,EACVC,QAAQ,GAEVC,gBAAiB,GACjBC,gBAAiB,GACjBC,cAAe,GACfC,kBAAmB,GACnBC,mBAAoB,GAEpBC,kBAAmB,GACnBC,eAAgB,GAChBC,sBAAuB,GACvBC,kBAAmB,GAEnBC,cAAe,CACbC,YAAY,EACZC,gBAAgB,EAChBC,eAAe,GAGjBC,gBAAiB,CACfC,OAAO,EACPC,YAAY,EACZC,OAAO,EACPC,MAAM,EACNC,QAAQ,EACRC,OAAO,EACPC,QAAQ,GAEVC,qBAAsB,GAEtBC,UAAW,GACXC,eAAgB,CACdC,gBAAgB,EAChBC,eAAe,GAGjBC,iBAAkB,GAClBC,eAAgB,GAEhBC,WAAY,GACZC,eAAgB,GAEhBC,UAAW,GACXC,cAAe,GAGfC,iBAAkB,GAClBC,OAAQ,GACRC,QAAS,GACTC,QAAS,CACPC,UAAW,GACXC,IAAK,GACLC,gBAAiB,GACjBC,UAAW,IAEbC,SAAU,GACVC,4BAA6B,GAC7BC,cAAe,GAEfC,cAAe,KAtFjB,qBAAOC,GAAP,MAAqBC,GAArB,MAyFMC,GAAU,CACd,CAAE7J,GAAI,OAAQc,MAAO,QACrB,CAAEd,GAAI,OAAQc,MAAO,QACrB,CAAEd,GAAI,SAAUc,MAAO,UACvB,CAAEd,GAAI,SAAUc,MAAO,UACvB,CAAEd,GAAI,cAAec,MAAO,gBAC5B,CAAEd,GAAI,KAAMc,MAAM,GAAD,cAAK6C,QAAL,IAAKA,OAAL,EAAKA,EAAcpB,MAAnB,YACjB,CAAEvC,GAAI,eAAgBc,MAAO,YAC7B,CAAEd,GAAI,SAAUc,MAAO,UACvB,CAAEd,GAAI,kBAAmBc,MAAO,OAChC,CAAEd,GAAI,YAAac,MAAO,yBApLe,8CA+L3C,kCAAA1C,EAAA,yDAEkB,OAAdmF,QAAc,IAAdA,GAAA,UAAAA,EAAgBuG,YAAhB,UAAsBC,UACa,MAArB,OAAdxG,QAAc,IAAdA,GAAA,UAAAA,EAAgBuG,YAAhB,eAAsBC,UAH1B,uBAKIzM,EAASe,aAAW,IALxB,SAM0B2L,GAAS,OAACzG,QAAD,IAACA,GAAD,UAACA,EAAgBuG,YAAjB,aAAC,EAAsBC,UAN1D,OAMQE,EANR,OAOIpF,GAAQoF,GACR3M,EAASe,aAAW,IARxB,4CA/L2C,+BAuN5B2L,GAvN4B,iFAuN3C,WAAyBE,GAAzB,iBAAA9L,EAAA,yDACc,KAAR8L,EADN,yCAEW,IAFX,gCAKyBC,MAAMD,GAL/B,cAKYJ,EALZ,iBAMyBA,EAAKM,OAN9B,eAMYA,EANZ,yBAOa,IAAIC,SAAQ,SAACC,GAClB,IAAMC,EAAS,IAAIC,WACnBD,EAAOE,cAAcL,GACrBG,EAAOG,UAAY,WACjB,IAAMC,EAAaJ,EAAOK,OAC1BN,EAAQK,QAZlB,kCAgBME,QAAQC,IAAR,MAhBN,2DAvN2C,sBAuL3C5F,qBAAU,WACRJ,GAAoBK,YACnB,CAAC5B,IAEJ2B,qBAAU,WACR9B,EAAkB+B,YACjB,CAAC5B,EAAgBI,EAAca,GAAaE,KAc/CI,GAAoBK,QA3MuB,qDAoP5BlJ,GApP4B,iFAoP3C,WAAoCL,GAApC,SAAAwC,EAAA,sEACQE,IACHC,WAAW,WACXC,IAAIC,wBACJF,WAAW,UACXwM,QAAQ,OAAQ,OAChBC,MACAhM,MAAK,SAACiM,GAAe,IAAD,EACnB,IAAa,OAATA,QAAS,IAATA,GAAA,UAAAA,EAAWC,YAAX,eAAiB1I,QAAS,EAAG,CAC/B,IAAI2I,EAAM,GACD,OAATF,QAAS,IAATA,KAAWC,KAAKE,SAAQ,SAAC5M,GAAS,IAAD,EAC/B2M,EAAIE,KAAK,CACPrL,GAAE,OAAExB,QAAF,IAAEA,OAAF,EAAEA,EAAKwB,GACT5D,KAAI,OAAEoC,QAAF,IAAEA,GAAF,UAAEA,EAAKsL,cAAP,aAAE,EAAa1N,KACnB0N,KAAK,eAAD,OAAOtL,QAAP,IAAOA,OAAP,EAAOA,EAAKsL,aAIpBxM,EAASgO,YAAcH,IACvB7N,EAASe,aAAW,SAEpBf,EAASgO,YAAc,KACvBhO,EAASe,aAAW,OAGvBiB,OAAM,SAACiM,GACNrP,EAAgB,yCAAD,cAC4BqP,QAD5B,IAC4BA,OAD5B,EAC4BA,EAAKhM,UAEhDjC,EAASe,aAAW,OA7B1B,4CApP2C,sBAkP3C+E,EAAkB+B,QANA,WACZ5B,GAAkBI,GAAgBa,IAAeE,IACnD8G,GAAkBjI,EAAevD,GAAhB,OAAoB2D,QAApB,IAAoBA,OAApB,EAAoBA,EAAc3D,KAuCvD,IAAMyL,GAAkB,uCAAG,WAAOvJ,EAAGd,EAAOe,EAAQjB,GAAzB,SAAA9C,EAAA,sDACzB8D,EAAEE,iBACa,iBAAXD,GAAwC,UAAXA,GAAsBf,EACxC,YAATF,GAEF5D,EAAS2B,YAAqBmC,EAAMpB,KAGpC1C,EAAS6B,YAAkBiC,IAE3BnF,GAAqBmF,EAAMpB,KACT,iBAATkB,GACT0C,EAAgBxC,GAEE,iBAAXe,GAAwC,UAAXA,IACzB,YAATjB,GAEF5D,EAAS2B,iBAAqBC,IAG9B5B,EAAS6B,YAAkB,OAE3B7B,EAASgO,YAAc,MACL,iBAATpK,GACT+C,EAAc,OAxBO,2CAAH,4DA6BlBuH,GAAiB,uCAAG,WAAO5P,EAAW8P,GAAlB,yBAAAtN,EAAA,2DACpB,IAAIiG,KAAKG,IAAe,IAAIH,KAAKK,KADb,gBAEtBxI,EAAgB,sDAAuD,CACrEwD,QAAS,UAEXpC,EAASe,aAAW,IALE,8BAOtBf,EAASe,aAAW,IACdsN,EAAqBnH,GAAYoH,cACjCC,EAAuBF,EAAmBG,MAAM,KAEhDC,EAAmBrH,GAAUkH,cAC7BI,EAAqBD,EAAiBD,MAAM,KAE5CG,EAAY,IAAI5H,KAAJ,UAAYwH,EAAqB,GAAjC,mBACZK,EAAU,IAAI7H,KAAJ,UAAY2H,EAAmB,GAA/B,mBAfM,UAiBhB1N,IACHC,WAAW,WACXC,IAAI5C,GACJ2C,WAAWmN,GACXS,MACC,cACA,KACAvN,IAASC,UAAUuN,UAAUC,SAASJ,IAEvCE,MACC,cACA,KACAvN,IAASC,UAAUuN,UAAUC,SAASH,IAEvClB,MACAhM,MAAK,SAAC4L,GAAY,IAAD,EAChB,GAAU,OAANA,QAAM,IAANA,KAAQM,OAAc,OAANN,QAAM,IAANA,GAAA,UAAAA,EAAQM,YAAR,eAAc1I,QAAS,EAAG,CAC5C,IAAI2I,EAAM,GACJ,OAANP,QAAM,IAANA,KAAQM,KAAKE,SAAQ,SAAC5M,GACc,IAAD,QAAjB,mBAAT,OAAHA,QAAG,IAAHA,OAAA,EAAAA,EAAKwB,KACPmL,EAAIE,KAAK,CACPvB,KAAK,eAAD,OAAOtL,QAAP,IAAOA,OAAP,EAAOA,EAAKsL,QAChBwC,YAAgB,OAAH9N,QAAG,IAAHA,GAAA,UAAAA,EAAKsL,cAAL,SAAawC,YACtBC,IAAM,OAAC/N,QAAD,IAACA,GAAD,UAACA,EAAKsL,cAAN,aAAC,EAAawC,YAAYE,UAAUC,OACxC,uBAEF,GACJzM,GAAE,OAAExB,QAAF,IAAEA,OAAF,EAAEA,EAAKwB,GACTyF,cAAiB,OAAHjH,QAAG,IAAHA,GAAA,UAAAA,EAAKsL,cAAL,eAAarE,eAAgB,GAC3CiH,QAAW,OAAHlO,QAAG,IAAHA,GAAA,UAAAA,EAAKsL,cAAL,eAAa4C,SAAU,UAC/BC,gBAAiB,GACjBC,UAAW,QAKjBzB,EAAI0B,KAAKC,YAAgB,OAEzBhJ,EAAcqH,GACd7N,EAASe,aAAW,SAEpByF,EAAc,IACdxG,EAASe,aAAW,OA3DJ,4CAAH,wDAkKjBvC,GAAoB,WACxBiI,GAAc,GACd6F,GAAgB,CACdpE,aAAc,GACdC,aAAc,GACdhJ,QAAS,GACTC,MAAO,GACPgJ,MAAO,GACPqD,iBAAkB,GAClBpD,KAAM,GACNC,UAAW,CACTC,MAAM,EACNC,QAAQ,EACRC,QAAQ,EACRC,SAAS,EACTC,QAAQ,EACRC,UAAU,EACVC,QAAQ,EACRC,aAAa,EACbC,OAAO,EACPC,YAAY,EACZC,SAAS,EACTC,SAAS,EACTC,OAAO,GAETC,eAAgB,GAChBC,YAAa,CACXC,QAAQ,EACRC,UAAU,EACVC,QAAQ,GAEVC,gBAAiB,GACjBC,gBAAiB,GACjBC,cAAe,GACfC,kBAAmB,GACnBC,mBAAoB,GAEpBC,kBAAmB,GACnBC,eAAgB,GAChBC,sBAAuB,GACvBC,kBAAmB,GAEnBC,cAAe,CACbC,YAAY,EACZC,gBAAgB,EAChBC,eAAe,GAGjBC,gBAAiB,CACfC,OAAO,EACPC,YAAY,EACZC,OAAO,EACPC,MAAM,EACNC,QAAQ,EACRC,OAAO,EACPC,QAAQ,GAEVC,qBAAsB,GAEtBC,UAAW,GACXC,eAAgB,CACdC,gBAAgB,EAChBC,eAAe,GAGjBC,iBAAkB,GAClBC,eAAgB,GAEhBC,WAAY,GACZG,cAAe,GACfD,UAAW,GAEXa,cAAe,MAIbqD,GAAa,uCAAG,WAAO/M,GAAP,eAAA5B,EAAA,yDACpBd,EAASe,aAAW,MAEhBqN,EAAiB/H,EAAa3D,IAHd,gCAMZ1B,IACHC,WAAW,WACXC,IAFG,OAEC+E,QAFD,IAECA,OAFD,EAECA,EAAgBvD,IACpBzB,WAAWmN,GACXlN,IAAIwB,GACJgN,SACAhO,KANG,sBAME,sBAAAZ,EAAA,sDACJoN,GAAiB,OAACjI,QAAD,IAACA,OAAD,EAACA,EAAgBvD,GAAjB,OAAqB2D,QAArB,IAAqBA,OAArB,EAAqBA,EAAc3D,IACpD1C,EAASe,aAAW,IAFhB,4CAILiB,OAAM,SAACiM,GACNrP,EAAgB,gCAAD,QAC+B,OAAZyH,QAAY,IAAZA,OAAA,EAAAA,EAAcpB,QAAS,GAD1C,oBAEXgJ,QAFW,IAEXA,OAFW,EAEXA,EAAKhM,SAEP,CAAEG,QAAS,UAEbpC,EAASe,aAAW,OAvBN,2CAAH,sDAgCnB,OACE,cAAC,IAAD,CAAMkE,MAAM,sBAAZ,SACE,eAAC,IAAD,CAAW3C,UAAUoD,GAAuB,KAA5C,UACE,eAAC,IAAD,CAAM9C,WAAS,EAACrF,QAAS,EAAzB,UACE,cAAC,IAAD,CAAM0F,MAAI,EAACC,GAAI,GAAIQ,GAAI,GAAvB,SACE,cAAC,IAAD,CAAYtB,QAAQ,KAApB,6CAEF,cAAC,IAAD,CAAMa,MAAI,EAACC,GAAI,GAAIQ,GAAI,EAAvB,SACE,cAAC,IAAD,CACEW,aAAc,CAAEhC,MAAO,CAAEiC,UAAW,SACpCT,KAAK,QACLL,MAAM,0BACNd,GAAG,oBACH6B,QAAS4B,GAAe,GACxBrC,MAAOmC,GAAkB,KACzBvB,YAAa,SAACC,GAAD,OACX,cAAC,IAAD,2BACMA,GADN,IAEEnB,MAAM,0BACNmM,gBAAiB,CAAEhM,UAAU,OAGjCA,UAAQ,EACRI,SAAU,SAACa,EAAGd,EAAOe,GAAX,OACRsJ,GAAmBvJ,EAAGd,EAAOe,EAAQ,YAEvCE,eAAgB,SAACC,GAAD,OAAkB,OAANA,QAAM,IAANA,OAAA,EAAAA,EAAQlG,OAAQ,QAI/CmH,GAAkByB,GACjB,qCACE,cAAC,IAAD,CAAMzE,MAAI,EAACC,GAAI,GAAIQ,GAAI,EAAvB,SACE,cAAC,IAAD,CACEW,aAAc,CAAEhC,MAAO,CAAEiC,UAAW,SACpCT,KAAK,QACLL,MAAM,iCACNd,GAAG,qBACH6B,QACGpD,+sIAAYyO,iCACXpL,KAAKC,MACHtD,+sIAAYyO,kCAEhB,GAEF9L,MAAOuC,GAAgB,KACvB3B,YAAa,SAACC,GAAD,OACX,cAAC,IAAD,2BACMA,GADN,IAEEnB,MAAM,iCACNmM,gBAAiB,CAAEhM,UAAU,OAGjCA,UAAQ,EACRI,SAAU,SAACa,EAAGd,EAAOe,GAAX,OACRsJ,GAAmBvJ,EAAGd,EAAOe,EAAQ,iBAEvCE,eAAgB,SAACC,GAAD,OAAYA,EAAOC,OAAS,QAIhD,cAAC,IAAD,CAAMhC,MAAI,EAACC,GAAI,GAAIQ,GAAI,EAAvB,SACE,cAAC,IAAD,CACEtB,QAAQ,WACRpE,MAAM,UACNmH,QAAS,kBAAM0B,IAAsB,IAHvC,8BASDR,EACC,qCACE,eAAC,IAAD,CAAMpD,MAAI,EAACC,GAAI,GAAIQ,GAAI,GAAvB,UACE,uBACA,uBACA,cAAC,IAAD,sCAGF,cAAC,IAAD,CAAMT,MAAI,EAACC,GAAI,GAAIQ,GAAI,GAAIrB,MAAO,CAAEjF,MAAO,QAA3C,SACE,eAAC,IAAD,CAAOyS,UAAW,MAAOtS,QAAS,EAAGyF,WAAY,SAAjD,UACE,cAAC,IAAD,CACEQ,MAAM,OACNM,MAAOoD,IAAe,GACtBnD,SAAU,SAAC+L,GACT3I,GAAgB2I,IAElBpL,YAAa,SAACC,GAAD,OACX,cAAC,IAAD,2BAAeA,GAAf,IAAuBd,KAAK,YAE9BkM,YAAY,eAGd,cAAC,IAAD,CACEvM,MAAM,KACNM,MAAOsD,IAAa,GACpBrD,SAAU,SAAC+L,GACTzI,GAAcyI,IAEhBpL,YAAa,SAACC,GAAD,OACX,cAAC,IAAD,2BAAeA,GAAf,IAAuBd,KAAK,YAE9BkM,YAAY,uBAMpB,gCAIJ,6BAGD9J,GAAkBI,EACjB,mCACE,cAAC,IAAD,CAAMpD,MAAI,EAACC,GAAI,GAAIQ,GAAI,GAAvB,SACE,cAAC,WAAD,CAAUsM,SAAU,2CAApB,SACE,cAAC1K,EAAD,CACEhH,UAAS,OAAE2H,QAAF,IAAEA,OAAF,EAAEA,EAAgBvD,GAC3BkB,KAAK,SACL2I,QAASA,GACT0D,YAAa1J,EACb2J,YAAY,EACZC,YAlPE,SAACzN,EAAI8J,GACvB7F,EAAc,QACdF,GAAc,GACd6F,GAAgB,2BACXE,GADU,IAEb9J,GAAIA,MA8OU0N,eAAe,EACfC,YAAW,4BAAgBhK,QAAhB,IAAgBA,OAAhB,EAAgBA,EAAcpB,OACzCqL,WA7UC,WACjB3J,EAAc,OACdF,GAAc,GACd6F,GAAgB,2BACXD,IADU,IAEb3J,GAAI,GACJwF,aAAc,GACdC,aAAc,GACdhJ,QAAS,GACTC,MAAO,GACPgJ,MAAO,GACPqD,iBAAkB,GAClBpD,KAAM,GACNC,UAAW,CACTC,MAAM,EACNC,QAAQ,EACRC,QAAQ,EACRC,SAAS,EACTC,QAAQ,EACRC,UAAU,EACVC,QAAQ,EACRC,aAAa,EACbC,OAAO,EACPC,YAAY,EACZC,SAAS,EACTC,SAAS,EACTC,OAAO,GAETC,eAAgB,GAChBC,YAAa,CACXC,QAAQ,EACRC,UAAU,EACVC,QAAQ,GAEVC,gBAAiB,GACjBC,gBAAiB,GACjBC,cAAe,GACfC,kBAAmB,GACnBC,mBAAoB,GAEpBC,kBAAmB,GACnBC,eAAgB,GAChBC,sBAAuB,GACvBC,kBAAmB,GAEnBC,cAAe,CACbC,YAAY,EACZC,gBAAgB,EAChBC,eAAe,GAGjBC,gBAAiB,CACfC,OAAO,EACPC,YAAY,EACZC,OAAO,EACPC,MAAM,EACNC,QAAQ,EACRC,OAAO,EACPC,QAAQ,GAEVC,qBAAsB,GAEtBC,UAAW,GACXC,eAAgB,CACdC,gBAAgB,EAChBC,eAAe,GAGjBC,iBAAkB,GAClBC,eAAgB,GAEhBC,WAAY,GACZG,cAAe,GACfD,UAAW,GAEXa,cAAe,OAmQD7N,WAAYA,EACZC,kBAAmBA,GACnB+R,YAAW,oBAAQlK,QAAR,IAAQA,OAAR,EAAQA,EAAcpB,MAAtB,2CACXuL,kBAAkB,EAClBC,kBAAkB,EAClBC,cApQI,SAAChO,EAAI8J,GACzB7F,EAAc,UACdF,GAAc,GACd6F,GAAgB,2BACXE,GADU,IAEb9J,GAAIA,MAgQU+M,cAAeA,GACfpJ,aAAcA,EACdiB,KAAMA,GACNrB,eAAgBA,EAChBiI,kBAAmBA,WAM3B,gCAIH3P,GACC,cAAC,WAAD,CAAUyR,SAAU,6BAApB,SACE,cAACxK,EAAD,CACEkB,WAAYA,EACZnI,WAAYA,EACZC,kBAAmBA,GACnB6N,aAAcA,GACdC,gBAAiBA,GACjB4B,kBAAmBA,GACnB5P,UAAS,OAAE2H,QAAF,IAAEA,OAAF,EAAEA,EAAgBvD,GAC3B2D,aAAcA,EACdH,WAAYA,EACZoB,KAAMA,GACNrB,eAAgBA,MAKrBW,IACC,cAAC,WAAD,CAAUoJ,SAAU,2CAApB,SACE,cAAC,UAAD,CACE1R,UAAS,OAAE2H,QAAF,IAAEA,OAAF,EAAEA,EAAgBvD,GAC3BnE,WAAYqI,GACZpI,kBAhLoB,WAC9BqI,IAAsB,IAgLZpI,cAAeA,GACfC,iBAAkBA,GAClBC,qBAAsBA","file":"static/js/58.c1837b05.chunk.js","sourcesContent":["import {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  FormControl,\n  Grid,\n  Select,\n  Table,\n  TableBody,\n  TableCell,\n  TableRow,\n  TextField,\n  Typography,\n  Stepper,\n  Step,\n  StepLabel,\n  Alert,\n  Autocomplete,\n} from \"@mui/material\";\nimport { useState } from \"react\";\nimport db from \"../../../firebase\";\nimport firebase from \"firebase/compat\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectSnackbar, setSnackbar } from \"../../../features/snackbarSlice\";\nimport { setLoading } from \"../../../features/globalSlice\";\nimport { useSnackbar } from \"notistack\";\nimport {\n  setClientDocumentIdSelected,\n  setClientDocumentObjectSelected,\n  setCompanyDetails,\n  setCompanyIdSelected,\n} from \"../../../features/documentSlice\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: \"100%\",\n  },\n  backButton: {\n    marginRight: theme.spacing(1),\n  },\n  instructions: {\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1),\n  },\n  selectAllText: {\n    fontWeight: 500,\n  },\n  selectedAll: {\n    backgroundColor: \"rgba(0, 0, 0, 0.08)\",\n    \"&:hover\": {\n      backgroundColor: \"rgba(0, 0, 0, 0.08)\",\n    },\n  },\n  indeterminateColor: {\n    color: theme.palette.primary,\n  },\n}));\n\nfunction getSteps() {\n  return [\"Tell us\", \"Contact Info\", \"Save & Finish\"];\n}\n\nfunction getStepContent(stepIndex) {\n  switch (stepIndex) {\n    case 0:\n      return \"Tell us about your business\";\n    case 1:\n      return \"Enter your business contact information\";\n    /* case 2:\n      return 'Enter absence quota that will be applied to all employees'; */\n    case 2:\n      return \"You are all done!\";\n    default:\n      return \"Unknown stepIndex\";\n  }\n}\n\nfunction CreateClientDialog({\n  companyId,\n  openDialog,\n  handleCloseDialog,\n  clientDetails,\n  setClientDetails,\n  initializeClientList,\n}) {\n  const { enqueueSnackbar } = useSnackbar();\n\n  const {\n    name,\n    companyRefId,\n    companyRefName,\n    companyType,\n    tan,\n    address,\n    email,\n    email2,\n    email3,\n    email4,\n    contactNumber,\n    mobileNumber,\n    brn,\n    nic,\n    buyerType,\n    representativeName,\n    representativeContactNumber,\n  } = clientDetails;\n\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const snackbar = useSelector(selectSnackbar);\n  const [activeStep, setActiveStep] = useState(0);\n  const steps = getSteps();\n  const [error, setError] = useState({\n    errorBool: false,\n    errorMsg: \"\",\n  });\n  const { errorBool, errorMsg } = error;\n\n  const handleNext = () => {\n    if (activeStep === 0) {\n      if (name === \"\") {\n        setError({\n          errorBool: true,\n          errorMsg: \"Please enter a name\",\n        });\n      } else {\n        setError({\n          errorBool: false,\n          errorMsg: \"\",\n        });\n        setActiveStep((prevActiveStep) => prevActiveStep + 1);\n      }\n    } else if (activeStep === 2) {\n      setError({\n        errorBool: false,\n        errorMsg: \"\",\n      });\n      addClient();\n      setActiveStep(0);\n    } else {\n      setError({\n        errorBool: false,\n        errorMsg: \"\",\n      });\n      setActiveStep((prevActiveStep) => prevActiveStep + 1);\n    }\n  };\n\n  const handleBack = () => {\n    setActiveStep((prevActiveStep) => prevActiveStep - 1);\n  };\n\n  const handleReset = () => {\n    setActiveStep(0);\n  };\n\n  const addClient = async () => {\n    if (process.env.REACT_APP_COMPANY_ID) {\n      dispatch(setLoading(true));\n\n      await db\n        .collection(\"company\")\n        .doc(process.env.REACT_APP_COMPANY_ID)\n        .collection(\"client\")\n        .add({\n          name: name || \"\",\n          companyRefId: companyRefId || \"\",\n          companyRefName: companyRefName || \"\",\n          companyType: companyType || \"\",\n          tan: tan || \"\",\n          address: address || \"\",\n          email: email || \"\",\n          email2: email2 || \"\",\n          email3: email3 || \"\",\n          email4: email4 || \"\",\n          contactNumber: contactNumber || \"\",\n          mobileNumber: mobileNumber || \"\",\n          brn: brn || \"\",\n          nic: nic || \"\",\n          buyerType: buyerType || null,\n          representativeName: representativeName || \"\",\n          representativeContactNumber: representativeContactNumber || \"\",\n          timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n        })\n        .then(() => {\n          enqueueSnackbar(`Client added successfully`);\n          dispatch(setLoading(false));\n\n          // reset company id\n          dispatch(setCompanyIdSelected(undefined));\n\n          // reset company details\n          dispatch(setCompanyDetails(null));\n\n          dispatch(setClientDocumentIdSelected(undefined));\n\n          dispatch(setClientDocumentObjectSelected(undefined));\n\n          handleCloseDialog();\n\n          if (initializeClientList) {\n            initializeClientList();\n          }\n        })\n        .catch((error) => {\n          enqueueSnackbar(\n            `Error occured while adding client: ${error?.message}`\n          );\n          dispatch(setLoading(false));\n        });\n    } else {\n      dispatch(\n        setSnackbar({\n          counter: snackbar.counter + 1,\n          message:\n            \"Your session has been terminated due to greater than 30 minutes of inactivity. Please log in again.\",\n          variant: \"error\",\n        })\n      );\n    }\n  };\n\n  return (\n    <>\n      <Dialog\n        style={{ width: \"100%\" }}\n        maxWidth=\"md\"\n        fullWidth\n        open={openDialog}\n        onClose={handleCloseDialog}\n      >\n        <DialogTitle id=\"alert-dialog-title\">Create a company</DialogTitle>\n        <DialogContent style={{ height: \"auto\" }}>\n          <Grid\n            container\n            style={{\n              width: \"100%\",\n              display: \"flex\",\n              flexDirection: \"row\",\n              justifyContent: \"center\",\n              alignItems: \"center\",\n            }}\n          >\n            <Grid item xs={12} sm={6}>\n              <Typography variant=\"h6\" align=\"left\" color=\"primary\">\n                {getStepContent(activeStep)}\n              </Typography>\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <div className={classes.root}>\n                <Stepper activeStep={activeStep} alternativeLabel>\n                  {steps.map((label) => (\n                    <Step key={label}>\n                      <StepLabel>{label}</StepLabel>\n                    </Step>\n                  ))}\n                </Stepper>\n              </div>\n            </Grid>\n          </Grid>\n          <Alert\n            variant=\"filled\"\n            severity=\"error\"\n            style={{ display: errorBool ? \"\" : \"none\" }}\n          >\n            {errorMsg}\n          </Alert>\n          <div style={{ display: activeStep === 0 ? \"\" : \"none\" }}>\n            <br />\n            <hr />\n            <Grid container spacing={3} style={{ marginTop: \"1em\" }}>\n              <Grid item xs={12} sm={6} md={4}>\n                <TextField\n                  variant=\"outlined\"\n                  required\n                  fullWidth\n                  name=\"name\"\n                  label=\"Name\"\n                  type=\"text\"\n                  id=\"name\"\n                  size=\"small\"\n                  value={name || \"\"}\n                  onChange={(event) => {\n                    setClientDetails({\n                      ...clientDetails,\n                      name: event.target.value,\n                    });\n                  }}\n                />\n              </Grid>\n              <Grid item xs={12} sm={6} md={4}>\n                <FormControl size=\"small\" variant=\"outlined\" fullWidth>\n                  <Select\n                    size=\"small\"\n                    native\n                    //label=\"Company Type\"\n                    placeholder=\"Please choose a company type\"\n                    value={companyType || \"\"}\n                    onChange={(event) => {\n                      setClientDetails({\n                        ...clientDetails,\n                        companyType: event.target.value,\n                      });\n                    }}\n                    inputProps={{\n                      name: \"companyType\",\n                      id: \"companyType\",\n                    }}\n                  >\n                    <option value=\"\">Please choose a Company Type</option>\n                    <option value=\"Individual\">Individual</option>\n                    <option value=\"Company\">Company</option>\n                    <option value=\"Other\">Other</option>\n                  </Select>\n                </FormControl>\n              </Grid>\n              <Grid item xs={12} sm={6} md={4}>\n                <TextField\n                  size=\"small\"\n                  variant=\"outlined\"\n                  fullWidth\n                  name=\"tan\"\n                  label=\"VAT\"\n                  type=\"number\"\n                  id=\"tan\"\n                  value={tan || \"\"}\n                  onChange={(event) => {\n                    setClientDetails({\n                      ...clientDetails,\n                      tan: event.target.value,\n                    });\n                  }}\n                />\n              </Grid>\n              <Grid item xs={12} sm={6} md={4}>\n                <TextField\n                  variant=\"outlined\"\n                  size=\"small\"\n                  fullWidth\n                  name=\"brn\"\n                  label=\"BRN\"\n                  type=\"text\"\n                  id=\"brn\"\n                  value={brn || \"\"}\n                  onChange={(event) => {\n                    setClientDetails({\n                      ...clientDetails,\n                      brn: event.target.value,\n                    });\n                  }}\n                />\n              </Grid>\n              <Grid item xs={12} sm={6} md={4}>\n                <TextField\n                  variant=\"outlined\"\n                  size=\"small\"\n                  fullWidth\n                  name=\"nic\"\n                  label=\"NIC\"\n                  type=\"text\"\n                  id=\"nic\"\n                  value={nic || \"\"}\n                  onChange={(event) => {\n                    setClientDetails({\n                      ...clientDetails,\n                      nic: event.target.value,\n                    });\n                  }}\n                />\n              </Grid>\n              <Grid item xs={12} sm={6} md={4}>\n                <Autocomplete\n                  ListboxProps={{ style: { maxHeight: \"70vh\" } }}\n                  size=\"small\"\n                  label=\"Please define type of buyer\"\n                  id=\"buyer-type-drop-down\"\n                  options={\n                    process.env.REACT_APP_EBS_BUYER_TYPE_VALUES\n                      ? JSON.parse(process.env.REACT_APP_EBS_BUYER_TYPE_VALUES)\n                      : []\n                  }\n                  value={buyerType}\n                  renderInput={(params) => (\n                    <TextField\n                      {...params}\n                      label=\"Please define type of buyer\"\n                    />\n                  )}\n                  onChange={(e, value, reason) => {\n                    e.preventDefault();\n                    if (\n                      reason !== \"removeOption\" &&\n                      reason !== \"clear\" &&\n                      value\n                    ) {\n                      setClientDetails({\n                        ...clientDetails,\n                        buyerType: value,\n                      });\n                    } else if (\n                      reason === \"removeOption\" ||\n                      reason === \"clear\"\n                    ) {\n                      setClientDetails({\n                        ...clientDetails,\n                        buyerType: null,\n                      });\n                    }\n                  }}\n                  getOptionLabel={(option) => option?.title || \"\"}\n                  fullWidth\n                />\n              </Grid>\n            </Grid>\n          </div>\n          <div style={{ display: activeStep === 1 ? \"\" : \"none\" }}>\n            <br />\n            <hr />\n            <Grid container spacing={3} style={{ marginTop: \"1em\" }}>\n              <Grid item xs={12} sm={6} md={4}>\n                <TextField\n                  size=\"small\"\n                  variant=\"outlined\"\n                  fullWidth\n                  name=\"address\"\n                  label=\"Address\"\n                  type=\"text\"\n                  id=\"address\"\n                  value={address || \"\"}\n                  onChange={(event) => {\n                    setClientDetails({\n                      ...clientDetails,\n                      address: event.target.value,\n                    });\n                  }}\n                />\n              </Grid>\n              <Grid item xs={12} sm={6} md={4}>\n                <TextField\n                  size=\"small\"\n                  variant=\"outlined\"\n                  fullWidth\n                  name=\"contactNumber\"\n                  label=\"Contact Number\"\n                  type=\"text\"\n                  id=\"contactNumber\"\n                  value={contactNumber || \"\"}\n                  onChange={(event) => {\n                    setClientDetails({\n                      ...clientDetails,\n                      contactNumber: event.target.value,\n                    });\n                  }}\n                />\n              </Grid>\n\n              <Grid item xs={12} sm={6} md={4}>\n                <TextField\n                  size=\"small\"\n                  variant=\"outlined\"\n                  fullWidth\n                  name=\"mobileNumber\"\n                  label=\"Mobile Number\"\n                  type=\"text\"\n                  id=\"mobileNumber\"\n                  value={mobileNumber || \"\"}\n                  onChange={(event) => {\n                    setClientDetails({\n                      ...clientDetails,\n                      mobileNumber: event.target.value,\n                    });\n                  }}\n                />\n              </Grid>\n              <Grid item xs={12} sm={6} md={4}>\n                <TextField\n                  size=\"small\"\n                  variant=\"outlined\"\n                  fullWidth\n                  name=\"email\"\n                  label=\"Email 1\"\n                  type=\"text\"\n                  id=\"email\"\n                  value={email || \"\"}\n                  onChange={(event) => {\n                    setClientDetails({\n                      ...clientDetails,\n                      email: event.target.value,\n                    });\n                  }}\n                />\n              </Grid>\n\n              <Grid item xs={12} sm={6} md={4}>\n                <TextField\n                  size=\"small\"\n                  variant=\"outlined\"\n                  fullWidth\n                  name=\"email2\"\n                  label=\"Email 2\"\n                  type=\"text\"\n                  id=\"email2\"\n                  value={email2 || \"\"}\n                  onChange={(event) => {\n                    setClientDetails({\n                      ...clientDetails,\n                      email2: event.target.value,\n                    });\n                  }}\n                />\n              </Grid>\n\n              <Grid item xs={12} sm={6} md={4}>\n                <TextField\n                  size=\"small\"\n                  variant=\"outlined\"\n                  fullWidth\n                  name=\"email3\"\n                  label=\"Email 3\"\n                  type=\"text\"\n                  id=\"email3\"\n                  value={email3 || \"\"}\n                  onChange={(event) => {\n                    setClientDetails({\n                      ...clientDetails,\n                      email3: event.target.value,\n                    });\n                  }}\n                />\n              </Grid>\n\n              <Grid item xs={12} sm={6} md={4}>\n                <TextField\n                  size=\"small\"\n                  variant=\"outlined\"\n                  fullWidth\n                  name=\"email4\"\n                  label=\"Email 4\"\n                  type=\"text\"\n                  id=\"email4\"\n                  value={email4 || \"\"}\n                  onChange={(event) => {\n                    setClientDetails({\n                      ...clientDetails,\n                      email4: event.target.value,\n                    });\n                  }}\n                />\n              </Grid>\n\n              <Grid item xs={12} sm={6} md={4}>\n                <TextField\n                  size=\"small\"\n                  variant=\"outlined\"\n                  fullWidth\n                  name=\"representativeName\"\n                  label=\"Representative name\"\n                  type=\"text\"\n                  id=\"representativeName\"\n                  value={representativeName || \"\"}\n                  onChange={(event) => {\n                    setClientDetails({\n                      ...clientDetails,\n                      representativeName: event.target.value,\n                    });\n                  }}\n                />\n              </Grid>\n\n              <Grid item xs={12} sm={6} md={4}>\n                <TextField\n                  size=\"small\"\n                  variant=\"outlined\"\n                  fullWidth\n                  name=\"representativeContactNumber\"\n                  label=\"Representative contact number\"\n                  type=\"text\"\n                  id=\"representativeContactNumber\"\n                  value={representativeContactNumber || \"\"}\n                  onChange={(event) => {\n                    setClientDetails({\n                      ...clientDetails,\n                      representativeContactNumber: event.target.value,\n                    });\n                  }}\n                />\n              </Grid>\n            </Grid>\n          </div>\n\n          <div\n            style={{\n              display: activeStep === 2 ? \"\" : \"none\",\n              width: \"100%\",\n              height: \"100%\",\n            }}\n          >\n            <Table>\n              <TableBody>\n                <TableRow>\n                  <TableCell>Name:</TableCell>\n                  <TableCell>{name || \"\"}</TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell>Company Type:</TableCell>\n                  <TableCell>{companyType || \"\"}</TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell>VAT:</TableCell>\n                  <TableCell>{tan || \"\"}</TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell>BRN:</TableCell>\n                  <TableCell>{brn || \"\"}</TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell>NIC:</TableCell>\n                  <TableCell>{nic || \"\"}</TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell>Address:</TableCell>\n                  <TableCell>{address || \"\"}</TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell>Contact Number:</TableCell>\n                  <TableCell>{contactNumber || \"\"}</TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell>Mobile Number:</TableCell>\n                  <TableCell>{mobileNumber || \"\"}</TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell>Email:</TableCell>\n                  <TableCell>{email || \"\"}</TableCell>\n                </TableRow>\n              </TableBody>\n            </Table>\n          </div>\n        </DialogContent>\n        <DialogActions>\n          <div>\n            {activeStep === steps.length ? (\n              <div>\n                <Typography className={classes.instructions}>\n                  All steps completed\n                </Typography>\n                <Button onClick={handleReset}>Reset</Button>\n              </div>\n            ) : (\n              <div>\n                <Button\n                  disabled={activeStep === 0}\n                  onClick={handleBack}\n                  className={classes.backButton}\n                  variant=\"outlined\"\n                >\n                  Back\n                </Button>\n                <Button\n                  variant=\"contained\"\n                  color=\"primary\"\n                  onClick={handleNext}\n                  className={classes.backButton}\n                >\n                  {activeStep === steps.length - 1 ? \"Save\" : \"Next\"}\n                </Button>\n              </div>\n            )}\n          </div>\n          <Button onClick={handleCloseDialog} color=\"error\" variant=\"outlined\">\n            Cancel\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  );\n}\n\nexport default CreateClientDialog;\n","import {\n  Autocomplete,\n  Button,\n  Container,\n  Grid,\n  TextField,\n  Typography,\n  Stack,\n} from \"@mui/material\";\nimport { useSnackbar } from \"notistack\";\nimport { lazy, Suspense, useEffect, useRef, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectCompanyList } from \"src/features/companySlice\";\nimport {\n  selectDocument,\n  setClientList,\n  setCompanyDetails,\n  setCompanyIdSelected,\n} from \"src/features/documentSlice\";\nimport { setLoading } from \"src/features/globalSlice\";\nimport db from \"src/firebase\";\nimport moment from \"moment\";\nimport CreateClientDialog from \"../manage-client/CreateClientDialog\";\nimport { DatePicker } from \"@mui/lab\";\nimport firebase from \"firebase/compat\";\nimport { dynamicSortDesc } from \"src/components/core-functions/SelectionCoreFunctions\";\nimport useAuth from \"src/hooks/useAuth\";\nimport useSettings from \"src/hooks/useSettings\";\nimport Page from \"src/components/Page\";\n\nconst TableCRUDTemplate = lazy(() =>\n  import(\"src/components/table/TableCRUDTemplate\")\n);\nconst CreateOrUpdateClientSurveyDialog = lazy(() =>\n  import(\"./CreateOrUpdateClientSurveyDialog\")\n);\n\nexport default function ClientSurveyDetail() {\n  const { themeStretch } = useSettings();\n\n  const { user } = useAuth();\n\n  const { enqueueSnackbar } = useSnackbar();\n\n  const dispatch = useDispatch();\n\n  const temp_fetchDataRef = useRef();\n\n  const { companyDetails, clientList } = useSelector(selectDocument);\n\n  const { companyList } = useSelector(selectCompanyList);\n\n  const [documentType, setDocumentType] = useState(null);\n\n  const [surveyList, setSurveyList] = useState([]);\n\n  const [openDialog, setOpenDialog] = useState(false);\n\n  const [dialogType, setDialogType] = useState(\"\");\n\n  const [us_new_client_dlg, set_us_new_client_dlg] = useState(false);\n\n  // Calculate the from date to be 5 months before today\n  const initialDate = new Date();\n  initialDate.setMonth(initialDate.getMonth() - 5);\n\n  // Set up useState with the from date\n  const [us_fromDate, set_us_fromDate] = useState(initialDate);\n\n  const [us_ToDate, set_us_ToDate] = useState(new Date());\n\n  const [logo, setLogo] = useState(\"\");\n\n  const temp_logo_image_ref = useRef();\n\n  const temp_checkPermission_ref = useRef();\n\n  const [viewPermissionGranted, setViewPermissionGranted] = useState(false);\n\n  useEffect(() => {\n    temp_checkPermission_ref.current();\n  }, [companyDetails]);\n\n  function checkPermission() {\n    if (companyDetails && companyDetails?.id) {\n      if (\n        !user?.permissions?.viewAllClientSurveyChk?.assignedCompanyId?.includes(\n          companyDetails?.id\n        )\n      ) {\n        enqueueSnackbar(\n          \"You do not have the permission to view this custom feature for this company\",\n          { variant: \"error\" }\n        );\n\n        setViewPermissionGranted(false);\n      } else {\n        setViewPermissionGranted(true);\n      }\n    }\n  }\n\n  temp_checkPermission_ref.current = checkPermission;\n\n  const [clientDetails, setClientDetails] = useState({\n    id: \"\",\n    companyRefId: companyDetails?.id || \"\",\n    companyRefName: (companyDetails && companyDetails?.name) || \"\",\n    name: \"\",\n    companyType: \"\",\n    tan: \"\",\n    address: \"\",\n    contactNumber: \"\",\n    email: \"\",\n    brn: \"\",\n    nic: \"\",\n  });\n\n  const [surveyDetail, setSurveyDetail] = useState({\n    surveyNumber: \"\",\n    customerName: \"\",\n    address: \"\",\n    email: \"\",\n    phone: \"\",\n\n    time: \"\",\n    controlOf: {\n      ants: false,\n      geckos: false,\n      lizard: false,\n      spiders: false,\n      rodent: false,\n      woodworm: false,\n      pigeon: false,\n      cockroaches: false,\n      fleas: false,\n      mosquitoes: false,\n      bedbugs: false,\n      termite: false,\n      snake: false,\n    },\n    otherControlOf: \"\",\n    infestation: {\n      slight: false,\n      moderate: false,\n      severe: false,\n    },\n    infestationNote: \"\",\n    typeOfCockroach: \"\",\n    typeOfTermite: \"\",\n    typeOfTermiteBait: \"\",\n    typeOfTermiteTotal: \"\",\n\n    solTreatmentmeter: \"\",\n    solTreatmentFt: \"\",\n    solTreatmentUnitPrice: \"\",\n    solTreatmentTotal: \"\",\n\n    controlVector: {\n      fumigation: false,\n      mistingControl: false,\n      lightSpraying: false,\n    },\n\n    locationTreated: {\n      house: false,\n      restaurant: false,\n      villa: false,\n      shop: false,\n      stroes: false,\n      snack: false,\n      school: false,\n    },\n    otherLocationTreated: \"\",\n\n    rodentBox: \"\",\n    recommendation: {\n      contratOneYear: false,\n      serviceOneOff: false,\n    },\n\n    evaluationPieces: \"\",\n    estimateAmount: \"\",\n\n    preparedBy: \"\",\n    preparedByName: \"\",\n\n    clientSig: \"\",\n    clientSigName: \"\",\n\n    // service report new requirements\n    serviceCarriesAt: \"\",\n    timeIn: \"\",\n    timeOut: \"\",\n    routine: {\n      complaint: \"\",\n      job: \"\",\n      initialFlushOut: \"\",\n      spotCheck: \"\",\n    },\n    findings: \"\",\n    recommendationServiceReport: \"\",\n    technicianSig: \"\",\n\n    signatureDate: \"\",\n  });\n\n  const headers = [\n    { id: \"list\", label: \"List\" },\n    { id: \"view\", label: \"View\" },\n    { id: \"update\", label: \"Update\" },\n    { id: \"delete\", label: \"Delete\" },\n    { id: \"dateCreated\", label: \"Date created\" },\n    { id: \"id\", label: `${documentType?.title} Number` },\n    { id: \"customerName\", label: \"Customer\" },\n    { id: \"status\", label: \"Status\" },\n    { id: \"viewDownloadPdf\", label: \"PDF\" },\n    { id: \"sendEmail\", label: \"Send email to client\" },\n  ];\n\n  useEffect(() => {\n    temp_logo_image_ref.current();\n  }, [companyDetails]);\n\n  useEffect(() => {\n    temp_fetchDataRef.current();\n  }, [companyDetails, documentType, us_fromDate, us_ToDate]);\n\n  async function getLogoImage() {\n    if (\n      companyDetails?.data?.imageUrl &&\n      companyDetails?.data?.imageUrl !== \"\"\n    ) {\n      dispatch(setLoading(true));\n      let logoImage = await toDataUrl(companyDetails?.data?.imageUrl);\n      setLogo(logoImage);\n      dispatch(setLoading(false));\n    }\n  }\n\n  temp_logo_image_ref.current = getLogoImage;\n\n  /*  async function getSignatureImage() {\n    if (companyDetails?.data?.sigUrl && companyDetails?.data?.sigUrl !== \"\") {\n      dispatch(setLoading(true));\n      let sigImage = await toDataUrl(companyDetails?.data?.sigUrl);\n      setSigClientImage(sigImage);\n    }\n  }\n\n  temp_signature_image_client_ref.current = getSignatureImage; */\n\n  async function toDataUrl(url) {\n    if (url === \"\") {\n      return \"\";\n    } else {\n      try {\n        const data = await fetch(url);\n        const blob = await data.blob();\n        return new Promise((resolve) => {\n          const reader = new FileReader();\n          reader.readAsDataURL(blob);\n          reader.onloadend = () => {\n            const base64data = reader.result;\n            resolve(base64data);\n          };\n        });\n      } catch (e) {\n        console.log(e);\n      }\n    }\n  }\n\n  const fetchData = () => {\n    if (companyDetails && documentType && us_fromDate && us_ToDate) {\n      fetchClientSurvey(companyDetails.id, documentType?.id);\n    }\n  };\n\n  temp_fetchDataRef.current = fetchData;\n\n  async function initializeClientList(companyId) {\n    await db\n      .collection(\"company\")\n      .doc(process.env.REACT_APP_COMPANY_ID)\n      .collection(\"client\")\n      .orderBy(\"name\", \"asc\")\n      .get()\n      .then((queryDocs) => {\n        if (queryDocs?.docs?.length > 0) {\n          let arr = [];\n          queryDocs?.docs.forEach((doc) => {\n            arr.push({\n              id: doc?.id,\n              name: doc?.data()?.name,\n              data: { ...doc?.data() },\n            });\n          });\n\n          dispatch(setClientList(arr));\n          dispatch(setLoading(false));\n        } else {\n          dispatch(setClientList([]));\n          dispatch(setLoading(false));\n        }\n      })\n      .catch((err) => {\n        enqueueSnackbar(\n          `Error occured while fetching clients: ${err?.message}`\n        );\n        dispatch(setLoading(false));\n      });\n  }\n\n  const handleSelectChange = async (e, value, reason, type) => {\n    e.preventDefault();\n    if (reason !== \"removeOption\" && reason !== \"clear\" && value) {\n      if (type === \"company\") {\n        // redux company id\n        dispatch(setCompanyIdSelected(value.id));\n\n        // redux company object\n        dispatch(setCompanyDetails(value));\n\n        initializeClientList(value.id);\n      } else if (type === \"documentType\") {\n        setDocumentType(value);\n      }\n    } else if (reason === \"removeOption\" || reason === \"clear\") {\n      if (type === \"company\") {\n        // reset company id\n        dispatch(setCompanyIdSelected(undefined));\n\n        // reset company details\n        dispatch(setCompanyDetails(null));\n\n        dispatch(setClientList([]));\n      } else if (type === \"documentType\") {\n        setDialogType(null);\n      }\n    }\n  };\n\n  const fetchClientSurvey = async (companyId, collectionName) => {\n    if (new Date(us_fromDate) > new Date(us_ToDate)) {\n      enqueueSnackbar(`Date incorrect. To Date cannot be before From Date.`, {\n        variant: \"error\",\n      });\n      dispatch(setLoading(false));\n    } else {\n      dispatch(setLoading(true));\n      const startDateISOString = us_fromDate.toISOString();\n      const startDateStringSplit = startDateISOString.split(\"T\");\n\n      const endDateISOString = us_ToDate.toISOString();\n      const endDateStringSplit = endDateISOString.split(\"T\");\n\n      const startDate = new Date(`${startDateStringSplit[0]}T00:00:00.000Z`); // The start date of the range\n      const endDate = new Date(`${endDateStringSplit[0]}T23:59:59.000Z`); // The end date of the range\n\n      await db\n        .collection(\"company\")\n        .doc(companyId)\n        .collection(collectionName)\n        .where(\n          \"dateCreated\",\n          \">=\",\n          firebase.firestore.Timestamp.fromDate(startDate)\n        )\n        .where(\n          \"dateCreated\",\n          \"<=\",\n          firebase.firestore.Timestamp.fromDate(endDate)\n        )\n        .get()\n        .then((result) => {\n          if (result?.docs && result?.docs?.length > 0) {\n            let arr = [];\n            result?.docs.forEach((doc) => {\n              if (doc?.id !== \"documentIndex\") {\n                arr.push({\n                  data: { ...doc?.data() },\n                  dateCreated: doc?.data()?.dateCreated\n                    ? moment(doc?.data()?.dateCreated.toDate()).format(\n                        \"DD-MM-YYYY HH:mm:ss\"\n                      )\n                    : \"\",\n                  id: doc?.id,\n                  customerName: doc?.data()?.customerName || \"\",\n                  status: doc?.data()?.status || \"Pending\",\n                  viewDownloadPdf: \"\",\n                  sendEmail: \"\",\n                });\n              }\n            });\n\n            arr.sort(dynamicSortDesc(\"id\"));\n\n            setSurveyList(arr);\n            dispatch(setLoading(false));\n          } else {\n            setSurveyList([]);\n            dispatch(setLoading(false));\n          }\n        });\n    }\n  };\n\n  const addBtnFunc = () => {\n    setDialogType(\"add\");\n    setOpenDialog(true);\n    setSurveyDetail({\n      ...surveyDetail,\n      id: \"\",\n      surveyNumber: \"\",\n      customerName: \"\",\n      address: \"\",\n      email: \"\",\n      phone: \"\",\n      serviceCarriesAt: \"\",\n      time: \"\",\n      controlOf: {\n        ants: false,\n        geckos: false,\n        lizard: false,\n        spiders: false,\n        rodent: false,\n        woodworm: false,\n        pigeon: false,\n        cockroaches: false,\n        fleas: false,\n        mosquitoes: false,\n        bedbugs: false,\n        termite: false,\n        snake: false,\n      },\n      otherControlOf: \"\",\n      infestation: {\n        slight: false,\n        moderate: false,\n        severe: false,\n      },\n      infestationNote: \"\",\n      typeOfCockroach: \"\",\n      typeOfTermite: \"\",\n      typeOfTermiteBait: \"\",\n      typeOfTermiteTotal: \"\",\n\n      solTreatmentmeter: \"\",\n      solTreatmentFt: \"\",\n      solTreatmentUnitPrice: \"\",\n      solTreatmentTotal: \"\",\n\n      controlVector: {\n        fumigation: false,\n        mistingControl: false,\n        lightSpraying: false,\n      },\n\n      locationTreated: {\n        house: false,\n        restaurant: false,\n        villa: false,\n        shop: false,\n        stroes: false,\n        snack: false,\n        school: false,\n      },\n      otherLocationTreated: \"\",\n\n      rodentBox: \"\",\n      recommendation: {\n        contratOneYear: false,\n        serviceOneOff: false,\n      },\n\n      evaluationPieces: \"\",\n      estimateAmount: \"\",\n\n      preparedBy: \"\",\n      clientSigName: \"\",\n      clientSig: \"\",\n\n      signatureDate: \"\",\n    });\n  };\n\n  const updateBtnFunc = (id, data) => {\n    setDialogType(\"update\");\n    setOpenDialog(true);\n    setSurveyDetail({\n      ...data,\n      id: id,\n    });\n  };\n\n  const viewBtnFunc = (id, data) => {\n    setDialogType(\"view\");\n    setOpenDialog(true);\n    setSurveyDetail({\n      ...data,\n      id: id,\n    });\n  };\n\n  const handleCloseDialog = () => {\n    setOpenDialog(false);\n    setSurveyDetail({\n      surveyNumber: \"\",\n      customerName: \"\",\n      address: \"\",\n      email: \"\",\n      phone: \"\",\n      serviceCarriesAt: \"\",\n      time: \"\",\n      controlOf: {\n        ants: false,\n        geckos: false,\n        lizard: false,\n        spiders: false,\n        rodent: false,\n        woodworm: false,\n        pigeon: false,\n        cockroaches: false,\n        fleas: false,\n        mosquitoes: false,\n        bedbugs: false,\n        termite: false,\n        snake: false,\n      },\n      otherControlOf: \"\",\n      infestation: {\n        slight: false,\n        moderate: false,\n        severe: false,\n      },\n      infestationNote: \"\",\n      typeOfCockroach: \"\",\n      typeOfTermite: \"\",\n      typeOfTermiteBait: \"\",\n      typeOfTermiteTotal: \"\",\n\n      solTreatmentmeter: \"\",\n      solTreatmentFt: \"\",\n      solTreatmentUnitPrice: \"\",\n      solTreatmentTotal: \"\",\n\n      controlVector: {\n        fumigation: false,\n        mistingControl: false,\n        lightSpraying: false,\n      },\n\n      locationTreated: {\n        house: false,\n        restaurant: false,\n        villa: false,\n        shop: false,\n        stroes: false,\n        snack: false,\n        school: false,\n      },\n      otherLocationTreated: \"\",\n\n      rodentBox: \"\",\n      recommendation: {\n        contratOneYear: false,\n        serviceOneOff: false,\n      },\n\n      evaluationPieces: \"\",\n      estimateAmount: \"\",\n\n      preparedBy: \"\",\n      clientSigName: \"\",\n      clientSig: \"\",\n\n      signatureDate: \"\",\n    });\n  };\n\n  const deleteBtnFunc = async (id) => {\n    dispatch(setLoading(true));\n\n    let collectionName = documentType.id;\n\n    if (collectionName) {\n      await db\n        .collection(\"company\")\n        .doc(companyDetails?.id)\n        .collection(collectionName)\n        .doc(id)\n        .delete()\n        .then(async () => {\n          fetchClientSurvey(companyDetails?.id, documentType?.id);\n          dispatch(setLoading(false));\n        })\n        .catch((err) => {\n          enqueueSnackbar(\n            `Error occured while deleting ${documentType?.title || \"\"}: ${\n              err?.message\n            }`,\n            { variant: \"error\" }\n          );\n          dispatch(setLoading(false));\n        });\n    }\n  };\n\n  const handleCloseClientDialog = () => {\n    set_us_new_client_dlg(false);\n  };\n\n  return (\n    <Page title=\"Bugs Be Gone custom\">\n      <Container maxWidth={themeStretch ? false : \"xl\"}>\n        <Grid container spacing={3}>\n          <Grid item xs={12} md={12}>\n            <Typography variant=\"h5\">Bugs Be Gone Custom documents</Typography>\n          </Grid>\n          <Grid item xs={12} md={4}>\n            <Autocomplete\n              ListboxProps={{ style: { maxHeight: \"70vh\" } }}\n              size=\"small\"\n              label=\"Please choose a company\"\n              id=\"company-drop-down\"\n              options={companyList || []}\n              value={companyDetails || null}\n              renderInput={(params) => (\n                <TextField\n                  {...params}\n                  label=\"Please choose a company\"\n                  InputLabelProps={{ required: true }}\n                />\n              )}\n              required\n              onChange={(e, value, reason) =>\n                handleSelectChange(e, value, reason, \"company\")\n              }\n              getOptionLabel={(option) => option?.name || \"\"}\n            />\n          </Grid>\n\n          {companyDetails && viewPermissionGranted ? (\n            <>\n              <Grid item xs={12} md={4}>\n                <Autocomplete\n                  ListboxProps={{ style: { maxHeight: \"70vh\" } }}\n                  size=\"small\"\n                  label=\"Please choose type of document\"\n                  id=\"document-drop-down\"\n                  options={\n                    (process.env.REACT_APP_DOCUMENT_TYPE_OPTIONS &&\n                      JSON.parse(\n                        process.env.REACT_APP_DOCUMENT_TYPE_OPTIONS\n                      )) ||\n                    []\n                  }\n                  value={documentType || null}\n                  renderInput={(params) => (\n                    <TextField\n                      {...params}\n                      label=\"Please choose type of document\"\n                      InputLabelProps={{ required: true }}\n                    />\n                  )}\n                  required\n                  onChange={(e, value, reason) =>\n                    handleSelectChange(e, value, reason, \"documentType\")\n                  }\n                  getOptionLabel={(option) => option.title || \"\"}\n                />\n              </Grid>\n\n              <Grid item xs={12} md={3}>\n                <Button\n                  variant=\"outlined\"\n                  color=\"primary\"\n                  onClick={() => set_us_new_client_dlg(true)}\n                >\n                  Add new client\n                </Button>\n              </Grid>\n\n              {documentType ? (\n                <>\n                  <Grid item xs={12} md={12}>\n                    <hr />\n                    <br />\n                    <Typography>Please choose a date</Typography>\n                  </Grid>\n\n                  <Grid item xs={12} md={12} style={{ width: \"100%\" }}>\n                    <Stack direction={\"row\"} spacing={3} alignItems={\"center\"}>\n                      <DatePicker\n                        label=\"From\"\n                        value={us_fromDate || \"\"}\n                        onChange={(newValue) => {\n                          set_us_fromDate(newValue);\n                        }}\n                        renderInput={(params) => (\n                          <TextField {...params} size=\"small\" />\n                        )}\n                        inputFormat=\"dd/MM/yyyy\"\n                      />\n\n                      <DatePicker\n                        label=\"To\"\n                        value={us_ToDate || \"\"}\n                        onChange={(newValue) => {\n                          set_us_ToDate(newValue);\n                        }}\n                        renderInput={(params) => (\n                          <TextField {...params} size=\"small\" />\n                        )}\n                        inputFormat=\"dd/MM/yyyy\"\n                      />\n                    </Stack>\n                  </Grid>\n                </>\n              ) : (\n                <></>\n              )}\n            </>\n          ) : (\n            <></>\n          )}\n\n          {companyDetails && documentType ? (\n            <>\n              <Grid item xs={12} md={12}>\n                <Suspense fallback={<p>Loading...</p>}>\n                  <TableCRUDTemplate\n                    companyId={companyDetails?.id}\n                    type=\"survey\"\n                    headers={headers}\n                    aCollection={surveyList}\n                    viewOption={true}\n                    viewBtnFunc={viewBtnFunc}\n                    addBtnDisplay={true}\n                    addBtnLabel={`Create new ${documentType?.title}`}\n                    addBtnFunc={addBtnFunc}\n                    openDialog={openDialog}\n                    handleCloseDialog={handleCloseDialog}\n                    emptyColMsg={`No ${documentType?.title} retrieved for the date range selected.`}\n                    updateBtnDisplay={true}\n                    deleteBtnDisplay={true}\n                    updateBtnFunc={updateBtnFunc}\n                    deleteBtnFunc={deleteBtnFunc}\n                    documentType={documentType}\n                    logo={logo}\n                    companyDetails={companyDetails}\n                    fetchClientSurvey={fetchClientSurvey}\n                  />\n                </Suspense>\n              </Grid>\n            </>\n          ) : (\n            <></>\n          )}\n        </Grid>\n\n        {openDialog && (\n          <Suspense fallback={<></>}>\n            <CreateOrUpdateClientSurveyDialog\n              dialogType={dialogType}\n              openDialog={openDialog}\n              handleCloseDialog={handleCloseDialog}\n              surveyDetail={surveyDetail}\n              setSurveyDetail={setSurveyDetail}\n              fetchClientSurvey={fetchClientSurvey}\n              companyId={companyDetails?.id}\n              documentType={documentType}\n              clientList={clientList}\n              logo={logo}\n              companyDetails={companyDetails}\n            />\n          </Suspense>\n        )}\n\n        {us_new_client_dlg && (\n          <Suspense fallback={<p>Loading...</p>}>\n            <CreateClientDialog\n              companyId={companyDetails?.id}\n              openDialog={us_new_client_dlg}\n              handleCloseDialog={handleCloseClientDialog}\n              clientDetails={clientDetails}\n              setClientDetails={setClientDetails}\n              initializeClientList={initializeClientList}\n            />\n          </Suspense>\n        )}\n      </Container>\n    </Page>\n  );\n}\n"],"sourceRoot":""}