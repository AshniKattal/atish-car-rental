{"version":3,"sources":["components/selection-component/CompanyClientSelection.js"],"names":["CompanyClientSelection","type","actionType","dispatch","useDispatch","companyList","useSelector","selectCompanyList","companyDetails","selectDocument","handleSelectChange","e","value","reason","a","preventDefault","setCompanyIdSelected","id","setCompanyDetails","setClientDocumentIdSelected","undefined","setClientDocumentObjectSelected","setReportDocType","item","xs","md","ListboxProps","style","maxHeight","size","label","options","sx","width","renderInput","params","InputLabelProps","required","onChange","getOptionLabel","option","name","disabled","memo"],"mappings":"8PAmBA,SAASA,EAAT,GAAuD,IAArBC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,WAChCC,EAAWC,cAETC,EAAgBC,YAAYC,KAA5BF,YAEAG,EAAmBF,YAAYG,KAA/BD,eAEFE,EAAkB,uCAAG,WAAOC,EAAGC,EAAOC,EAAQZ,GAAzB,SAAAa,EAAA,sDACzBH,EAAEI,iBACa,iBAAXF,GAAwC,UAAXA,GAAsBD,EACxC,YAATX,IAEFE,EAASa,YAAqBJ,EAAMK,KAGpCd,EAASe,YAAkBN,IAG3BT,EAASgB,iBAA4BC,IACrCjB,EAASkB,YAAgC,OAEzClB,EAASmB,YAAiB,MAKR,iBAAXT,GAAwC,UAAXA,GACzB,YAATZ,IAEFE,EAASa,iBAAqBI,IAG9BjB,EAASe,YAAkB,OAG3Bf,EAASgB,iBAA4BC,IACrCjB,EAASkB,YAAgC,OAEzClB,EAASmB,YAAiB,MA/BL,2CAAH,4DAoCxB,OACE,mCACE,cAAC,IAAD,CAAMC,MAAI,EAACC,GAAI,GAAIC,GAAI,GAAvB,SACE,cAAC,IAAD,CACEC,aAAc,CAAEC,MAAO,CAAEC,UAAW,SACpCC,KAAK,QACLC,MAAM,0BACNb,GAAG,oBACHc,QAAS1B,GAAe,GACxBO,MAAOJ,GAAkB,KACzBwB,GAAI,CAAEC,MAAO,KACbC,YAAa,SAACC,GAAD,OACX,cAAC,IAAD,2BACMA,GADN,IAEEL,MAAM,0BACNM,gBAAiB,CAAEC,UAAU,OAGjCA,UAAQ,EACRC,SAAU,SAAC3B,EAAGC,EAAOC,GAAX,OACRH,EAAmBC,EAAGC,EAAOC,EAAQ,YAEvC0B,eAAgB,SAACC,GAAD,OAAkB,OAANA,QAAM,IAANA,OAAA,EAAAA,EAAQC,OAAQ,IAC5CC,SAAmB,WAATzC,IAAsBC,QAO3ByC,yBAAK3C","file":"static/js/3.551fb80d.chunk.js","sourcesContent":["import PropTypes from \"prop-types\";\nimport { Autocomplete, Grid, TextField } from \"@mui/material\";\nimport { memo } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  selectDocument,\n  setClientDocumentIdSelected,\n  setClientDocumentObjectSelected,\n  setCompanyDetails,\n  setCompanyIdSelected,\n  setReportDocType,\n} from \"../../features/documentSlice\";\nimport { selectCompanyList } from \"src/features/companySlice\";\n\nCompanyClientSelection.propTypes = {\n  type: PropTypes.string.isRequired,\n  actionType: PropTypes.string,\n};\n\nfunction CompanyClientSelection({ type, actionType }) {\n  const dispatch = useDispatch();\n\n  const { companyList } = useSelector(selectCompanyList);\n\n  const { companyDetails } = useSelector(selectDocument);\n\n  const handleSelectChange = async (e, value, reason, type) => {\n    e.preventDefault();\n    if (reason !== \"removeOption\" && reason !== \"clear\" && value) {\n      if (type === \"company\") {\n        // redux company id\n        dispatch(setCompanyIdSelected(value.id));\n\n        // redux company object\n        dispatch(setCompanyDetails(value));\n\n        // reset client selection\n        dispatch(setClientDocumentIdSelected(undefined));\n        dispatch(setClientDocumentObjectSelected(null));\n\n        dispatch(setReportDocType(\"\"));\n\n        // retrieve all clients associated with the selected company\n        // await initializeClientList(value.id);\n      }\n    } else if (reason === \"removeOption\" || reason === \"clear\") {\n      if (type === \"company\") {\n        // reset company id\n        dispatch(setCompanyIdSelected(undefined));\n\n        // reset company details\n        dispatch(setCompanyDetails(null));\n\n        // reset client selection\n        dispatch(setClientDocumentIdSelected(undefined));\n        dispatch(setClientDocumentObjectSelected(null));\n\n        dispatch(setReportDocType(\"\"));\n      }\n    }\n  };\n\n  return (\n    <>\n      <Grid item xs={12} md={12}>\n        <Autocomplete\n          ListboxProps={{ style: { maxHeight: \"70vh\" } }}\n          size=\"small\"\n          label=\"Please choose a company\"\n          id=\"company-drop-down\"\n          options={companyList || []}\n          value={companyDetails || null}\n          sx={{ width: 300 }}\n          renderInput={(params) => (\n            <TextField\n              {...params}\n              label=\"Please choose a company\"\n              InputLabelProps={{ required: true }}\n            />\n          )}\n          required\n          onChange={(e, value, reason) =>\n            handleSelectChange(e, value, reason, \"company\")\n          }\n          getOptionLabel={(option) => option?.name || \"\"}\n          disabled={type === \"report\" && !actionType}\n        />\n      </Grid>\n    </>\n  );\n}\n\nexport default memo(CompanyClientSelection);\n"],"sourceRoot":""}