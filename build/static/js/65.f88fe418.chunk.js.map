{"version":3,"sources":["components/document/DocumentSaveButton.js"],"names":["DocumentSaveButton","originalDocParticulars","documentDetails","savedDescriptions","us_s_quotationNumber","us_s_purchaseOrderNumber","set_us_showViewDocument","refreshTable","fetchDescription","displayDiscountColumns","partialPaymentAmount","user","useAuth","enqueueSnackbar","useSnackbar","dispatch","useDispatch","useSelector","selectDocument","documentType","companyIdSelected","companyDetails","clientDocumentObjectSelected","docCustomIdNumber","docBillTo","docShipTo","docDate","docParticulars","docSubTotal","docVatFee","docTotal","docTermsAndCondition","docBLNumber","docSupplier","docContainerNumber","docPackages","docDescription","docGrossWeight","docVolume","docPortOfLoading","docETA","docVesselName","docRoE","docPlaceOfLanding","transactionType","personType","invoiceTypeDesc","invoiceRefIdentifier","downPayment","downPaymentInvoiceNumber","discountTotalAmount","discountedTotalAmount","docSalesTransaction","docReasonStated","docTotalTaxableWithoutVatParticulars","docTotalTaxableVatOnlyParticulars","docTotalTaxableParticulars","docTotalZeroRatedParticulars","docTotalExemptParticulars","docTotalDisbursementParticulars","docTotalExemptBodiesParticulars","docDisbursementParticularsData","invJobRef","invStorageFee","invScanningFee","invGatePassFee","invVehicleNo","transportFees","transportDesc","invApplyVat","docShipper","docMarkNos","docCommodity","docHbl","docDepot","a","setLoading","checkIfCustomDocumentIdPresentInDB","id","isPresentInDB","error","message","variant","performSaveTransaction","documentNumber","documentNumberDocString","documentDocRef","db","collection","doc","runTransaction","transaction","get","then","sfDoc","exists","update","documentIndex","newDocumentNumber","Number","data","formatDocumentIdNumber","catch","err","issuedFirebaseDateTimeIssued","Date","keywords","invoiceCounterResult","incrementEBSGlobalInvoiceCounter","customTransportDocParticularsToSave","documentTemplate","newInvParticulars","length","forEach","particular","customDetail","uniqueValueList","valueList","Set","sort","push","add","orderNum","title","selectedValue","isChecked","amount","merge","allDescriptionString","map","rowDescription","description","find","desc","text","particularSplit","split","newParticularSplit","toLowerCase","toString","documentData","ebsGlobalInvoiceCounterReached","docString","docTitle","docType","clientId","firebase","firestore","Timestamp","fromDate","docDateTimeCreated","FieldValue","serverTimestamp","docIssuedDateTime","paymentStatus","docRemainingPaymentAmt","attachedPaymentNumber","docQuoteNumber","docPurchaseOrderNumber","createdByUserId","createdByUserEmail","email","createdByUserTime","process","REACT_APP_CUSTOM_SMART_PROMOTE_ID","row","inventoryItemData","totalQty","qtyRemaining","qtySold","rowQty","remainingQty","newTotalQtySold","allInventoryItemTransactions","vatAmount","rowDiscountedAmount","rowAmount","actualRemainingStockAmount","itemQtySold","itemId","rowDiscountAmount","rowAmountWithVAT","rowUnitPrice","newTotalAmountReceivedWithoutVAT","totalAmountReceivedWithoutVAT","newTotalAmountReceivedWithVAT","totalAmountReceivedWithVAT","set","toFixed","applyPayment","showViewButton","invoiceSelected","paymentType","Promise","resolve","paymentCounterDocRef","paymentCounter","result","executePayment","paymentNumberDoc","remainingAmount","paymentAmount","batch","paymentdocRefId","paymentDocRef","invoiceDocRef","invoiceList","invoiceId","paymentDate","moment","format","dateCreated","paymentNumber","paymentNumberString","paymentRemainingAmount","commit","color","onClick","saveDocument","fullWidth","disabled"],"mappings":"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","file":"static/js/65.f88fe418.chunk.js","sourcesContent":["import { Button } from \"@mui/material\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setLoading } from \"../../features/globalSlice\";\nimport { selectDocument } from \"../../features/documentSlice\";\nimport {\n  checkIfCustomDocumentIdPresentInDB,\n  formatDocumentIdNumber,\n  incrementEBSGlobalInvoiceCounter,\n} from \"../core-functions/SelectionCoreFunctions\";\nimport { useSnackbar } from \"notistack\";\nimport db from \"../../firebase\";\nimport firebase from \"firebase/compat\";\nimport useAuth from \"../../hooks/useAuth\";\nimport moment from \"moment\";\n\nexport default function DocumentSaveButton({\n  originalDocParticulars,\n  documentDetails,\n  savedDescriptions,\n  us_s_quotationNumber,\n  us_s_purchaseOrderNumber,\n  set_us_showViewDocument,\n  refreshTable,\n  fetchDescription,\n  displayDiscountColumns,\n  partialPaymentAmount,\n}) {\n  const { user } = useAuth();\n\n  const { enqueueSnackbar } = useSnackbar();\n\n  const dispatch = useDispatch();\n\n  const {\n    documentType,\n    companyIdSelected,\n    companyDetails,\n    clientDocumentObjectSelected,\n  } = useSelector(selectDocument);\n\n  const {\n    docCustomIdNumber,\n    docBillTo,\n    docShipTo,\n    docDate,\n    docParticulars,\n    docSubTotal,\n    docVatFee,\n    docTotal,\n    docTermsAndCondition,\n\n    //custom details\n    docBLNumber,\n    docSupplier,\n    docContainerNumber,\n    docPackages,\n    docDescription,\n    docGrossWeight,\n    docVolume,\n    docPortOfLoading,\n    docETA,\n    docVesselName,\n    docRoE,\n    docPlaceOfLanding,\n\n    // MRA customs\n    transactionType,\n    personType,\n    invoiceTypeDesc,\n    invoiceRefIdentifier,\n    downPayment,\n    downPaymentInvoiceNumber,\n    discountTotalAmount,\n    discountedTotalAmount,\n    docSalesTransaction,\n    docReasonStated,\n\n    // Fadil customs\n    docTotalTaxableWithoutVatParticulars,\n    docTotalTaxableVatOnlyParticulars,\n    docTotalTaxableParticulars,\n    docTotalZeroRatedParticulars,\n    docTotalExemptParticulars,\n    docTotalDisbursementParticulars,\n    docTotalExemptBodiesParticulars,\n    docDisbursementParticularsData,\n\n    invJobRef,\n    invStorageFee,\n    invScanningFee,\n    invGatePassFee,\n    invVehicleNo,\n    transportFees,\n    transportDesc,\n    invApplyVat,\n\n    // flexitrans customs\n    docShipper,\n    docMarkNos,\n    docCommodity,\n    docHbl,\n    docDepot,\n  } = documentDetails;\n\n  async function saveDocument() {\n    dispatch(setLoading(true));\n\n    if (docCustomIdNumber) {\n      let isPresentInDB = await checkIfCustomDocumentIdPresentInDB(\n        docCustomIdNumber,\n        companyIdSelected,\n        documentType?.id\n      );\n\n      if (isPresentInDB?.error) {\n        enqueueSnackbar(isPresentInDB?.message, { variant: \"error\" });\n      } else {\n        dispatch(setLoading(true));\n\n        performSaveTransaction(\n          isPresentInDB?.documentNumber,\n          isPresentInDB?.documentNumberDocString\n        );\n      }\n    } else {\n      var documentDocRef = db\n        .collection(\"company\")\n        .doc(companyIdSelected)\n        .collection(documentType?.id)\n        .doc(\"documentIndex\");\n\n      db.runTransaction((transaction) => {\n        return transaction.get(documentDocRef).then((sfDoc) => {\n          if (!sfDoc.exists) {\n            // throw \"Document does not exist!\";\n            transaction.update(documentDocRef, {\n              documentIndex: 1,\n            });\n            return 1;\n          }\n\n          var newDocumentNumber = Number(sfDoc.data().documentIndex) + 1;\n          transaction.update(documentDocRef, {\n            documentIndex: newDocumentNumber,\n          });\n          return newDocumentNumber;\n        });\n      })\n        .then(async (documentNumber) => {\n          let documentNumberDocString = await formatDocumentIdNumber(\n            documentNumber\n          );\n\n          if (documentNumberDocString) {\n            performSaveTransaction(documentNumber, documentNumberDocString);\n          }\n        })\n        .catch((err) => {\n          enqueueSnackbar(\n            `Error occured while overall Invoice saving transactions: ${err?.message}`,\n            { variant: \"error\" }\n          );\n          dispatch(setLoading(false));\n        });\n    }\n  }\n\n  async function performSaveTransaction(\n    documentNumber,\n    documentNumberDocString\n  ) {\n    // define isused date time\n    const issuedFirebaseDateTimeIssued = new Date();\n\n    let keywords = [];\n\n    let invoiceCounterResult = \"\";\n\n    if (documentType?.id !== \"quotation\") {\n      invoiceCounterResult = await incrementEBSGlobalInvoiceCounter(\n        companyIdSelected\n      );\n    }\n\n    let customTransportDocParticularsToSave = [];\n    if (companyDetails?.data?.documentTemplate === \"transport\") {\n      // check for new customDetail -> save as new doc in db if present\n      let newInvParticulars = [];\n      if (docParticulars?.length > 0) {\n        docParticulars.forEach(async (particular) => {\n          if (particular?.customDetail !== \"\") {\n            let uniqueValueList = [\n              ...particular?.valueList,\n              particular?.customDetail,\n            ];\n            uniqueValueList = [...new Set(uniqueValueList)];\n            uniqueValueList.sort();\n\n            // save customDetail\n            newInvParticulars.push({\n              ...particular,\n              valueList: uniqueValueList,\n            });\n\n            customTransportDocParticularsToSave.push({\n              ...particular,\n              valueList: [],\n            });\n          } else {\n            newInvParticulars.push({ ...particular });\n\n            customTransportDocParticularsToSave.push({\n              ...particular,\n              valueList: [],\n            });\n          }\n        });\n      }\n\n      // check if company has collection particulars\n      if (originalDocParticulars?.length === 0) {\n        if (newInvParticulars?.length > 0) {\n          newInvParticulars.forEach(async (particular) => {\n            let uniqueValueList = [];\n            if (particular?.valueList && particular?.valueList?.length > 0) {\n              uniqueValueList = [...new Set(particular?.valueList)];\n              uniqueValueList.sort();\n            }\n\n            await db\n              .collection(\"company\")\n              .doc(companyIdSelected)\n              .collection(\"particulars\")\n              .add({\n                orderNum: particular?.orderNum || \"\",\n                title: particular?.title || \"\",\n                customDetail: particular?.customDetail || \"\",\n                selectedValue: particular?.selectedValue || \"\",\n                valueList: uniqueValueList,\n                isChecked: particular?.isChecked || false,\n                amount: particular?.amount || \"\",\n              });\n          });\n        }\n      } else {\n        // update entire particulars list\n        if (newInvParticulars?.length > 0) {\n          newInvParticulars.forEach(async (particular) => {\n            if (particular?.id && particular?.id !== \"\") {\n              let uniqueValueList = [];\n              if (particular?.valueList && particular?.valueList?.length > 0) {\n                uniqueValueList = [...new Set(particular?.valueList)];\n                uniqueValueList.sort();\n              }\n\n              await db\n                .collection(\"company\")\n                .doc(companyIdSelected)\n                .collection(\"particulars\")\n                .doc(particular?.id)\n                .update(\n                  {\n                    ...particular,\n                    valueList: uniqueValueList,\n                  },\n                  { merge: true }\n                );\n            }\n          });\n        }\n      }\n\n      // await db\n      //   .collection(\"company\")\n      //   .doc(companyIdSelected)\n      //   .collection(\"particulars\")\n      //   .get()\n      //   .then(async (queryDocs) => {\n      //     // save all particulars if no particulars present\n      //     if (queryDocs?.docs?.length === 0) {\n      //       if (newInvParticulars?.length > 0) {\n      //         newInvParticulars.forEach(async (particular) => {\n      //           let uniqueValueList = [];\n      //           if (\n      //             particular?.valueList &&\n      //             particular?.valueList?.length > 0\n      //           ) {\n      //             uniqueValueList = [...new Set(particular?.valueList)];\n      //             uniqueValueList.sort();\n      //           }\n\n      //           await db\n      //             .collection(\"company\")\n      //             .doc(companyIdSelected)\n      //             .collection(\"particulars\")\n      //             .add({\n      //               orderNum: particular?.orderNum || \"\",\n      //               title: particular?.title || \"\",\n      //               customDetail: particular?.customDetail || \"\",\n      //               selectedValue: particular?.selectedValue || \"\",\n      //               valueList: uniqueValueList,\n      //               isChecked: particular?.isChecked || false,\n      //               amount: particular?.amount || \"\",\n      //             });\n      //         });\n      //       }\n      //     } else {\n      //       // update entire particulars list\n      //       if (newInvParticulars?.length > 0) {\n      //         newInvParticulars.forEach(async (particular) => {\n      //           if (particular?.id && particular?.id !== \"\") {\n      //             let uniqueValueList = [];\n      //             if (\n      //               particular?.valueList &&\n      //               particular?.valueList?.length > 0\n      //             ) {\n      //               uniqueValueList = [...new Set(particular?.valueList)];\n      //               uniqueValueList.sort();\n      //             }\n\n      //             await db\n      //               .collection(\"company\")\n      //               .doc(companyIdSelected)\n      //               .collection(\"particulars\")\n      //               .doc(particular?.id)\n      //               .update(\n      //                 {\n      //                   ...particular,\n      //                   valueList: uniqueValueList,\n      //                 },\n      //                 { merge: true }\n      //               );\n      //           }\n      //         });\n      //       }\n      //     }\n      //   });\n    } else if (companyDetails?.data?.documentTemplate !== \"transport\") {\n      // save descriptions\n      // get all descriptions\n      let allDescriptionString = \"\";\n      let allDescriptions = docParticulars.map(\n        (particular) => particular?.rowDescription || \"\"\n      );\n\n      allDescriptions.forEach(async (description) => {\n        if (description && description !== \"\") {\n          allDescriptionString = allDescriptionString + \" \" + description;\n\n          if (\n            !savedDescriptions?.find(\n              (desc) => desc?.description === description\n            )\n          ) {\n            await db\n              .collection(\"company\")\n              .doc(companyIdSelected)\n              .collection(\"saved_descriptions\")\n              .add({\n                text: description,\n              });\n          }\n        }\n      });\n\n      if (allDescriptionString) {\n        const particularSplit = allDescriptionString.split(\" \");\n\n        let newParticularSplit = [];\n        particularSplit.forEach((particular) => {\n          newParticularSplit.push(particular.toLowerCase());\n        });\n\n        keywords = [\n          ...newParticularSplit,\n          documentNumber.toString(),\n          documentNumberDocString,\n        ];\n      }\n\n      keywords = [...new Set(keywords)];\n    }\n\n    let documentData = {\n      ebsGlobalInvoiceCounterReached:\n        documentType?.id === \"quotation\" ? null : invoiceCounterResult,\n      id: documentNumber.toString(),\n      docString: documentNumberDocString,\n      docCustomIdNumber: docCustomIdNumber,\n      docTitle: documentType?.title,\n      docType: documentType?.id,\n      clientId: clientDocumentObjectSelected?.id,\n      docDate: firebase.firestore.Timestamp.fromDate(new Date(docDate)),\n      docDateTimeCreated: firebase.firestore.FieldValue.serverTimestamp(),\n      docIssuedDateTime: issuedFirebaseDateTimeIssued,\n      docParticulars:\n        companyDetails?.data?.documentTemplate === \"transport\"\n          ? customTransportDocParticularsToSave\n          : docParticulars,\n      docSubTotal: docSubTotal,\n      docVatFee: docVatFee,\n      docTotal: docTotal,\n      docShipTo: docShipTo,\n      docBillTo: docBillTo,\n      docTermsAndCondition: docTermsAndCondition || \"\",\n      // used in payment section\n      paymentStatus: \"Unpaid\",\n      docRemainingPaymentAmt: docTotal,\n      attachedPaymentNumber: [],\n      docQuoteNumber: us_s_quotationNumber || \"\",\n      docPurchaseOrderNumber: us_s_purchaseOrderNumber || \"\",\n      keywords: keywords,\n\n      // MRA customs\n      transactionType: transactionType || null,\n      personType: personType || null,\n      invoiceTypeDesc: invoiceTypeDesc || null,\n      invoiceRefIdentifier: invoiceRefIdentifier || \"\",\n      downPayment: downPayment || 0,\n      downPaymentInvoiceNumber: downPaymentInvoiceNumber || \"\",\n      discountTotalAmount: discountTotalAmount || 0,\n      discountedTotalAmount: discountedTotalAmount || 0,\n      docSalesTransaction: docSalesTransaction || null,\n      docReasonStated: docReasonStated || \"\",\n\n      displayDiscountColumns: displayDiscountColumns || false,\n\n      createdByUserId: user?.id || \"\",\n      createdByUserEmail: user?.email || \"\",\n      createdByUserTime: new Date(),\n    };\n\n    if (companyDetails?.data?.documentTemplate === \"transport\") {\n      documentData = {\n        ...documentData,\n        // transport template\n        invJobRef: invJobRef || \"\",\n        invStorageFee: invStorageFee || \"\",\n        invScanningFee: invScanningFee || \"\",\n        invGatePassFee: invGatePassFee || \"\",\n        invVehicleNo: invVehicleNo || \"\",\n        transportFees: transportFees || \"\",\n        transportDesc: transportDesc || \"\",\n        invApplyVat: invApplyVat || false,\n      };\n    } else if (companyDetails?.data?.documentTemplate === \"flexitrans\") {\n      documentData = {\n        ...documentData,\n        //custom details\n        docBLNumber: docBLNumber || \"\",\n        docSupplier: docSupplier || \"\",\n        docContainerNumber: docContainerNumber || \"\",\n        docPackages: docPackages || \"\",\n        docDescription: docDescription || \"\",\n        docGrossWeight: docGrossWeight || \"\",\n        docVolume: docVolume || \"\",\n        docPortOfLoading: docPortOfLoading || \"\",\n        docETA: docETA || \"\",\n        docVesselName: docVesselName || \"\",\n        docRoE: docRoE || \"\",\n        docPlaceOfLanding: docPlaceOfLanding || \"\",\n\n        //Fadil customs\n        docTotalTaxableWithoutVatParticulars:\n          docTotalTaxableWithoutVatParticulars || \"\",\n        docTotalTaxableVatOnlyParticulars:\n          docTotalTaxableVatOnlyParticulars || \"\",\n        docTotalTaxableParticulars: docTotalTaxableParticulars || \"\",\n        docTotalZeroRatedParticulars: docTotalZeroRatedParticulars || \"\",\n        docTotalExemptParticulars: docTotalExemptParticulars || \"\",\n        docTotalDisbursementParticulars: docTotalDisbursementParticulars || \"\",\n        docTotalExemptBodiesParticulars: docTotalExemptBodiesParticulars || \"\",\n        docDisbursementParticularsData: docDisbursementParticularsData || [],\n\n        // flexitrans customs\n        docShipper: docShipper || \"\",\n        docMarkNos: docMarkNos || \"\",\n        docCommodity: docCommodity || \"\",\n        docHbl: docHbl || \"\",\n        docDepot: docDepot || \"\",\n      };\n    } else if (\n      companyDetails?.id === process.env.REACT_APP_CUSTOM_SMART_PROMOTE_ID &&\n      (documentData?.docType === \"proforma\" ||\n        documentData?.docType === \"invoice\" ||\n        documentData?.docType === \"vat_invoice\" ||\n        documentData?.docType === \"cash_transaction\")\n    ) {\n      // update stock\n      let docParticulars = [...(documentData?.docParticulars || [])];\n      docParticulars.forEach(async (row) => {\n        if (row?.inventoryItemData) {\n          // update qty sold and quantity remaining\n\n          // get latest stock remaining amount\n          await db\n            .collection(\"company\")\n            .doc(companyDetails?.id)\n            .collection(\"inventory\")\n            .doc(row?.inventoryItemData?.id)\n            .get()\n            .then(async (doc) => {\n              if (doc.exists) {\n                let totalQty = Number(doc?.data()?.qtyRemaining || 0);\n                let qtySold = Number(row?.rowQty || 0);\n                let remainingQty = totalQty - qtySold;\n\n                let newTotalQtySold =\n                  qtySold + Number(doc?.data()?.qtySold || 0);\n\n                let allInventoryItemTransactions = [\n                  ...(doc?.data()?.allInventoryItemTransactions || []),\n                ];\n\n                let vatAmount = 0;\n                if (invApplyVat) {\n                  vatAmount =\n                    Number(row?.rowDiscountedAmount || row?.rowAmount || 0) *\n                    1.15;\n                }\n\n                allInventoryItemTransactions.push({\n                  documentNumber: documentData?.id,\n                  docString: documentData?.docString,\n                  docCustomIdNumber: documentData?.docCustomIdNumber,\n                  docTitle: documentData?.docTitle,\n                  docType: documentData?.docType,\n                  docDate: new Date(),\n                  actualRemainingStockAmount: totalQty,\n                  itemQtySold: qtySold,\n                  itemId: row?.inventoryItemData?.id,\n                  rowAmount: row?.rowAmount || 0,\n                  rowDiscountAmount: row?.rowDiscountAmount || 0,\n                  rowDiscountedAmount: row?.rowDiscountedAmount || 0,\n                  rowAmountWithVAT: vatAmount,\n                  rowUnitPrice: row?.rowUnitPrice || 0,\n                });\n\n                let newTotalAmountReceivedWithoutVAT =\n                  Number(doc?.data()?.totalAmountReceivedWithoutVAT || 0) +\n                  Number(row?.rowDiscountedAmount || row?.rowAmount || 0);\n\n                let newTotalAmountReceivedWithVAT =\n                  Number(doc?.data()?.totalAmountReceivedWithVAT || 0) +\n                  vatAmount;\n\n                await db\n                  .collection(\"company\")\n                  .doc(companyDetails?.id)\n                  .collection(\"inventory\")\n                  .doc(row?.inventoryItemData?.id)\n                  .set(\n                    {\n                      totalAmountReceivedWithoutVAT: Number(\n                        newTotalAmountReceivedWithoutVAT || 0\n                      ).toFixed(2),\n                      totalAmountReceivedWithVAT: Number(\n                        newTotalAmountReceivedWithVAT || 0\n                      ).toFixed(2),\n                      qtySold: newTotalQtySold || 0,\n                      qtyRemaining: remainingQty || 0,\n                      allInventoryItemTransactions:\n                        allInventoryItemTransactions || [],\n                    },\n                    { merge: true }\n                  )\n                  .then(async () => {\n                    enqueueSnackbar(\"Stock updated successfully\");\n                  })\n                  .catch((error) => {\n                    enqueueSnackbar(\n                      `Error occured while updating quantity of inventory item: ${error?.message}`,\n                      { variant: \"error\" }\n                    );\n                  });\n              } else {\n                enqueueSnackbar(\n                  \"Stock could not be updated as item could not be found, please check inventory\",\n                  { variant: \"error\" }\n                );\n              }\n            });\n        }\n      });\n    }\n\n    // save document\n    await db\n      .collection(\"company\")\n      .doc(companyIdSelected)\n      .collection(documentType?.id)\n      .doc(documentNumberDocString.toString())\n      .set(\n        {\n          ...documentData,\n        },\n        { merge: true }\n      )\n      .then(async () => {\n        /**\n         * custom requirement for Smart Promote\n         * make full payment automatically after following documents has been saved\n         * vat invoice\n         * invoice\n         * cash transaction\n         *  */\n        if (\n          (documentType?.id === \"vat_invoice\" ||\n            documentType?.id === \"invoice\" ||\n            documentType?.id === \"cash_transaction\") &&\n          companyIdSelected === process.env.REACT_APP_CUSTOM_SMART_PROMOTE_ID\n        ) {\n          await applyPayment(\n            {\n              id: documentNumberDocString.toString(),\n              data: { ...documentData },\n            },\n            \"FULL\"\n          );\n        } else if (\n          /**\n           * custom requirement for Smart Promote\n           * make partial payment if field partial payment has been filled\n           * applicable only for Proforma\n           */\n          documentType?.id === \"proforma\" &&\n          companyIdSelected === process.env.REACT_APP_CUSTOM_SMART_PROMOTE_ID &&\n          Number(partialPaymentAmount) > 0\n        ) {\n          await applyPayment(\n            {\n              id: documentNumberDocString.toString(),\n              data: { ...documentData },\n            },\n            \"PARTIAL\"\n          );\n        }\n\n        dispatch(setLoading(true));\n\n        set_us_showViewDocument({\n          showViewButton: true,\n        });\n\n        // reset table\n        refreshTable();\n\n        enqueueSnackbar(`${documentType?.title} saved successfully`);\n\n        if (companyDetails?.data?.documentTemplate !== \"transport\") {\n          fetchDescription();\n        }\n\n        dispatch(setLoading(false));\n      })\n      .catch((err) => {\n        enqueueSnackbar(\n          `Error occured while saving document: ${err?.message}`,\n          {\n            variant: \"error\",\n          }\n        );\n        dispatch(setLoading(false));\n      });\n  }\n\n  async function applyPayment(invoiceSelected, paymentType) {\n    return await new Promise((resolve) => {\n      dispatch(setLoading(true));\n      // create a payment doc using transaction to check if paymentCounter exists\n      // Create a reference to the SF doc.\n      var paymentCounterDocRef = db\n        .collection(\"company\")\n        .doc(companyIdSelected)\n        .collection(\"payment\")\n        .doc(\"paymentCounter\");\n\n      db.runTransaction(async (transaction) => {\n        return transaction.get(paymentCounterDocRef).then((sfDoc) => {\n          if (!sfDoc.exists) {\n            return null;\n          }\n\n          var newPaymentCounter = Number(sfDoc.data().paymentCounter || 0) + 1;\n          return newPaymentCounter;\n        });\n      })\n        .then(async (result) => {\n          if (result === null) {\n            await db\n              .collection(\"company\")\n              .doc(companyIdSelected)\n              .collection(\"payment\")\n              .doc(\"paymentCounter\")\n              .set({ paymentCounter: 1 })\n              .then(async () => {\n                let paymentResult = await executePayment(\n                  1,\n                  invoiceSelected,\n                  paymentType\n                );\n                if (paymentResult) {\n                  resolve(true);\n                }\n              })\n              .catch((err) => {\n                enqueueSnackbar(\n                  `Error occured while creating payment counter: ${err?.message}`,\n                  { variant: \"error\" }\n                );\n                dispatch(setLoading(false));\n              });\n          } else if (result && Number(result) > 0) {\n            let paymentResult = await executePayment(\n              result,\n              invoiceSelected,\n              paymentType\n            );\n\n            if (paymentResult) {\n              resolve(true);\n            }\n          }\n        })\n        .catch((err) => {\n          enqueueSnackbar(\n            `Error occured while executing payment transaction: ${err?.message}`,\n            { variant: \"error\" }\n          );\n          dispatch(setLoading(false));\n          resolve(true);\n        });\n    });\n  }\n\n  async function executePayment(result, invoiceSelected, paymentType) {\n    return await new Promise((resolve) => {\n      let paymentNumberDoc = result.toString();\n      if (paymentNumberDoc?.length === 1) {\n        paymentNumberDoc = `0000${paymentNumberDoc}`;\n      } else if (paymentNumberDoc?.length === 2) {\n        paymentNumberDoc = `000${paymentNumberDoc}`;\n      } else if (paymentNumberDoc?.length === 3) {\n        paymentNumberDoc = `00${paymentNumberDoc}`;\n      } else if (paymentNumberDoc?.length === 4) {\n        paymentNumberDoc = `0${paymentNumberDoc}`;\n      }\n\n      let remainingAmount = 0;\n      let paymentAmount = 0;\n      let paymentStatus = \"\";\n\n      if (paymentType === \"FULL\") {\n        remainingAmount = 0;\n        paymentAmount = invoiceSelected?.data?.docTotal;\n        paymentStatus = \"Paid\";\n      } else if (paymentType === \"PARTIAL\") {\n        paymentAmount = Number(partialPaymentAmount || 0);\n\n        if (Number(invoiceSelected?.data?.docRemainingPaymentAmt || 0) > 0) {\n          remainingAmount =\n            Number(invoiceSelected?.data?.docRemainingPaymentAmt || 0) -\n            Number(partialPaymentAmount);\n        } else {\n          remainingAmount =\n            Number(invoiceSelected?.data?.docTotal || 0) -\n            Number(partialPaymentAmount);\n        }\n\n        if (remainingAmount === Number(invoiceSelected?.data?.docTotal || 0)) {\n          paymentStatus = \"Unpaid\";\n        } else if (\n          remainingAmount !== 0 &&\n          remainingAmount < Number(invoiceSelected?.data?.docTotal || 0)\n        ) {\n          paymentStatus = \"Partially paid\";\n        } else if (remainingAmount < 0) {\n          paymentStatus = \"Over paid\";\n        } else if (remainingAmount === 0) {\n          paymentStatus = \"Paid\";\n        }\n      }\n\n      // Get a new write batch\n      var batch = db.batch();\n\n      // store payment made\n      const paymentdocRefId = result.toString();\n\n      var paymentCounterDocRef = db\n        .collection(\"company\")\n        .doc(companyDetails.id)\n        .collection(\"payment\")\n        .doc(\"paymentCounter\");\n\n      var paymentDocRef = db\n        .collection(\"company\")\n        .doc(companyDetails.id)\n        .collection(\"payment\")\n        .doc(paymentdocRefId);\n\n      var invoiceDocRef = db\n        .collection(\"company\")\n        .doc(companyDetails.id)\n        .collection(documentType?.id)\n        .doc(invoiceSelected.id);\n\n      // update payment counter\n      batch.set(\n        paymentCounterDocRef,\n        { paymentCounter: Number(result) },\n        { merge: true }\n      );\n\n      // add new payment doc\n      batch.set(\n        paymentDocRef,\n        {\n          invoiceList: [{ invoiceId: invoiceSelected?.id }],\n          paymentDate: moment(new Date()).format(\"DD-MM-YYYY\"),\n          dateCreated: firebase.firestore.Timestamp.fromDate(new Date()),\n        },\n        { merge: true }\n      );\n\n      batch.set(\n        invoiceDocRef,\n        {\n          paymentStatus: paymentStatus,\n          docRemainingPaymentAmt: remainingAmount,\n          attachedPaymentNumber: [\n            {\n              paymentNumber: paymentdocRefId,\n              paymentNumberString: paymentNumberDoc,\n              paymentType: \"\",\n              paymentAmount: paymentAmount,\n              paymentRemainingAmount: remainingAmount,\n              paymentDate: moment(new Date()).format(\"DD-MM-YYYY\"),\n            },\n          ],\n        },\n        { merge: true }\n      );\n\n      // Commit the batch\n      batch\n        .commit()\n        .then(async () => {\n          enqueueSnackbar(`${paymentType} payment applied successfully`);\n          dispatch(setLoading(false));\n          resolve(true);\n        })\n        .catch((error) => {\n          enqueueSnackbar(\n            `Error occured while making ${paymentType} payment: ${error?.message}`,\n            {\n              variant: \"error\",\n            }\n          );\n          dispatch(setLoading(false));\n          resolve(true);\n        });\n    });\n  }\n\n  return (\n    <>\n      <Button\n        variant={\"contained\"}\n        color={\"primary\"}\n        onClick={() => saveDocument()}\n        fullWidth\n        disabled={!documentDetails?.docTotal}\n      >\n        {`Save ${documentType?.title}`}\n      </Button>\n    </>\n  );\n}\n"],"sourceRoot":""}