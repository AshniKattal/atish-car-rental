{"version":3,"sources":["pages/dashboard/manage-company/UpdateCompanyDialog.js"],"names":["UpdateCompanyDialog","openDialog","handleCloseDialog","companyDetails","setCompanyDetails","initializeCompanies","id","name","vatPercentage","imageName","imageSig","imageUrl","sigUrl","stampName","stampUrl","companyType","vatOrNonVatRegistered","tan","address","email","contactNumber","mobileNumber","brn","beneficiaryName","bankName","bankAccNo","bankIban","bankSwiftCode","MRATemplateFlag","displayMRAFiscalisationButton","documentTemplate","enqueueSnackbar","useSnackbar","dispatch","useDispatch","user","useAuth","snackbar","useSelector","selectSnackbar","companyList","selectCompanyList","useState","uploadedFile","setUploadedFile","uploadedSigFile","setUploadedSigFile","uploadedStampSigFile","setUploadedStampSigFile","updateCompany","e","a","preventDefault","setLoading","setSnackbar","counter","message","variant","length","compNameLowerCaseWithNoSpace","replace","toLowerCase","fileUrl","storageRef","firebaseApp","storage","ref","fileRef","child","put","getDownloadURL","fileSigUrl","fileSigRef","fileStampUrl","imageObject","arr","forEach","comp","push","sort","dynamicSort","compDocRef","db","collection","doc","compDocBigArrayRef","batch","set","merge","companyIdArray","commit","then","getCompanies","a_comp","role","result","error","msg","setCompanyList","setCompanyIdSelected","undefined","setClientDocumentIdSelected","setClientDocumentObjectSelected","catch","err","onFileChange","type","target","files","file","fileType","includes","clearImage","style","width","maxWidth","fullWidth","open","onClose","size","margin","required","label","value","onChange","event","paddingTop","marginTop","native","placeholder","inputProps","color","display","flexDirection","alignItems","accept","padding","disabled","onClick","container","spacing","item","xs","sm","md","ListboxProps","maxHeight","options","title","renderInput","params","reason","getOptionLabel","option","JSON","parse","process"],"mappings":"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","file":"static/js/96.70c98d4f.chunk.js","sourcesContent":["import {\n  Autocomplete,\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  FormControl,\n  Grid,\n  Select,\n  TextField,\n  Typography,\n} from \"@mui/material\";\nimport { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport useAuth from \"../../../hooks/useAuth\";\nimport {\n  selectCompanyList,\n  setCompanyList,\n} from \"../../../features/companySlice\";\nimport { setLoading } from \"../../../features/globalSlice\";\nimport { selectSnackbar, setSnackbar } from \"../../../features/snackbarSlice\";\nimport db, { firebaseApp } from \"../../../firebase\";\nimport {\n  dynamicSort,\n  getCompanies,\n} from \"../../../components/core-functions/SelectionCoreFunctions\";\nimport { useSnackbar } from \"notistack\";\nimport {\n  setClientDocumentIdSelected,\n  setClientDocumentObjectSelected,\n  setCompanyIdSelected,\n} from \"../../../features/documentSlice\";\n\nfunction UpdateCompanyDialog({\n  openDialog,\n  handleCloseDialog,\n  companyDetails,\n  setCompanyDetails,\n  initializeCompanies,\n}) {\n  const {\n    id,\n    name,\n    vatPercentage,\n    imageName,\n    imageSig,\n    imageUrl,\n    sigUrl,\n    stampName,\n    stampUrl,\n    companyType,\n    // natureOfBusiness,\n    // incorDate,\n    // payeRegNo,\n    vatOrNonVatRegistered,\n    tan,\n    address,\n    // country,\n    email,\n    contactNumber,\n    mobileNumber,\n    brn,\n    // nic,\n    // absenceTariff,\n    beneficiaryName,\n    bankName,\n    bankAccNo,\n    bankIban,\n    bankSwiftCode,\n    MRATemplateFlag,\n    displayMRAFiscalisationButton,\n    documentTemplate,\n  } = companyDetails;\n\n  const { enqueueSnackbar } = useSnackbar();\n  const dispatch = useDispatch();\n  const { user } = useAuth();\n  const snackbar = useSelector(selectSnackbar);\n  const { companyList } = useSelector(selectCompanyList);\n\n  const [uploadedFile, setUploadedFile] = useState(\"\");\n  const [uploadedSigFile, setUploadedSigFile] = useState(\"\");\n  const [uploadedStampSigFile, setUploadedStampSigFile] = useState(\"\");\n\n  const updateCompany = async (e) => {\n    if (user?.id !== \"\") {\n      e.preventDefault();\n      dispatch(setLoading(true));\n      if (name === \"\" /*  || companyType === \"\" || payeRegNo === \"\" */) {\n        dispatch(\n          setSnackbar({\n            counter: snackbar.counter + 1,\n            message: \"Input with star cannot be blank\",\n            variant: \"error\",\n          })\n        );\n        dispatch(setLoading(false));\n      } else if (!vatOrNonVatRegistered) {\n        dispatch(\n          setSnackbar({\n            counter: snackbar.counter + 1,\n            message: \"Please define if company is VAT registered or not\",\n            variant: \"error\",\n          })\n        );\n        dispatch(setLoading(false));\n      } else if (\n        vatOrNonVatRegistered?.id === \"VATR\" &&\n        (!tan || (tan && tan?.length !== 8))\n      ) {\n        dispatch(\n          setSnackbar({\n            counter: snackbar.counter + 1,\n            message:\n              \"Please provide a Vat Registration Number and should be of 8 characters\",\n            variant: \"error\",\n          })\n        );\n        dispatch(setLoading(false));\n      } else {\n        let compNameLowerCaseWithNoSpace = companyDetails?.name.replace(\n          /\\s/g,\n          \"\"\n        );\n        compNameLowerCaseWithNoSpace =\n          compNameLowerCaseWithNoSpace.toLowerCase();\n        //upload image if present\n        let fileUrl = \"\";\n        if (uploadedFile !== \"\") {\n          const storageRef = firebaseApp.storage().ref();\n          const fileRef = storageRef.child(\n            `/photo/companyLogo/${compNameLowerCaseWithNoSpace}/f_png/${uploadedFile.name}`\n          );\n          await fileRef.put(uploadedFile);\n          fileUrl = await fileRef.getDownloadURL();\n        }\n\n        //upload signature img if present\n        let fileSigUrl = \"\";\n        if (uploadedSigFile !== \"\") {\n          const storageRef = firebaseApp.storage().ref();\n          const fileSigRef = storageRef.child(\n            `/photo/companySignature/${compNameLowerCaseWithNoSpace}/f_png/${uploadedSigFile.name}`\n          );\n          await fileSigRef.put(uploadedSigFile);\n          fileSigUrl = await fileSigRef.getDownloadURL();\n        }\n\n        //upload signature img if present\n        let fileStampUrl = \"\";\n        if (uploadedStampSigFile !== \"\") {\n          const storageRef = firebaseApp.storage().ref();\n          const fileSigRef = storageRef.child(\n            `/photo/companyStamp/${compNameLowerCaseWithNoSpace}/f_png/${uploadedStampSigFile.name}`\n          );\n          await fileSigRef.put(uploadedStampSigFile);\n          fileStampUrl = await fileSigRef.getDownloadURL();\n        }\n\n        // prepare images object\n        let imageObject = {};\n\n        // add image logo if logo has been uploaded\n        if (fileUrl !== \"\") {\n          imageObject = {\n            ...imageObject,\n            imageName: imageName,\n            imageUrl: fileUrl,\n          };\n        } else {\n          imageObject = {\n            ...imageObject,\n            imageName: imageName || \"\",\n            imageUrl: imageUrl || \"\",\n          };\n        }\n\n        // add image signature if logo has been uploaded\n        if (fileSigUrl !== \"\") {\n          imageObject = {\n            ...imageObject,\n            imageSig: imageSig,\n            sigUrl: fileSigUrl,\n          };\n        } else {\n          imageObject = {\n            ...imageObject,\n            imageSig: imageSig || \"\",\n            sigUrl: sigUrl || \"\",\n          };\n        }\n\n        // add image stamp if logo has been uploaded\n        if (fileStampUrl !== \"\") {\n          imageObject = {\n            ...imageObject,\n            stampName: stampName,\n            stampUrl: fileStampUrl,\n          };\n        } else {\n          imageObject = {\n            ...imageObject,\n            stampName: stampName || \"\",\n            stampUrl: stampUrl || \"\",\n          };\n        }\n\n        // check if name is the same\n        let arr = [];\n        companyList?.forEach((comp) => {\n          if (comp.id === id && comp.name !== name) {\n            arr.push({ ...comp, name: name });\n          } else {\n            arr.push(comp);\n          }\n        });\n\n        arr.sort(dynamicSort(\"name\"));\n\n        const compDocRef = db.collection(\"company\").doc(id);\n        const compDocBigArrayRef = db.collection(\"company\").doc(\"companyIds\");\n\n        var batch = db.batch();\n\n        batch.set(\n          compDocRef,\n          {\n            name: name || \"\",\n            vatPercentage: vatPercentage || 0,\n            /* imageName: imageName,\n            imageUrl: fileUrl,\n            imageSig: imageSig,\n            sigUrl: fileSigUrl,\n            stampName: stampName,\n            stampUrl: fileStampUrl, */\n            ...imageObject,\n            companyType: companyType || \"\",\n            vatOrNonVatRegistered: vatOrNonVatRegistered || null,\n            tan: tan || \"\",\n            address: address || \"\",\n            email: email || \"\",\n            contactNumber: contactNumber || \"\",\n            mobileNumber: mobileNumber || \"\",\n            brn: brn || \"\",\n            beneficiaryName: beneficiaryName || \"\",\n            bankName: bankName || \"\",\n            bankAccNo: bankAccNo || \"\",\n            bankIban: bankIban || \"\",\n            bankSwiftCode: bankSwiftCode || \"\",\n            MRATemplateFlag: MRATemplateFlag || null,\n            displayMRAFiscalisationButton:\n              displayMRAFiscalisationButton || false,\n            documentTemplate: documentTemplate || \"\",\n          },\n          { merge: true }\n        );\n\n        batch.set(compDocBigArrayRef, {\n          companyIdArray: arr,\n        });\n\n        batch\n          .commit()\n          .then(async () => {\n            const result = await getCompanies(\n              user?.id,\n              user?.a_comp,\n              user?.role\n            );\n\n            if (result.error) {\n              enqueueSnackbar(result.msg || \"\", { variant: result.variant });\n            } else {\n              dispatch(setCompanyList(result));\n            }\n\n            if (initializeCompanies) {\n              initializeCompanies();\n            }\n\n            // reset company id\n            dispatch(setCompanyIdSelected(undefined));\n\n            dispatch(setClientDocumentIdSelected(undefined));\n\n            dispatch(setClientDocumentObjectSelected(undefined));\n\n            enqueueSnackbar(\"Company successfully updated\", {\n              variant: \"success\",\n            });\n\n            handleCloseDialog();\n            dispatch(setLoading(false));\n          })\n          .catch((err) => {\n            enqueueSnackbar(\n              `Error occured while updating company: ${err?.message}`,\n              { variant: \"error\" }\n            );\n            dispatch(setLoading(false));\n          });\n      }\n    } else {\n      enqueueSnackbar(\n        \"Your session has been terminated due to greater than 30 minutes of inactivity. Please log in again.\",\n        {\n          variant: \"error\",\n        }\n      );\n      dispatch(setLoading(false));\n    }\n  };\n\n  const onFileChange = (e, type) => {\n    e.preventDefault();\n    if (e.target.files && e.target.files.length > 0) {\n      const file = e.target.files[0];\n      // let fileSize = Number(file.size) / 1000; //to get size in kb\n\n      //check for valid image type\n      const fileType = file[\"type\"];\n      const validImageTypes = [\"image/jpeg\", \"image/png\"];\n      if (!validImageTypes.includes(fileType)) {\n        // invalid file type\n        dispatch(\n          setSnackbar({\n            counter: snackbar.counter + 1,\n            message:\n              \"Sorry you should upload only images with type image/jpeg and image/png\",\n            variant: \"error\",\n          })\n        );\n      } /* else if (Math.round(fileSize) > 25) {\n        dispatch(\n          setSnackbar({\n            counter: snackbar.counter + 1,\n            message:\n              'Sorry the image you uploaded exceed 25 KB, size of image uploaded: ' + Math.round(fileSize) + ' KB',\n            variant: 'error',\n          })\n        );\n      } */ else {\n        if (type === \"logo\") {\n          /* let obj = Object.assign(file, {\n            preview: URL.createObjectURL(file),\n          }); */\n\n          setUploadedFile(file);\n          setCompanyDetails({\n            ...companyDetails,\n            imageName: file.name,\n          });\n        } else if (type === \"signature\") {\n          setUploadedSigFile(file);\n          setCompanyDetails({\n            ...companyDetails,\n            imageSig: file.name,\n          });\n        } else if (type === \"stamp\") {\n          setUploadedStampSigFile(file);\n          setCompanyDetails({\n            ...companyDetails,\n            stampName: file.name,\n          });\n        }\n      }\n    }\n  };\n\n  const clearImage = (type) => {\n    if (type === \"signature\") {\n      setUploadedSigFile(\"\");\n      setCompanyDetails({\n        ...companyDetails,\n        imageSig: \"\",\n        sigUrl: \"\",\n      });\n    } else if (type === \"logo\") {\n      setUploadedFile(\"\");\n      setCompanyDetails({\n        ...companyDetails,\n        imageName: \"\",\n        imageUrl: \"\",\n      });\n    } else if (type === \"stamp\") {\n      setUploadedStampSigFile(\"\");\n      setCompanyDetails({\n        ...companyDetails,\n        stampName: \"\",\n        stampUrl: \"\",\n      });\n    }\n  };\n\n  return (\n    <>\n      <Dialog\n        style={{ width: \"100%\" }}\n        maxWidth=\"lg\"\n        fullWidth\n        open={openDialog}\n        onClose={handleCloseDialog}\n      >\n        <DialogTitle id=\"alert-dialog-title\">Update company</DialogTitle>\n        <DialogContent>\n          <TextField\n            size=\"small\"\n            variant=\"outlined\"\n            margin=\"normal\"\n            required\n            fullWidth\n            name=\"name\"\n            label=\"Name\"\n            type=\"text\"\n            id=\"name\"\n            value={name || \"\"}\n            onChange={(event) => {\n              setCompanyDetails({\n                ...companyDetails,\n                name: event.target.value,\n              });\n            }}\n          />\n\n          <TextField\n            variant=\"outlined\"\n            margin=\"normal\"\n            fullWidth\n            name=\"vatPercentage\"\n            label=\"VAT Percentahe\"\n            type=\"number\"\n            id=\"vatPercentage\"\n            size=\"small\"\n            value={vatPercentage || 0}\n            onChange={(event) => {\n              setCompanyDetails({\n                ...companyDetails,\n                vatPercentage: event.target.value,\n              });\n            }}\n          />\n\n          <div style={{ paddingTop: \"1rem\" }}></div>\n\n          <FormControl\n            size=\"small\"\n            variant=\"outlined\"\n            fullWidth\n            style={{ marginTop: \"1em\" }}\n          >\n            <Select\n              size=\"small\"\n              native\n              //label=\"Company Type\"\n              placeholder=\"Please choose a company type\"\n              value={companyType || \"\"}\n              required\n              onChange={(event) => {\n                setCompanyDetails({\n                  ...companyDetails,\n                  companyType: event.target.value,\n                });\n              }}\n              inputProps={{\n                name: \"companyType\",\n                id: \"companyType\",\n              }}\n            >\n              <option value=\"\">Please choose a Company Type *</option>\n              <option value=\"Individual\">Individual</option>\n              <option value=\"Company\">Company</option>\n              <option value=\"Other\">Other</option>\n            </Select>\n          </FormControl>\n          <div style={{ paddingTop: \"1rem\" }}></div>\n          <Typography>\n            Upload Image Logo{\" \"}\n            <span style={{ color: \"red\" }}>(Max Size of 25 KB)</span>:{\" \"}\n            {imageName}\n          </Typography>\n          <div\n            style={{\n              display: \"flex\",\n              flexDirection: \"row\",\n              alignItems: \"center\",\n            }}\n          >\n            <TextField\n              variant=\"outlined\"\n              size=\"small\"\n              fullWidth\n              name=\"image\"\n              type=\"file\"\n              id=\"image\"\n              accept=\".png,.jpeg\"\n              onChange={(event) => onFileChange(event, \"logo\")}\n            />\n            <div style={{ padding: \"1em\" }}></div>\n            <Button\n              color=\"primary\"\n              variant=\"contained\"\n              disabled={imageName !== \"\" ? false : true}\n              onClick={() => clearImage(\"logo\")}\n            >\n              Clear\n            </Button>\n          </div>\n\n          <div style={{ paddingTop: \"1rem\" }}></div>\n          <Typography>\n            Upload Signature Image{\" \"}\n            <span style={{ color: \"red\" }}>(Max Size of 25 KB)</span>:{\" \"}\n            {imageSig}\n          </Typography>\n          <div\n            style={{\n              display: \"flex\",\n              flexDirection: \"row\",\n              alignItems: \"center\",\n            }}\n          >\n            <TextField\n              variant=\"outlined\"\n              size=\"small\"\n              fullWidth\n              name=\"imageSig\"\n              type=\"file\"\n              id=\"imageSig\"\n              accept=\".png,.jpeg\"\n              onChange={(event) => onFileChange(event, \"signature\")}\n            />\n            <div style={{ padding: \"1em\" }}></div>\n            <Button\n              color=\"primary\"\n              variant=\"contained\"\n              disabled={imageSig !== \"\" ? false : true}\n              onClick={() => clearImage(\"signature\")}\n            >\n              Clear\n            </Button>\n          </div>\n\n          <div style={{ paddingTop: \"1rem\" }}></div>\n          <Typography>\n            Upload Stamp Image{\" \"}\n            <span style={{ color: \"red\" }}>(Max Size of 25 KB)</span>:{\" \"}\n            {stampName}\n          </Typography>\n          <div\n            style={{\n              display: \"flex\",\n              flexDirection: \"row\",\n              alignItems: \"center\",\n            }}\n          >\n            <TextField\n              variant=\"outlined\"\n              size=\"small\"\n              fullWidth\n              name=\"stampName\"\n              type=\"file\"\n              id=\"stampName\"\n              accept=\".png,.jpeg\"\n              onChange={(event) => onFileChange(event, \"stamp\")}\n            />\n            <div style={{ padding: \"1em\" }}></div>\n            <Button\n              color=\"primary\"\n              variant=\"contained\"\n              disabled={stampName !== \"\" ? false : true}\n              onClick={() => clearImage(\"stamp\")}\n            >\n              Clear\n            </Button>\n          </div>\n\n          <br />\n          <br />\n\n          <Grid container spacing={3}>\n            {/* <Grid item xs={12} sm={6} md={4}>\n              <TextField\n                variant=\"outlined\"\n                margin=\"normal\"\n                fullWidth\n                name=\"incorDate\"\n                label=\"Date Of Incorporation\"\n                id=\"incorDate\"\n                type=\"date\"\n                value={incorDate || \"\"}\n                InputLabelProps={{\n                  shrink: true,\n                }}\n                onChange={(event) => {\n                  setCompanyDetails({\n                    ...companyDetails,\n                    incorDate: event.target.value,\n                  });\n                }}\n                size=\"small\"\n              />\n            </Grid> */}\n            {/* \n            <Grid item xs={12} sm={6} md={4}>\n              <TextField\n                size=\"small\"\n                variant=\"outlined\"\n                required\n                fullWidth\n                name=\"payeRegNo\"\n                label=\"PAYE Reg No\"\n                type=\"text\"\n                id=\"payeRegNo\"\n                value={payeRegNo || \"\"}\n                onChange={(event) => {\n                  setCompanyDetails({\n                    ...companyDetails,\n                    payeRegNo: event.target.value,\n                  });\n                }}\n              />\n            </Grid> */}\n\n            <Grid item xs={12} sm={6} md={4}>\n              <Autocomplete\n                ListboxProps={{\n                  style: { maxHeight: \"70vh\", marginTop: \"1.5em\" },\n                }}\n                size=\"small\"\n                label=\"Apply MRA Template\"\n                id=\"mra-template-application-drop-down\"\n                options={[\n                  {\n                    value: true,\n                    title: \"Apply\",\n                  },\n                  {\n                    value: false,\n                    title: \"Do not apply\",\n                  },\n                ]}\n                value={MRATemplateFlag}\n                renderInput={(params) => (\n                  <TextField {...params} label=\"Apply MRA Template\" />\n                )}\n                required\n                onChange={(e, value, reason) => {\n                  e.preventDefault();\n                  if (\n                    reason !== \"removeOption\" &&\n                    reason !== \"clear\" &&\n                    value\n                  ) {\n                    setCompanyDetails({\n                      ...companyDetails,\n                      MRATemplateFlag: value,\n                    });\n                  } else if (reason === \"removeOption\" || reason === \"clear\") {\n                    setCompanyDetails({\n                      ...companyDetails,\n                      MRATemplateFlag: null,\n                    });\n                  }\n                }}\n                getOptionLabel={(option) => option?.title || \"\"}\n                fullWidth\n              />\n            </Grid>\n\n            <Grid item xs={12} sm={6} md={4}>\n              <Autocomplete\n                ListboxProps={{\n                  style: { maxHeight: \"70vh\", marginTop: \"1.5em\" },\n                }}\n                size=\"small\"\n                label=\"Show MRA send for Fiscalisation button\"\n                id=\"fiscalisation-button-display\"\n                options={[true, false]}\n                value={displayMRAFiscalisationButton}\n                renderInput={(params) => (\n                  <TextField\n                    {...params}\n                    label=\"Show MRA send for Fiscalisation button\"\n                  />\n                )}\n                required\n                onChange={(e, value, reason) => {\n                  e.preventDefault();\n                  if (\n                    reason !== \"removeOption\" &&\n                    reason !== \"clear\" &&\n                    value\n                  ) {\n                    setCompanyDetails({\n                      ...companyDetails,\n                      displayMRAFiscalisationButton: value,\n                    });\n                  } else if (reason === \"removeOption\" || reason === \"clear\") {\n                    setCompanyDetails({\n                      ...companyDetails,\n                      displayMRAFiscalisationButton: false,\n                    });\n                  }\n                }}\n                getOptionLabel={(option) =>\n                  option === true ? \"Show\" : \"Do not show\"\n                }\n                fullWidth\n              />\n            </Grid>\n\n            {user && user?.role === \"super-admin\" ? (\n              <Grid item xs={12} sm={6} md={4}>\n                <Autocomplete\n                  ListboxProps={{\n                    style: { maxHeight: \"70vh\", marginTop: \"1.5em\" },\n                  }}\n                  size=\"small\"\n                  label=\"Document template\"\n                  id=\"document-template-drop-down\"\n                  options={\n                    process.env.REACT_APP_DOCUMENT_TEMPLATES\n                      ? JSON.parse(process.env.REACT_APP_DOCUMENT_TEMPLATES)\n                      : []\n                  }\n                  value={documentTemplate}\n                  renderInput={(params) => (\n                    <TextField {...params} label=\"Document template\" />\n                  )}\n                  required\n                  onChange={(e, value, reason) => {\n                    e.preventDefault();\n                    if (\n                      reason !== \"removeOption\" &&\n                      reason !== \"clear\" &&\n                      value\n                    ) {\n                      setCompanyDetails({\n                        ...companyDetails,\n                        documentTemplate: value,\n                      });\n                    } else if (\n                      reason === \"removeOption\" ||\n                      reason === \"clear\"\n                    ) {\n                      setCompanyDetails({\n                        ...companyDetails,\n                        documentTemplate: null,\n                      });\n                    }\n                  }}\n                  getOptionLabel={(option) => option || \"\"}\n                  fullWidth\n                />\n              </Grid>\n            ) : (\n              <></>\n            )}\n\n            <Grid item xs={12} sm={6} md={4}>\n              <Autocomplete\n                ListboxProps={{\n                  style: { maxHeight: \"70vh\" },\n                }}\n                size=\"small\"\n                label=\"VAT/Non VAT Registered\"\n                id=\"transaction-type-drop-down\"\n                options={\n                  process.env.REACT_APP_EBS_VAT_OR_NON_VAT_REGISTERED_VALUES\n                    ? JSON.parse(\n                        process.env\n                          .REACT_APP_EBS_VAT_OR_NON_VAT_REGISTERED_VALUES\n                      )\n                    : []\n                }\n                value={vatOrNonVatRegistered}\n                renderInput={(params) => (\n                  <TextField {...params} label=\"VAT/Non VAT Registered\" />\n                )}\n                required\n                onChange={(e, value, reason) => {\n                  e.preventDefault();\n                  if (\n                    reason !== \"removeOption\" &&\n                    reason !== \"clear\" &&\n                    value\n                  ) {\n                    setCompanyDetails({\n                      ...companyDetails,\n                      vatOrNonVatRegistered: value,\n                    });\n                  } else if (reason === \"removeOption\" || reason === \"clear\") {\n                    setCompanyDetails({\n                      ...companyDetails,\n                      vatOrNonVatRegistered: null,\n                    });\n                  }\n                }}\n                getOptionLabel={(option) => option?.title || \"\"}\n                fullWidth\n              />\n            </Grid>\n\n            <Grid item xs={12} sm={6} md={4}>\n              <TextField\n                size=\"small\"\n                variant=\"outlined\"\n                fullWidth\n                name=\"vatRegistrationNumber\"\n                label=\"VAT\"\n                type=\"number\"\n                id=\"vatRegistrationNumber\"\n                value={tan || \"\"}\n                onChange={(event) => {\n                  setCompanyDetails({\n                    ...companyDetails,\n                    tan: event.target.value,\n                  });\n                }}\n              />\n            </Grid>\n            <Grid item xs={12} sm={6} md={4}>\n              <TextField\n                size=\"small\"\n                variant=\"outlined\"\n                fullWidth\n                name=\"brn\"\n                label=\"BRN\"\n                type=\"text\"\n                id=\"brn\"\n                value={brn || \"\"}\n                onChange={(event) => {\n                  setCompanyDetails({\n                    ...companyDetails,\n                    brn: event.target.value,\n                  });\n                }}\n              />\n            </Grid>\n            {/*      <Grid item xs={12} sm={6} md={4}>\n              <TextField\n                size=\"small\"\n                variant=\"outlined\"\n                fullWidth\n                name=\"nic\"\n                label=\"NIC\"\n                type=\"text\"\n                id=\"nic\"\n                value={nic || \"\"}\n                onChange={(event) => {\n                  setCompanyDetails({\n                    ...companyDetails,\n                    nic: event.target.value,\n                  });\n                }}\n              />\n            </Grid> */}\n            {/*         <Grid item xs={12} sm={6} md={4}>\n              <TextField\n                size=\"small\"\n                variant=\"outlined\"\n                fullWidth\n                name=\"natureOfBusiness\"\n                label=\"Nature Of Business\"\n                type=\"text\"\n                id=\"natureOfBusiness\"\n                value={natureOfBusiness || \"\"}\n                onChange={(event) => {\n                  setCompanyDetails({\n                    ...companyDetails,\n                    natureOfBusiness: event.target.value,\n                  });\n                }}\n              />\n            </Grid> */}\n            <Grid item xs={12} sm={6} md={4}>\n              <TextField\n                size=\"small\"\n                variant=\"outlined\"\n                fullWidth\n                name=\"address\"\n                label=\"Address\"\n                type=\"text\"\n                id=\"address\"\n                value={address || \"\"}\n                onChange={(event) => {\n                  setCompanyDetails({\n                    ...companyDetails,\n                    address: event.target.value,\n                  });\n                }}\n              />\n            </Grid>\n            <Grid item xs={12} sm={6} md={4}>\n              <TextField\n                size=\"small\"\n                variant=\"outlined\"\n                fullWidth\n                name=\"contactNumber\"\n                label=\"Contact Number\"\n                type=\"text\"\n                id=\"contactNumber\"\n                value={contactNumber || \"\"}\n                onChange={(event) => {\n                  setCompanyDetails({\n                    ...companyDetails,\n                    contactNumber: event.target.value,\n                  });\n                }}\n              />\n            </Grid>\n            <Grid item xs={12} sm={6} md={4}>\n              <TextField\n                size=\"small\"\n                variant=\"outlined\"\n                fullWidth\n                name=\"mobileNumber\"\n                label=\"Mobile Number\"\n                type=\"text\"\n                id=\"mobileNumber\"\n                value={mobileNumber || \"\"}\n                onChange={(event) => {\n                  setCompanyDetails({\n                    ...companyDetails,\n                    mobileNumber: event.target.value,\n                  });\n                }}\n              />\n            </Grid>\n            {/*        <Grid item xs={12} sm={6} md={4}>\n              <TextField\n                size=\"small\"\n                variant=\"outlined\"\n                fullWidth\n                name=\"country\"\n                label=\"Country\"\n                type=\"text\"\n                id=\"country\"\n                value={country || \"\"}\n                onChange={(event) => {\n                  setCompanyDetails({\n                    ...companyDetails,\n                    country: event.target.value,\n                  });\n                }}\n              />\n            </Grid> */}\n            <Grid item xs={12} sm={6} md={4}>\n              <TextField\n                size=\"small\"\n                variant=\"outlined\"\n                fullWidth\n                name=\"email\"\n                label=\"Email\"\n                type=\"text\"\n                id=\"email\"\n                value={email || \"\"}\n                onChange={(event) => {\n                  setCompanyDetails({\n                    ...companyDetails,\n                    email: event.target.value,\n                  });\n                }}\n              />\n            </Grid>\n\n            <Grid item xs={12} sm={6} md={4}>\n              <TextField\n                size=\"small\"\n                variant=\"outlined\"\n                fullWidth\n                name=\"beneficiaryName\"\n                label=\"Beneficiary name\"\n                type=\"text\"\n                id=\"beneficiaryName\"\n                value={beneficiaryName || \"\"}\n                onChange={(event) => {\n                  setCompanyDetails({\n                    ...companyDetails,\n                    beneficiaryName: event.target.value,\n                  });\n                }}\n              />\n            </Grid>\n\n            <Grid item xs={12} sm={6} md={4}>\n              <TextField\n                size=\"small\"\n                variant=\"outlined\"\n                fullWidth\n                name=\"bankName\"\n                label=\"Bank name\"\n                type=\"text\"\n                id=\"bankName\"\n                value={bankName || \"\"}\n                onChange={(event) => {\n                  setCompanyDetails({\n                    ...companyDetails,\n                    bankName: event.target.value,\n                  });\n                }}\n              />\n            </Grid>\n\n            <Grid item xs={12} sm={6} md={4}>\n              <TextField\n                size=\"small\"\n                variant=\"outlined\"\n                fullWidth\n                name=\"bankAccNo\"\n                label=\"Bank Acc No\"\n                type=\"text\"\n                id=\"bankAccNo\"\n                value={bankAccNo || \"\"}\n                onChange={(event) => {\n                  setCompanyDetails({\n                    ...companyDetails,\n                    bankAccNo: event.target.value,\n                  });\n                }}\n              />\n            </Grid>\n\n            <Grid item xs={12} sm={6} md={4}>\n              <TextField\n                size=\"small\"\n                variant=\"outlined\"\n                fullWidth\n                name=\"bankIban\"\n                label=\"Bank IABN\"\n                type=\"text\"\n                id=\"bankIban\"\n                value={bankIban || \"\"}\n                onChange={(event) => {\n                  setCompanyDetails({\n                    ...companyDetails,\n                    bankIban: event.target.value,\n                  });\n                }}\n              />\n            </Grid>\n\n            <Grid item xs={12} sm={6} md={4}>\n              <TextField\n                size=\"small\"\n                variant=\"outlined\"\n                fullWidth\n                name=\"bankSwiftCode\"\n                label=\"Bank Swift Code\"\n                type=\"text\"\n                id=\"bankSwiftCode\"\n                value={bankSwiftCode || \"\"}\n                onChange={(event) => {\n                  setCompanyDetails({\n                    ...companyDetails,\n                    bankSwiftCode: event.target.value,\n                  });\n                }}\n              />\n            </Grid>\n            {/* <Grid item xs={12} sm={12} md={12}>\n              <TableContainer>\n                <Typography>The total number will be applicable after 1 year of employment.</Typography>\n                <Table border={1}>\n                  <TableHead>\n                    <TableRow>\n                      <TableCell>Absence type</TableCell>\n                      <TableCell>Total number</TableCell>\n                    </TableRow>\n                  </TableHead>\n                  <TableBody>\n                    {absenceTariff?.map((o_abc, index) => (\n                      <TableRow key={index}>\n                        <TableCell>{o_abc?.txt}</TableCell>\n                        <TableCell>\n                          <TextField\n                            size=\"small\"\n                            variant=\"outlined\"\n                            margin=\"normal\"\n                            fullWidth\n                            name=\"absc\"\n                            label=\"Quantity\"\n                            type=\"number\"\n                            id={o_abc?.id}\n                            value={o_abc?.qty}\n                            onChange={(event) => {\n                              let a_abscence = [...absenceTariff];\n                              let a_new_absc = [];\n                              a_abscence.forEach((o_absc) => {\n                                if (o_absc?.id === o_abc?.id) {\n                                  a_new_absc.push({ ...o_abc, qty: event.target.value });\n                                } else {\n                                  a_new_absc.push({ ...o_absc });\n                                }\n                              });\n                              setCompanyDetails({ ...companyDetails, absenceTariff: a_new_absc });\n                            }}\n                          />\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </TableContainer>\n            </Grid> */}\n          </Grid>\n        </DialogContent>\n        <DialogActions>\n          <Button\n            onClick={(e) => updateCompany(e)}\n            color=\"primary\"\n            variant=\"contained\"\n          >\n            Update\n          </Button>\n          <Button onClick={handleCloseDialog} color=\"error\" variant=\"outlined\">\n            Cancel\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  );\n}\n\nexport default UpdateCompanyDialog;\n"],"sourceRoot":""}