{"version":3,"sources":["pages/dashboard/manage-client/UpdateClientDialog.js"],"names":["UpdateCompanyDialog","companyId","openDialog","handleCloseDialog","clientDetails","setClientDetails","initializeClientList","id","name","companyType","tan","address","email","email2","email3","email4","contactNumber","mobileNumber","brn","nic","buyerType","representativeName","representativeContactNumber","dispatch","useDispatch","enqueueSnackbar","useSnackbar","user","useAuth","snackbar","useSelector","selectSnackbar","updateClient","e","a","preventDefault","setLoading","setSnackbar","counter","message","variant","db","collection","doc","process","set","merge","then","setCompanyInvSelected","undefined","setClientInvSelected","setCompanyPaymentSelected","setClientPaymentSelected","setCompanyReportSelected","setClientReportSelected","setCompanyIdSelected","setCompanyDetails","setClientDocumentIdSelected","setClientDocumentObjectSelected","catch","err","style","width","maxWidth","fullWidth","open","onClose","container","spacing","item","xs","sm","md","size","required","label","type","value","onChange","event","target","native","placeholder","inputProps","ListboxProps","maxHeight","options","JSON","parse","renderInput","params","reason","getOptionLabel","option","title","onClick","color"],"mappings":"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","file":"static/js/93.c57f2b1a.chunk.js","sourcesContent":["import {\n  Autocomplete,\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  FormControl,\n  Grid,\n  Select,\n  TextField,\n} from \"@mui/material\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport useAuth from \"../../../hooks/useAuth\";\nimport { setLoading } from \"../../../features/globalSlice\";\nimport { selectSnackbar, setSnackbar } from \"../../../features/snackbarSlice\";\nimport db from \"../../../firebase\";\nimport { useSnackbar } from \"notistack\";\nimport {\n  setClientInvSelected,\n  setCompanyInvSelected,\n} from \"../../../features/invoiceSectionSlice\";\nimport {\n  setClientPaymentSelected,\n  setCompanyPaymentSelected,\n} from \"../../../features/paymentSectionSlice\";\nimport {\n  setClientReportSelected,\n  setCompanyReportSelected,\n} from \"../../../features/reportSectionSlice\";\nimport {\n  setClientDocumentIdSelected,\n  setClientDocumentObjectSelected,\n  setCompanyDetails,\n  setCompanyIdSelected,\n} from \"../../../features/documentSlice\";\n\nfunction UpdateCompanyDialog({\n  companyId,\n  openDialog,\n  handleCloseDialog,\n  clientDetails,\n  setClientDetails,\n  initializeClientList,\n}) {\n  const {\n    id,\n    name,\n    // companyRefId,\n    companyType,\n    // natureOfBusiness,\n    // incorDate,\n    // payeRegNo,\n    tan,\n    address,\n    // country,\n    email,\n    email2,\n    email3,\n    email4,\n    contactNumber,\n    mobileNumber,\n    brn,\n    nic,\n    buyerType,\n    representativeName,\n    representativeContactNumber,\n  } = clientDetails;\n  const dispatch = useDispatch();\n  const { enqueueSnackbar } = useSnackbar();\n  const { user } = useAuth();\n  const snackbar = useSelector(selectSnackbar);\n\n  const updateClient = async (e) => {\n    if (user?.id !== \"\") {\n      e.preventDefault();\n      dispatch(setLoading(true));\n      if (name === \"\" /* || companyType === \"\" || payeRegNo === \"\" */) {\n        dispatch(\n          setSnackbar({\n            counter: snackbar.counter + 1,\n            message: \"Name cannot be blank\",\n            variant: \"error\",\n          })\n        );\n        dispatch(setLoading(false));\n      } /* else if (\n        tan !== \"\" &&\n        tan !== undefined &&\n        tan !== null &&\n        tan.length !== 8\n      ) {\n        dispatch(\n          setSnackbar({\n            counter: snackbar.counter + 1,\n            message: \"Vat Registration Number should be of 8 characters\",\n            variant: \"error\",\n          })\n        );\n        dispatch(setLoading(false));\n      } */ else {\n        // check if name is the same\n        await db\n          .collection(\"company\")\n          .doc(process.env.REACT_APP_COMPANY_ID)\n          .collection(\"client\")\n          .doc(id)\n          .set(\n            {\n              name: name || \"\",\n              companyType: companyType || \"\",\n              // natureOfBusiness: natureOfBusiness,\n              // incorDate: incorDate || \"\",\n              // payeRegNo: payeRegNo,\n              tan: tan || \"\",\n              address: address || \"\",\n              // country: country,\n              email: email || \"\",\n              email2: email2 || \"\",\n              email3: email3 || \"\",\n              email4: email4 || \"\",\n              contactNumber: contactNumber || \"\",\n              mobileNumber: mobileNumber || \"\",\n              brn: brn || \"\",\n              nic: nic || \"\",\n              buyerType: buyerType || null,\n              representativeName: representativeName || \"\",\n              representativeContactNumber: representativeContactNumber || \"\",\n            },\n            { merge: true }\n          )\n          .then(() => {\n            enqueueSnackbar(`Client updated successfully`);\n\n            dispatch(setCompanyInvSelected(undefined));\n            dispatch(setClientInvSelected(undefined));\n\n            dispatch(setCompanyPaymentSelected(undefined));\n            dispatch(setClientPaymentSelected(undefined));\n\n            dispatch(setCompanyReportSelected(undefined));\n            dispatch(setClientReportSelected(undefined));\n\n            // reset company id\n            dispatch(setCompanyIdSelected(undefined));\n\n            // reset company details\n            dispatch(setCompanyDetails(null));\n\n            dispatch(setClientDocumentIdSelected(undefined));\n\n            dispatch(setClientDocumentObjectSelected(undefined));\n\n            dispatch(setLoading(false));\n            handleCloseDialog();\n            initializeClientList();\n          })\n          .catch((err) => {\n            enqueueSnackbar(\n              `Error occured while updating client: ${err?.message}`,\n              { variant: \"error\" }\n            );\n            dispatch(setLoading(false));\n          });\n      }\n    } else {\n      dispatch(\n        setSnackbar({\n          counter: snackbar.counter + 1,\n          message:\n            \"Your session has been terminated due to greater than 30 minutes of inactivity. Please log in again.\",\n          variant: \"error\",\n        })\n      );\n    }\n  };\n\n  return (\n    <>\n      <Dialog\n        style={{ width: \"100%\" }}\n        maxWidth=\"md\"\n        fullWidth\n        open={openDialog}\n        onClose={handleCloseDialog}\n      >\n        <DialogTitle id=\"alert-dialog-title\">Update company</DialogTitle>\n        <DialogContent>\n          <hr />\n          <br />\n          <Grid container spacing={3}>\n            <Grid item xs={12} sm={6} md={4}>\n              <TextField\n                size=\"small\"\n                variant=\"outlined\"\n                required\n                fullWidth\n                name=\"name\"\n                label=\"Name\"\n                type=\"text\"\n                id=\"name\"\n                value={name || \"\"}\n                onChange={(event) => {\n                  setClientDetails({\n                    ...clientDetails,\n                    name: event.target.value,\n                  });\n                }}\n              />\n            </Grid>\n            <Grid item xs={12} sm={6} md={4}>\n              <FormControl size=\"small\" variant=\"outlined\" fullWidth>\n                <Select\n                  size=\"small\"\n                  native\n                  //label=\"Company Type\"\n                  placeholder=\"Please choose a company type\"\n                  value={companyType || \"\"}\n                  onChange={(event) => {\n                    setClientDetails({\n                      ...clientDetails,\n                      companyType: event.target.value,\n                    });\n                  }}\n                  inputProps={{\n                    name: \"companyType\",\n                    id: \"companyType\",\n                  }}\n                >\n                  <option value=\"\">Please choose a Company Type *</option>\n                  <option value=\"Individual\">Individual</option>\n                  <option value=\"Company\">Company</option>\n                  <option value=\"Other\">Other</option>\n                </Select>\n              </FormControl>\n            </Grid>\n            <Grid item xs={12} sm={6} md={4}>\n              <TextField\n                size=\"small\"\n                variant=\"outlined\"\n                fullWidth\n                name=\"vatRegistrationNumber\"\n                label=\"VAT\"\n                type=\"number\"\n                id=\"vatRegistrationNumber\"\n                value={tan || \"\"}\n                onChange={(event) => {\n                  setClientDetails({\n                    ...clientDetails,\n                    tan: event.target.value,\n                  });\n                }}\n              />\n            </Grid>\n            <Grid item xs={12} sm={6} md={4}>\n              <TextField\n                size=\"small\"\n                variant=\"outlined\"\n                fullWidth\n                name=\"brn\"\n                label=\"BRN\"\n                type=\"text\"\n                id=\"brn\"\n                value={brn || \"\"}\n                onChange={(event) => {\n                  setClientDetails({\n                    ...clientDetails,\n                    brn: event.target.value,\n                  });\n                }}\n              />\n            </Grid>\n            <Grid item xs={12} sm={6} md={4}>\n              <TextField\n                size=\"small\"\n                variant=\"outlined\"\n                fullWidth\n                name=\"nic\"\n                label=\"NIC\"\n                type=\"text\"\n                id=\"nic\"\n                value={nic || \"\"}\n                onChange={(event) => {\n                  setClientDetails({\n                    ...clientDetails,\n                    nic: event.target.value,\n                  });\n                }}\n              />\n            </Grid>\n            <Grid item xs={12} sm={6} md={4}>\n              <Autocomplete\n                ListboxProps={{ style: { maxHeight: \"70vh\" } }}\n                size=\"small\"\n                label=\"Please define type of buyer\"\n                id=\"buyer-type-drop-down\"\n                options={\n                  process.env.REACT_APP_EBS_BUYER_TYPE_VALUES\n                    ? JSON.parse(process.env.REACT_APP_EBS_BUYER_TYPE_VALUES)\n                    : []\n                }\n                value={buyerType}\n                renderInput={(params) => (\n                  <TextField {...params} label=\"Please define type of buyer\" />\n                )}\n                onChange={(e, value, reason) => {\n                  e.preventDefault();\n                  if (\n                    reason !== \"removeOption\" &&\n                    reason !== \"clear\" &&\n                    value\n                  ) {\n                    setClientDetails({\n                      ...clientDetails,\n                      buyerType: value,\n                    });\n                  } else if (reason === \"removeOption\" || reason === \"clear\") {\n                    setClientDetails({\n                      ...clientDetails,\n                      buyerType: null,\n                    });\n                  }\n                }}\n                getOptionLabel={(option) => option?.title || \"\"}\n                fullWidth\n              />\n            </Grid>\n            {/* <Grid item xs={12} sm={6} md={4}>\n              <TextField\n                size=\"small\"\n                variant=\"outlined\"\n                fullWidth\n                name=\"natureOfBusiness\"\n                label=\"Nature Of Business\"\n                type=\"text\"\n                id=\"natureOfBusiness\"\n                value={natureOfBusiness || \"\"}\n                onChange={(event) => {\n                  setClientDetails({\n                    ...clientDetails,\n                    natureOfBusiness: event.target.value,\n                  });\n                }}\n              />\n            </Grid> */}\n            <Grid item xs={12} sm={6} md={4}>\n              <TextField\n                size=\"small\"\n                variant=\"outlined\"\n                fullWidth\n                name=\"address\"\n                label=\"Address\"\n                type=\"text\"\n                id=\"address\"\n                value={address || \"\"}\n                onChange={(event) => {\n                  setClientDetails({\n                    ...clientDetails,\n                    address: event.target.value,\n                  });\n                }}\n              />\n            </Grid>\n            <Grid item xs={12} sm={6} md={4}>\n              <TextField\n                size=\"small\"\n                variant=\"outlined\"\n                fullWidth\n                name=\"contactNumber\"\n                label=\"Contact Number\"\n                type=\"text\"\n                id=\"contactNumber\"\n                value={contactNumber || \"\"}\n                onChange={(event) => {\n                  setClientDetails({\n                    ...clientDetails,\n                    contactNumber: event.target.value,\n                  });\n                }}\n              />\n            </Grid>\n            <Grid item xs={12} sm={6} md={4}>\n              <TextField\n                size=\"small\"\n                variant=\"outlined\"\n                fullWidth\n                name=\"mobileNumber\"\n                label=\"Mobile Number\"\n                type=\"text\"\n                id=\"mobileNumber\"\n                value={mobileNumber || \"\"}\n                onChange={(event) => {\n                  setClientDetails({\n                    ...clientDetails,\n                    mobileNumber: event.target.value,\n                  });\n                }}\n              />\n            </Grid>\n            {/* <Grid item xs={12} sm={6} md={4}>\n              <TextField\n                size=\"small\"\n                variant=\"outlined\"\n                fullWidth\n                name=\"country\"\n                label=\"Country\"\n                type=\"text\"\n                id=\"country\"\n                value={country || \"\"}\n                onChange={(event) => {\n                  setClientDetails({\n                    ...clientDetails,\n                    country: event.target.value,\n                  });\n                }}\n              />\n            </Grid> */}\n            <Grid item xs={12} sm={6} md={4}>\n              <TextField\n                size=\"small\"\n                variant=\"outlined\"\n                fullWidth\n                name=\"email\"\n                label=\"Email 1\"\n                type=\"text\"\n                id=\"email\"\n                value={email || \"\"}\n                onChange={(event) => {\n                  setClientDetails({\n                    ...clientDetails,\n                    email: event.target.value,\n                  });\n                }}\n              />\n            </Grid>\n\n            <Grid item xs={12} sm={6} md={4}>\n              <TextField\n                size=\"small\"\n                variant=\"outlined\"\n                fullWidth\n                name=\"email2\"\n                label=\"Email 2\"\n                type=\"text\"\n                id=\"email2\"\n                value={email2 || \"\"}\n                onChange={(event) => {\n                  setClientDetails({\n                    ...clientDetails,\n                    email2: event.target.value,\n                  });\n                }}\n              />\n            </Grid>\n\n            <Grid item xs={12} sm={6} md={4}>\n              <TextField\n                size=\"small\"\n                variant=\"outlined\"\n                fullWidth\n                name=\"email3\"\n                label=\"Email 3\"\n                type=\"text\"\n                id=\"email3\"\n                value={email3 || \"\"}\n                onChange={(event) => {\n                  setClientDetails({\n                    ...clientDetails,\n                    email3: event.target.value,\n                  });\n                }}\n              />\n            </Grid>\n\n            <Grid item xs={12} sm={6} md={4}>\n              <TextField\n                size=\"small\"\n                variant=\"outlined\"\n                fullWidth\n                name=\"email4\"\n                label=\"Email 4\"\n                type=\"text\"\n                id=\"email4\"\n                value={email4 || \"\"}\n                onChange={(event) => {\n                  setClientDetails({\n                    ...clientDetails,\n                    email4: event.target.value,\n                  });\n                }}\n              />\n            </Grid>\n            <Grid item xs={12} sm={6} md={4}>\n              <TextField\n                size=\"small\"\n                variant=\"outlined\"\n                fullWidth\n                name=\"representativeName\"\n                label=\"Representative name\"\n                type=\"text\"\n                id=\"representativeName\"\n                value={representativeName || \"\"}\n                onChange={(event) => {\n                  setClientDetails({\n                    ...clientDetails,\n                    representativeName: event.target.value,\n                  });\n                }}\n              />\n            </Grid>\n\n            <Grid item xs={12} sm={6} md={4}>\n              <TextField\n                size=\"small\"\n                variant=\"outlined\"\n                fullWidth\n                name=\"representativeContactNumber\"\n                label=\"Representative contact number\"\n                type=\"text\"\n                id=\"representativeContactNumber\"\n                value={representativeContactNumber || \"\"}\n                onChange={(event) => {\n                  setClientDetails({\n                    ...clientDetails,\n                    representativeContactNumber: event.target.value,\n                  });\n                }}\n              />\n            </Grid>\n          </Grid>\n        </DialogContent>\n        <DialogActions>\n          <Button\n            onClick={(e) => updateClient(e)}\n            color=\"primary\"\n            variant=\"contained\"\n          >\n            Update\n          </Button>\n          <Button onClick={handleCloseDialog} color=\"error\" variant=\"outlined\">\n            Cancel\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  );\n}\n\nexport default UpdateCompanyDialog;\n"],"sourceRoot":""}