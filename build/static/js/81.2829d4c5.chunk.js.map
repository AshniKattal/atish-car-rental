{"version":3,"sources":["pages/dashboard/bankStatementConversion/BankStatementConversionDetail.js"],"names":["BankStatementConversionDetail","themeStretch","useSettings","user","useAuth","dispatch","useDispatch","enqueueSnackbar","useSnackbar","companyDetails","useSelector","selectDocument","companyList","selectCompanyList","useState","columnDisplay","set_columnDisplay","tableDataOriginal","set_tableDataOriginal","tableData","set_tableData","mainCheckBoxes","set_mainCheckBoxes","searchTransaction","set_searchTransaction","searchTransactionText","set_searchTransactionText","file","setFile","fileInputRef","useRef","temp_checkPermission_ref","viewPermissionGranted","setViewPermissionGranted","useEffect","current","id","permissions","uploadBankStatementChk","assignedCompanyId","includes","variant","onFileChange1","e","a","target","files","length","setLoading","o_file","reader","FileReader","onload","binaryString","result","base64String","btoa","callExcelConversionAPI","name","readAsBinaryString","pdfBase64String","fileName","payload","Parameters","Name","FileValue","Data","Value","axios","post","process","headers","then","response","console","log","byteArray","base64js","toByteArray","workbook","XLSX","type","sheetName","SheetNames","worksheet","Sheets","options","header","defval","raw","dateNF","jsonData","sheet_to_json","map","row","cell","Date","toISOString","split","newData","forEach","push","checked","columns","mainCheckBoxesValues","readExcelBase64Data","data","Files","FileData","catch","error","errorMessage","Message","onChangeCheckBox","value","index","newArr","downloadExcel","removeUncheckedColRows","aoa_to_sheet","book_new","book_append_sheet","wbout","bookType","blob","Blob","saveAs","headerCheckboxes","innerTableData","Promise","resolve","newTableData","tableDatalength","headerColLength","i","j","reason","preventDefault","newList","filterByDebitCredit","filter","toLowerCase","tableRows","undefined","Number","handleSelectChange","setCompanyIdSelected","setCompanyDetails","title","maxWidth","container","spacing","item","xs","md","ListboxProps","style","maxHeight","size","label","renderInput","params","InputLabelProps","required","onChange","getOptionLabel","option","onClick","click","ref","display","align","color","startIcon","fullWidth","event","searchTransactionMethod","onTransactionSearch","renderOption","props","key","onChangeColumnsDisplay","border","mainColumn","indexMainCol","column","indexCol"],"mappings":"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","file":"static/js/81.2829d4c5.chunk.js","sourcesContent":["import {\n  Autocomplete,\n  Button,\n  Checkbox,\n  Container,\n  Divider,\n  Grid,\n  Stack,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableRow,\n  TextField,\n  Typography,\n} from \"@mui/material\";\nimport Page from \"../../../components/Page\";\n/* import useSettings from \"../../../hooks/useSettings\"; */\nimport axios from \"axios\";\nimport { useSnackbar } from \"notistack\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setLoading } from \"../../../features/globalSlice\";\nimport * as XLSX from \"xlsx\";\nimport base64js from \"base64-js\";\nimport { Fragment, useEffect, useRef, useState } from \"react\";\nimport { saveAs } from \"file-saver\";\nimport DownloadIcon from \"@mui/icons-material/Download\";\nimport {\n  selectDocument,\n  setCompanyDetails,\n  setCompanyIdSelected,\n} from \"src/features/documentSlice\";\nimport { selectCompanyList } from \"src/features/companySlice\";\nimport useAuth from \"src/hooks/useAuth\";\nimport useSettings from \"src/hooks/useSettings\";\n\nexport default function BankStatementConversionDetail() {\n  const { themeStretch } = useSettings();\n\n  const { user } = useAuth();\n\n  const dispatch = useDispatch();\n\n  const { enqueueSnackbar } = useSnackbar();\n\n  /*   const { themeStretch } = useSettings(); */\n\n  const { companyDetails } = useSelector(selectDocument);\n\n  const { companyList } = useSelector(selectCompanyList);\n\n  const [columnDisplay, set_columnDisplay] = useState(\"All lines\");\n\n  const [tableDataOriginal, set_tableDataOriginal] = useState([]);\n\n  const [tableData, set_tableData] = useState([]);\n\n  const [mainCheckBoxes, set_mainCheckBoxes] = useState([]);\n\n  const [searchTransaction, set_searchTransaction] = useState(null);\n\n  const [searchTransactionText, set_searchTransactionText] = useState(\"\");\n\n  const [file, setFile] = useState(null);\n\n  const fileInputRef = useRef(null);\n\n  const handleClick = () => {\n    fileInputRef.current.click();\n  };\n\n  const temp_checkPermission_ref = useRef();\n\n  const [viewPermissionGranted, setViewPermissionGranted] = useState(false);\n\n  useEffect(() => {\n    temp_checkPermission_ref.current();\n  }, [companyDetails]);\n\n  function checkPermission() {\n    if (companyDetails && companyDetails?.id) {\n      if (\n        !user?.permissions?.uploadBankStatementChk?.assignedCompanyId?.includes(\n          companyDetails?.id\n        )\n      ) {\n        enqueueSnackbar(\n          \"You do not have the permission to upload bank statement\",\n          { variant: \"error\" }\n        );\n\n        setViewPermissionGranted(false);\n      } else {\n        setViewPermissionGranted(true);\n      }\n    }\n  }\n\n  temp_checkPermission_ref.current = checkPermission;\n\n  const onFileChange1 = async (e) => {\n    if (e.target.files?.length > 0) {\n      dispatch(setLoading(true));\n\n      let o_file = e.target.files[0];\n\n      setFile(o_file);\n\n      //convert content of pdf file to base64\n      const reader = new FileReader();\n      reader.onload = () => {\n        const binaryString = reader.result;\n        const base64String = btoa(binaryString);\n        callExcelConversionAPI(base64String, o_file?.name);\n      };\n      reader.readAsBinaryString(o_file);\n    }\n  };\n\n  const callExcelConversionAPI = (pdfBase64String, fileName) => {\n    const payload = {\n      Parameters: [\n        {\n          Name: \"File\",\n          FileValue: {\n            Name: fileName,\n            Data: pdfBase64String,\n          },\n        },\n        {\n          Name: \"SingleSheet\",\n          Value: true,\n        },\n      ],\n    };\n\n    axios\n      .post(\n        `https://v2.convertapi.com/convert/pdf/to/xlsx?Secret=${process.env.REACT_APP_CONVERT_API_SECRET}`,\n        payload,\n        {\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n        }\n      )\n      .then((response) => {\n        console.log(response);\n        // handleDownload(response.data.Files[0].FileData, fileName);\n        readExcelBase64Data(response.data.Files[0].FileData);\n      })\n      .catch((error) => {\n        let errorMessage = error.response.data.Message;\n\n        enqueueSnackbar(`Error occured while converting pdf: ${errorMessage}`, {\n          variant: \"error\",\n        });\n        dispatch(setLoading(false));\n      });\n  };\n\n  function readExcelBase64Data(base64String) {\n    const byteArray = base64js.toByteArray(base64String);\n    const workbook = XLSX.read(byteArray, { type: \"array\" });\n\n    const sheetName = workbook.SheetNames[0];\n    const worksheet = workbook.Sheets[sheetName];\n\n    // Define options to handle dates correctly\n    const options = {\n      header: 1, // Keep the header row\n      defval: \"\", // Default value for empty cells\n      raw: false, // Parse values instead of raw values\n      dateNF: \"dd/mm/yyyy\", // Date format for parsing\n    };\n\n    // const jsonData = XLSX.utils.sheet_to_json(worksheet);\n    const jsonData = XLSX.utils.sheet_to_json(worksheet, options).map((row) => {\n      return row.map((cell) => {\n        if (cell instanceof Date) {\n          return cell.toISOString().split(\"T\")[0]; // Convert to 'YYYY-MM-DD' format\n        }\n        return cell;\n      });\n    });\n\n    let newData = [];\n    jsonData.forEach((row) => {\n      newData.push({ checked: true, columns: row });\n    });\n\n    let mainCheckBoxesValues = [];\n    if (newData?.length > 0) {\n      if (newData[0]?.columns?.length > 0) {\n        newData[0]?.columns.forEach(() => {\n          mainCheckBoxesValues.push({\n            checked: true,\n          });\n        });\n\n        set_mainCheckBoxes(mainCheckBoxesValues);\n      }\n    }\n\n    set_tableData(newData);\n\n    set_tableDataOriginal(newData);\n\n    dispatch(setLoading(false));\n  }\n\n  // const handleDownload = (base64, fileName) => {\n  //   // Decode base64 to binary string\n  //   const binaryString = atob(base64);\n\n  //   // Convert binary string to an array of 8-bit unsigned integers\n  //   const len = binaryString.length;\n  //   const bytes = new Uint8Array(len);\n  //   for (let i = 0; i < len; i++) {\n  //     bytes[i] = binaryString.charCodeAt(i);\n  //   }\n\n  //   // Create a Blob from the byte array\n  //   const blob = new Blob([bytes], {\n  //     type: \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\n  //   });\n\n  //   // Create a download link\n  //   const link = document.createElement(\"a\");\n  //   link.href = URL.createObjectURL(blob);\n  //   link.download = `${fileName}.xlsx`;\n\n  //   // Programmatically click the link to trigger the download\n  //   document.body.appendChild(link);\n  //   link.click();\n  //   document.body.removeChild(link);\n\n  //   enqueueSnackbar(\"PDF converted to Excel successfully\");\n\n  //   dispatch(setLoading(false));\n  // };\n\n  function onChangeCheckBox(value, index, type) {\n    let newArr =\n      type === \"mainCol\"\n        ? [...mainCheckBoxes]\n        : type === \"row\"\n        ? [...tableData]\n        : [];\n    newArr[index] = { ...newArr[index], checked: value };\n    if (type === \"mainCol\") {\n      set_mainCheckBoxes(newArr);\n    } else if (type === \"row\") {\n      set_tableData(newArr);\n    }\n  }\n\n  const downloadExcel = async () => {\n    let data = await removeUncheckedColRows(mainCheckBoxes, tableData);\n\n    const worksheet = XLSX.utils.aoa_to_sheet(data);\n\n    const workbook = XLSX.utils.book_new();\n    XLSX.utils.book_append_sheet(workbook, worksheet, \"Sheet1\");\n\n    const wbout = XLSX.write(workbook, { bookType: \"xlsx\", type: \"array\" });\n    const blob = new Blob([wbout], { type: \"application/octet-stream\" });\n\n    saveAs(blob, `${file?.name}.xlsx`);\n  };\n\n  async function removeUncheckedColRows(headerCheckboxes, innerTableData) {\n    return await new Promise((resolve) => {\n      let newTableData = [];\n      const tableDatalength = innerTableData?.length;\n      const headerColLength = headerCheckboxes?.length;\n\n      for (let i = 0; i < tableDatalength; i++) {\n        if (innerTableData[i]?.checked) {\n          let columns = [];\n          for (let j = 0; j < headerColLength; j++) {\n            if (headerCheckboxes[j]?.checked) {\n              columns.push(innerTableData[i]?.columns[j]);\n            }\n          }\n          newTableData.push([...columns]);\n        }\n      }\n\n      resolve(newTableData);\n    });\n  }\n\n  async function onChangeColumnsDisplay(e, value, reason) {\n    e.preventDefault();\n\n    if (reason !== \"removeOption\" && reason !== \"clear\" && value) {\n      let newList = [];\n      if (value === \"Lines with DEBIT only\") {\n        newList = await filterByDebitCredit(tableDataOriginal, 4);\n      } else if (value === \"Lines with CREDIT only\") {\n        newList = await filterByDebitCredit(tableDataOriginal, 5);\n      } else {\n        newList = [...tableDataOriginal];\n      }\n\n      if (newList?.length > 0 && searchTransaction) {\n        newList = newList.filter(\n          (row) => row.columns[2] && row.columns[2].includes(searchTransaction)\n        );\n      }\n\n      set_columnDisplay(value);\n      set_tableData(newList);\n    } else if (reason === \"removeOption\" || reason === \"clear\") {\n      let newList = [];\n      newList = [...tableDataOriginal];\n\n      if (newList?.length > 0 && searchTransaction) {\n        newList = newList.filter(\n          (row) => row.columns[2] && row.columns[2].includes(searchTransaction)\n        );\n      }\n\n      set_columnDisplay(value);\n      set_tableData(newList);\n    }\n  }\n\n  async function onTransactionSearch(e, value, reason) {\n    e.preventDefault();\n\n    if (reason !== \"removeOption\" && reason !== \"clear\" && value) {\n      let newList = [];\n\n      newList = tableDataOriginal.filter(\n        (row) => row.columns[2] && row.columns[2].includes(value)\n      );\n\n      if (newList?.length > 0 && columnDisplay) {\n        if (columnDisplay === \"Lines with DEBIT only\") {\n          newList = await filterByDebitCredit(newList, 4);\n        } else if (columnDisplay === \"Lines with CREDIT only\") {\n          newList = await filterByDebitCredit(newList, 5);\n        }\n      }\n\n      set_tableData(newList);\n      set_searchTransaction(value);\n    } else if (reason === \"removeOption\" || reason === \"clear\") {\n      let newList = [];\n      newList = [...tableDataOriginal];\n\n      if (newList?.length > 0 && columnDisplay) {\n        if (columnDisplay === \"Lines with DEBIT only\") {\n          newList = await filterByDebitCredit(newList, 4);\n        } else if (columnDisplay === \"Lines with CREDIT only\") {\n          newList = await filterByDebitCredit(newList, 5);\n        }\n      }\n\n      set_tableData(newList);\n      set_searchTransaction(value);\n    }\n  }\n\n  async function searchTransactionMethod() {\n    set_columnDisplay(\"ALL Lines\");\n    set_searchTransaction(null);\n\n    if (!searchTransactionText) {\n      set_tableData([...tableDataOriginal]);\n    } else {\n      let newList = [];\n\n      newList = tableDataOriginal.filter(\n        (row) =>\n          row.columns[2] &&\n          row.columns[2]\n            .toLowerCase()\n            .includes(searchTransactionText.toLowerCase())\n      );\n\n      if (newList?.length > 0 && columnDisplay) {\n        if (columnDisplay === \"Lines with DEBIT only\") {\n          newList = await filterByDebitCredit(newList, 4);\n        } else if (columnDisplay === \"Lines with CREDIT only\") {\n          newList = await filterByDebitCredit(newList, 5);\n        }\n      }\n\n      set_tableData(newList);\n    }\n  }\n\n  async function filterByDebitCredit(tableRows, index) {\n    return await new Promise((resolve) => {\n      let newList = tableRows.filter(\n        (row) =>\n          row.columns[index] !== \"\" &&\n          row.columns[index] !== undefined &&\n          Number(row.columns[index]) >= 0\n      );\n      resolve(newList);\n    });\n  }\n\n  const handleSelectChange = async (e, value, reason, type) => {\n    e.preventDefault();\n    if (reason !== \"removeOption\" && reason !== \"clear\" && value) {\n      if (type === \"company\") {\n        // redux company id\n        dispatch(setCompanyIdSelected(value.id));\n\n        // redux company object\n        dispatch(setCompanyDetails(value));\n      }\n    } else if (reason === \"removeOption\" || reason === \"clear\") {\n      if (type === \"company\") {\n        // reset company id\n        dispatch(setCompanyIdSelected(undefined));\n\n        // reset company details\n        dispatch(setCompanyDetails(null));\n      }\n    }\n  };\n\n  return (\n    <>\n      <Page title=\"Document\">\n        <Container maxWidth={themeStretch ? false : \"xl\"}>\n          <Grid container spacing={3}>\n            <Grid item xs={12} md={4}>\n              <Autocomplete\n                ListboxProps={{ style: { maxHeight: \"70vh\" } }}\n                size=\"small\"\n                label=\"Please choose a company\"\n                id=\"company-drop-down\"\n                options={companyList || []}\n                value={companyDetails || null}\n                renderInput={(params) => (\n                  <TextField\n                    {...params}\n                    label=\"Please choose a company\"\n                    InputLabelProps={{ required: true }}\n                  />\n                )}\n                required\n                onChange={(e, value, reason) =>\n                  handleSelectChange(e, value, reason, \"company\")\n                }\n                getOptionLabel={(option) => option?.name || \"\"}\n              />\n            </Grid>\n\n            {companyDetails && viewPermissionGranted ? (\n              <>\n                <Grid item xs={12} md={12}>\n                  <Typography>Import bank statement pdf</Typography>\n                </Grid>\n                <Grid item xs={12} md={3}>\n                  <Stack spacing={2}>\n                    <Typography>Upload bank statement</Typography>\n                    <Button variant=\"contained\" onClick={handleClick}>\n                      Upload file\n                    </Button>\n                  </Stack>\n\n                  <input\n                    type=\"file\"\n                    ref={fileInputRef}\n                    style={{ display: \"none\" }}\n                    onChange={onFileChange1}\n                  />\n                </Grid>\n\n                {tableDataOriginal && tableDataOriginal?.length > 0 ? (\n                  <>\n                    <Grid item xs={12} md={12}>\n                      <Divider />\n                    </Grid>\n                    <Grid item xs={12} md={12}>\n                      <div align=\"right\">\n                        <Button\n                          variant=\"contained\"\n                          color=\"primary\"\n                          onClick={() => downloadExcel()}\n                          startIcon={<DownloadIcon />}\n                        >\n                          Download as Excel\n                        </Button>\n                      </div>\n                    </Grid>\n\n                    <Grid item xs={12} md={5}>\n                      <Grid container spacing={2}>\n                        <Grid item xs={12} md={8}>\n                          <TextField\n                            variant=\"outlined\"\n                            name=\"searchTransactionText\"\n                            label=\"Search transaction\"\n                            id=\"searchTransactionText\"\n                            type=\"text\"\n                            value={searchTransactionText || \"\"}\n                            size=\"small\"\n                            fullWidth\n                            onChange={(event) =>\n                              set_searchTransactionText(event.target.value)\n                            }\n                          />\n                        </Grid>\n                        <Grid item xs={12} md={4}>\n                          <Button\n                            variant=\"contained\"\n                            color=\"primary\"\n                            onClick={() => searchTransactionMethod()}\n                          >\n                            Search\n                          </Button>\n                        </Grid>\n                      </Grid>\n                    </Grid>\n\n                    <Grid item xs={12} md={4}>\n                      <Autocomplete\n                        ListboxProps={{\n                          style: { maxHeight: \"70vh\" },\n                        }}\n                        size=\"small\"\n                        label=\"Search transaction\"\n                        id=\"search-transaction-drop-down\"\n                        options={\n                          tableData && tableData?.length > 0\n                            ? tableData.map((row) => row.columns[2] !== \"\")\n                            : []\n                        }\n                        value={searchTransaction || null}\n                        renderInput={(params) => (\n                          <TextField\n                            {...params}\n                            label=\"Search transaction\"\n                            required\n                          />\n                        )}\n                        onChange={(e, value, reason) =>\n                          onTransactionSearch(e, value, reason)\n                        }\n                        getOptionLabel={(option) => option || \"\"}\n                        renderOption={(props, option) => (\n                          <li {...props} key={option?.id}>\n                            <span>{option?.name || \"\"}</span>\n                          </li>\n                        )}\n                        fullWidth\n                      />\n                    </Grid>\n\n                    <Grid item xs={12} md={3}>\n                      <Autocomplete\n                        ListboxProps={{\n                          style: { maxHeight: \"70vh\" },\n                        }}\n                        size=\"small\"\n                        label=\"Lines to display\"\n                        id=\"lines-display-drop-down\"\n                        options={[\n                          \"All lines\",\n                          \"Lines with DEBIT only\",\n                          \"Lines with CREDIT only\",\n                        ]}\n                        value={columnDisplay || null}\n                        renderInput={(params) => (\n                          <TextField\n                            {...params}\n                            label=\"Lines to display\"\n                            required\n                          />\n                        )}\n                        onChange={(e, value, reason) =>\n                          onChangeColumnsDisplay(e, value, reason)\n                        }\n                        getOptionLabel={(option) => option || \"\"}\n                        fullWidth\n                      />\n                    </Grid>\n\n                    <Grid item xs={12} md={12}>\n                      <TableContainer>\n                        <Table border={1}>\n                          <TableBody>\n                            <TableRow>\n                              <TableCell size=\"small\" />\n                              {mainCheckBoxes?.map(\n                                (mainColumn, indexMainCol) => (\n                                  <TableCell\n                                    size=\"small\"\n                                    align=\"center\"\n                                    key={indexMainCol}\n                                  >\n                                    <Checkbox\n                                      checked={mainColumn?.checked}\n                                      color=\"primary\"\n                                      onChange={(e) =>\n                                        onChangeCheckBox(\n                                          e.target.checked,\n                                          indexMainCol,\n                                          \"mainCol\"\n                                        )\n                                      }\n                                    />\n                                  </TableCell>\n                                )\n                              )}\n                            </TableRow>\n                            {tableData &&\n                              tableData?.length > 0 &&\n                              tableData?.map((row, index) => (\n                                <TableRow key={index}>\n                                  {row && row?.columns?.length > 0 ? (\n                                    <Fragment key={index}>\n                                      <TableCell size=\"small\" align=\"left\">\n                                        <Checkbox\n                                          checked={row?.checked}\n                                          color=\"primary\"\n                                          onChange={(e) =>\n                                            onChangeCheckBox(\n                                              e.target.checked,\n                                              index,\n                                              \"row\"\n                                            )\n                                          }\n                                        />\n                                      </TableCell>\n                                      {row?.columns?.map((column, indexCol) => (\n                                        <Fragment key={indexCol}>\n                                          <TableCell size=\"small\" align=\"left\">\n                                            {column}\n                                          </TableCell>\n                                        </Fragment>\n                                      ))}\n                                    </Fragment>\n                                  ) : (\n                                    <Fragment key={index}></Fragment>\n                                  )}\n                                </TableRow>\n                              ))}\n                          </TableBody>\n                        </Table>\n                      </TableContainer>\n                    </Grid>\n                  </>\n                ) : (\n                  <></>\n                )}\n              </>\n            ) : (\n              <></>\n            )}\n          </Grid>\n        </Container>\n      </Page>\n    </>\n  );\n}\n"],"sourceRoot":""}