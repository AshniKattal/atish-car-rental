{"version":3,"sources":["pages/dashboard/manage-admin/CreateAdminDialog.js"],"names":["CreateAdminDialog","openDialog","handleCloseDialog","adminDetails","setAdminDetails","init_admin_list","firstName","useAuth","user","lastName","contactNumber","email","password","role","access","sysFunc","a_comp","enqueueSnackbar","useSnackbar","dispatch","useDispatch","useState","step","setStep","selectedCompanies","set_selectedCompanies","open","onClose","maxWidth","fullWidth","id","type","dialogType","spacing","direction","onClick","color","variant","e","preventDefault","setLoading","ValidateEmptyInput","ValidateEmail","ValidatePassword","userObjectParams","functions","httpsCallable","createUserByAdmin","then","result","data","catch","err","message","addAdmin"],"mappings":"8UAqTeA,UAhRf,YAMI,IALFC,EAKC,EALDA,WACAC,EAIC,EAJDA,kBACAC,EAGC,EAHDA,aACAC,EAEC,EAFDA,gBACAC,EACC,EADDA,gBAKEC,GAHeC,cAATC,KAYJL,EATFG,WACAG,EAQEN,EARFM,SACAC,EAOEP,EAPFO,cACAC,EAMER,EANFQ,MACAC,EAKET,EALFS,SACAC,EAIEV,EAJFU,KACAC,EAGEX,EAHFW,OACAC,EAEEZ,EAFFY,QACAC,EACEb,EADFa,OAEMC,EAAoBC,cAApBD,gBACFE,EAAWC,cACjB,EAAwBC,mBAAS,GAAjC,mBAAOC,EAAP,KAAaC,EAAb,KAEA,EAAmDF,mBAAS,IAA5D,mBAAOG,EAAP,KAA0BC,EAA1B,KAsKA,OACE,mCACE,eAAC,IAAD,CACEC,KAAMzB,EACN0B,QAASzB,EACT0B,SAAU,KACVC,WAAS,EAJX,UAME,cAAC,IAAD,CAAaC,GAAG,qBAAhB,2BACA,eAAC,IAAD,WACE,cAAC,IAAD,IACA,uBACU,IAATR,EACC,cAAC,IAAD,CACEnB,aAAcA,EACdC,gBAAiBA,EACjBoB,kBAAmBA,EACnBC,sBAAuBA,EACvBM,KAAK,QACLC,WAAY,QAEH,IAATV,EACF,cAAC,IAAD,CACEnB,aAAcA,EACdC,gBAAiBA,EACjB2B,KAAK,QACLC,WAAY,QAGd,MAGJ,cAAC,IAAD,UACE,eAAC,IAAD,CAAOC,QAAS,EAAGC,UAAU,MAA7B,UACY,IAATZ,EACC,cAAC,IAAD,CACEa,QAAS,WACPZ,EAAQ,IAEVa,MAAM,UACNC,QAAQ,YALV,kBASW,IAATf,EACF,qCACE,cAAC,IAAD,CACEa,QAAS,kBAAMZ,EAAQ,IACvBa,MAAM,YACNC,QAAQ,YAHV,kBAOA,cAAC,IAAD,CACEF,QAAS,SAACG,GAAD,OA1NR,SAACA,GAGhB,GAFAA,EAAEC,iBACFpB,EAASqB,aAAW,IAEjBC,YAAmB,CAClBnC,EACAG,EACAC,EACAC,EACAC,EACAC,IAKG,GAAK6B,YAAc/B,GAKnB,GAAKgC,YAAiB/B,GAKtB,CACL,IAAIgC,EAAmB,CACrBtC,UAAWA,EACXG,SAAUA,EACVC,cAAeA,EACfC,MAAOA,EACPC,SAAUA,EACVC,KAAMA,EACNC,OAAQA,EACRC,QAASA,EACTC,OAAQA,GAAU,IAGM6B,IAAUC,cAAc,uBAClDC,CAAkB,eAAKH,IACpBI,MAAK,SAACC,GAAY,IAAD,EACZ5C,GACFA,IAEFkB,EAAQ,GACRN,GAAsB,OAANgC,QAAM,IAANA,GAAA,UAAAA,EAAQC,YAAR,eAAcD,SAAU,GAAI,CAAEZ,QAAS,YACvDlB,EAASqB,aAAW,IACpBtC,OAEDiD,OAAM,SAACC,GACN7B,EAAQ,GACRN,EAAe,OAACmC,QAAD,IAACA,OAAD,EAACA,EAAKC,QAAS,CAAEhB,QAAS,UACzClB,EAASqB,aAAW,YA/BxBvB,EAAgB,sDAAuD,CACrEoB,QAAS,UAEXlB,EAASqB,aAAW,SARpBvB,EAAgB,4CAA6C,CAC3DoB,QAAS,UAEXlB,EAASqB,aAAW,SANpBvB,EAAgB,gCAAiC,CAAEoB,QAAS,UAC5DlB,EAASqB,aAAW,IA4MQc,CAAShB,IACzBF,MAAM,UACNC,QAAQ,YAHV,oBASF,GAGF,cAAC,IAAD,CACEF,QAAS,WACPjC,IACAqB,EAAQ,IAEVa,MAAM,QACNC,QAAQ,WANV","file":"static/js/89.57ac93db.chunk.js","sourcesContent":["import {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  FormControl,\n  MenuItem,\n  Select,\n  TextField,\n  Typography,\n  TableContainer,\n  Table,\n  TableHead,\n  TableBody,\n  TableRow,\n  TableCell,\n  Checkbox,\n  Stack,\n  Divider,\n} from \"@mui/material\";\n\nimport { useState } from \"react\";\nimport { functions } from \"../../../firebase\";\nimport { useDispatch } from \"react-redux\";\nimport {\n  ValidateEmail,\n  ValidatePassword,\n  ValidateEmptyInput,\n} from \"../../../components/core-functions/SelectionCoreFunctions\";\nimport { setLoading } from \"../../../features/globalSlice\";\nimport { useSnackbar } from \"notistack\";\nimport { getPermissions } from \"../permisssions/Permissions\";\nimport useAuth from \"../../../hooks/useAuth\";\nimport AdminStep1 from \"./AdminStep1\";\nimport AdminStepPermission from \"./AdminStepPermission\";\n\nfunction CreateAdminDialog({\n  openDialog,\n  handleCloseDialog,\n  adminDetails,\n  setAdminDetails,\n  init_admin_list,\n}) {\n  const { user } = useAuth();\n\n  const {\n    firstName,\n    lastName,\n    contactNumber,\n    email,\n    password,\n    role,\n    access,\n    sysFunc,\n    a_comp,\n  } = adminDetails;\n  const { enqueueSnackbar } = useSnackbar();\n  const dispatch = useDispatch();\n  const [step, setStep] = useState(0);\n\n  const [selectedCompanies, set_selectedCompanies] = useState([]);\n\n  const addAdmin = (e) => {\n    e.preventDefault();\n    dispatch(setLoading(true));\n    if (\n      !ValidateEmptyInput([\n        firstName,\n        lastName,\n        contactNumber,\n        email,\n        password,\n        role,\n      ])\n    ) {\n      enqueueSnackbar(\"Please fill in all the inputs\", { variant: \"error\" });\n      dispatch(setLoading(false));\n    } else if (!ValidateEmail(email)) {\n      enqueueSnackbar(\"You have entered an invalid email address\", {\n        variant: \"error\",\n      });\n      dispatch(setLoading(false));\n    } else if (!ValidatePassword(password)) {\n      enqueueSnackbar(\"Password must be equal or greater than 6 characters\", {\n        variant: \"error\",\n      });\n      dispatch(setLoading(false));\n    } else {\n      let userObjectParams = {\n        firstName: firstName,\n        lastName: lastName,\n        contactNumber: contactNumber,\n        email: email,\n        password: password,\n        role: role,\n        access: access,\n        sysFunc: sysFunc,\n        a_comp: a_comp || [],\n      };\n\n      const createUserByAdmin = functions.httpsCallable(\"createuserbyadminnew\");\n      createUserByAdmin({ ...userObjectParams })\n        .then((result) => {\n          if (init_admin_list) {\n            init_admin_list();\n          }\n          setStep(0);\n          enqueueSnackbar(result?.data?.result || \"\", { variant: \"success\" });\n          dispatch(setLoading(false));\n          handleCloseDialog();\n        })\n        .catch((err) => {\n          setStep(0);\n          enqueueSnackbar(err?.message, { variant: \"error\" });\n          dispatch(setLoading(false));\n        });\n    }\n  };\n\n  /* const handleChkChange = (e, index, name) => {\n    let arr = [...sysFunc];\n    let newArr = [];\n    for (let i = 0; i < arr.length; i++) {\n      if (i === index) {\n        newArr.push({\n          ...arr[i],\n          [name]: e.target.checked,\n        });\n      } else {\n        newArr.push(arr[i]);\n      }\n    }\n    setAdminDetails({\n      ...adminDetails,\n      sysFunc: newArr,\n    });\n  }; */\n  /*   const assignAll = async () => {\n    let arr = await getPermissions(true);\n    setAdminDetails({\n      ...adminDetails,\n      sysFunc: arr,\n    });\n  };\n\n  const none = async () => {\n    let arr = await getPermissions(false);\n    setAdminDetails({\n      ...adminDetails,\n      sysFunc: arr,\n    });\n  }; */\n\n  /* async function onHandleRoleChange(value) {\n    if (value === \"Admin\") {\n      let arr = await getPermissions(true);\n      setAdminDetails({\n        ...adminDetails,\n        sysFunc: arr,\n        role: value,\n      });\n    } else if (value === \"SalePerson\") {\n      let arr = await getPermissions(false);\n      if (arr?.length > 0) {\n        let newPermissions = [];\n        arr.forEach((permission) => {\n          if (\n            permission.name === \"viewQuotation\" ||\n            permission.name === \"createQuotation\" ||\n            permission.name === \"updateQuotation\"\n          ) {\n            newPermissions.push({\n              ...permission,\n              [permission.name]: true,\n            });\n          } else {\n            newPermissions.push(permission);\n          }\n        });\n        setAdminDetails({\n          ...adminDetails,\n          sysFunc: newPermissions,\n          role: value,\n        });\n      }\n    } else if (value === \"Secretary\") {\n      let arr = await getPermissions(false);\n      if (arr?.length > 0) {\n        let newPermissions = [];\n        arr.forEach((permission) => {\n          if (\n            permission.name === \"accessPaymentExpense\" ||\n            permission.name === \"addExpense\" ||\n            permission.name === \"viewQuotation\" ||\n            permission.name === \"updateQuotation\" ||\n            permission.name === \"viewQuotation\" ||\n            permission.name === \"createQuotation\" ||\n            permission.name === \"viewInvoice\" ||\n            permission.name === \"createInvoice\" ||\n            permission.name === \"viewVatInvoice\" ||\n            permission.name === \"createVatInvoice\" ||\n            permission.name === \"viewPurchaseOrder\" ||\n            permission.name === \"createPurchaseOrder\" ||\n            permission.name === \"viewProforma\" ||\n            permission.name === \"createProforma\" ||\n            permission.name === \"viewCreditNote\" ||\n            permission.name === \"createCreditNote\" ||\n            permission.name === \"viewUnpaidInvoiceOnly\"\n          ) {\n            newPermissions.push({\n              ...permission,\n              [permission.name]: true,\n            });\n          } else {\n            newPermissions.push(permission);\n          }\n        });\n        setAdminDetails({\n          ...adminDetails,\n          sysFunc: newPermissions,\n          role: value,\n        });\n      }\n    }\n  } */\n\n  return (\n    <>\n      <Dialog\n        open={openDialog}\n        onClose={handleCloseDialog}\n        maxWidth={\"md\"}\n        fullWidth\n      >\n        <DialogTitle id=\"alert-dialog-title\">Create a User</DialogTitle>\n        <DialogContent>\n          <Divider />\n          <br />\n          {step === 0 ? (\n            <AdminStep1\n              adminDetails={adminDetails}\n              setAdminDetails={setAdminDetails}\n              selectedCompanies={selectedCompanies}\n              set_selectedCompanies={set_selectedCompanies}\n              type=\"admin\"\n              dialogType={\"add\"}\n            />\n          ) : step === 1 ? (\n            <AdminStepPermission\n              adminDetails={adminDetails}\n              setAdminDetails={setAdminDetails}\n              type=\"admin\"\n              dialogType={\"add\"}\n            />\n          ) : (\n            \"\"\n          )}\n        </DialogContent>\n        <DialogActions>\n          <Stack spacing={2} direction=\"row\">\n            {step === 0 ? (\n              <Button\n                onClick={() => {\n                  setStep(1);\n                }}\n                color=\"primary\"\n                variant=\"contained\"\n              >\n                Next\n              </Button>\n            ) : step === 1 ? (\n              <>\n                <Button\n                  onClick={() => setStep(0)}\n                  color=\"secondary\"\n                  variant=\"contained\"\n                >\n                  Back\n                </Button>\n                <Button\n                  onClick={(e) => addAdmin(e)}\n                  color=\"primary\"\n                  variant=\"contained\"\n                >\n                  Add\n                </Button>\n              </>\n            ) : (\n              \"\"\n            )}\n\n            <Button\n              onClick={() => {\n                handleCloseDialog();\n                setStep(0);\n              }}\n              color=\"error\"\n              variant=\"outlined\"\n            >\n              Cancel\n            </Button>\n          </Stack>\n        </DialogActions>\n      </Dialog>\n    </>\n  );\n}\n\nexport default CreateAdminDialog;\n"],"sourceRoot":""}